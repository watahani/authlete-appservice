openapi: 3.0.3
info:
  title: Authlete API Explorer
  description: "<div class=\"min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-6\">\n  <div class=\"flex justify-end mb-4\">\n    <label for=\"theme-toggle\" class=\"flex items-center cursor-pointer\">\n      <div class=\"relative\">Dark mode:\n        <input type=\"checkbox\" id=\"theme-toggle\" class=\"sr-only\" onchange=\"toggleTheme()\">\n        <div class=\"block bg-gray-600 w-14 h-8 rounded-full\"></div>\n        <div class=\"dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition\"></div>\n      </div>\n    </label>\n  </div>\n  <header class=\"bg-green-500 dark:bg-green-700 p-4 rounded-lg text-white text-center\">\n    <p>\n      Welcome to the <strong>Authlete API documentation</strong>. Authlete is an <strong>API-first service</strong>\n      where every aspect of the platform is configurable via API. This explorer provides a convenient way to\n      authenticate and interact with the API, allowing you to see Authlete in action quickly. \U0001F680\n    </p>\n    <p>\n      At a high level, the Authlete API is grouped into two categories:\n    </p>\n    <ul class=\"list-disc list-inside\">\n      <li><strong>Management APIs</strong>: Enable you to manage services and clients. \U0001F527</li>\n      <li><strong>Runtime APIs</strong>: Allow you to build your own Authorization Servers or Verifiable Credential (VC)\n        issuers. \U0001F510</li>\n    </ul>\n    <p>All API endpoints are secured using access tokens issued by Authlete's Identity Provider (IdP). If you already\n      have an Authlete account, simply use the <em>Get Token</em> option on the Authentication page to log in and obtain\n      an access token for API usage. If you don't have an account yet, <a href=\"https://console.authlete.com/register\">sign up\n        here</a> to get started.</p>\n  </header>\n  <main>\n    <section id=\"api-servers\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F310 API Servers</h2>\n      <p>Authlete is a global service with clusters available in multiple regions across the world.</p>\n      <p>Currently, our service is available in the following regions:</p>\n      <div class=\"grid grid-cols-2 gap-4\">\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1FA\U0001F1F8 US</p>\n        </div>\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1EF\U0001F1F5 JP</p>\n        </div>\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1EA\U0001F1FA EU</p>\n        </div>\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1E7\U0001F1F7 Brazil</p>\n        </div>\n      </div>\n      <p>Our customers can host their data in the region that best meets their requirements.</p>\n      <a href=\"#servers\" class=\"block mt-4 text-green-500 dark:text-green-300 hover:underline text-center\">Select your\n        preferred server</a>\n    </section>\n    <section id=\"authentication\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F511 Authentication</h2>\n      <p>The API Explorer requires an access token to call the API.</p>\n      <p>You can create the access token from the <a href=\"https://console.authlete.com\">Authlete Management Console</a> and set it in the HTTP Bearer section of Authentication page.</p>\n      <p>Alternatively, if you have an Authlete account, the API Explorer can log you in with your Authlete account and\n        automatically acquire the required access token.</p>\n      <div class=\"theme-admonition theme-admonition-warning admonition_o5H7 alert alert--warning\">\n        <div class=\"admonitionContent_Knsx\">\n          <p>⚠️ <strong>Important Note:</strong> When the API Explorer acquires the token after login, the access tokens\n            will have the same permissions as the user who logs in as part of this flow.</p>\n        </div>\n      </div>\n      <a href=\"#auth\" class=\"block mt-4 text-green-500 dark:text-green-300 hover:underline text-center\">Setup your\n        access token</a>\n    </section>\n    <section id=\"tutorials\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F393 Tutorials</h2>\n      <p>If you have successfully tested the API from the API Console and want to take the next step of integrating the\n        API into your application, or if you want to see a sample using Authlete APIs, follow the links below. These\n        resources will help you understand key concepts and how to integrate Authlete API into your applications.</p>\n      <div class=\"mt-4\">\n        <a href=\"https://www.authlete.com/developers/getting_started/\"\n          class=\"block text-green-500 dark:text-green-300 font-bold hover:underline mb-2\">\U0001F680 Getting Started with\n          Authlete</a>\n          </br>\n        <a href=\"https://www.authlete.com/developers/tutorial/signup/\"\n          class=\"block text-green-500 dark:text-green-300 font-bold hover:underline\">\U0001F511 From Sign-Up to the First API\n          Request</a>\n      </div>\n    </section>\n    <section id=\"support\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F6E0 Contact Us</h2>\n      <p>If you have any questions or need assistance, our team is here to help.</p>\n      <a href=\"https://www.authlete.com/contact/\"\n        class=\"block mt-4 text-green-500 dark:text-green-300 font-bold hover:underline\">Contact Page</a>\n    </section>\n  </main>\n</div>\n"
  version: 3.0.0
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: "\U0001F1FA\U0001F1F8 US Cluster"
    url: 'https://us.authlete.com'
  - description: "\U0001F1EF\U0001F1F5 Japan Cluster"
    url: 'https://jp.authlete.com'
  - description: "\U0001F1EA\U0001F1FA Europe Cluster"
    url: 'https://eu.authlete.com'
  - description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
    url: 'https://br.authlete.com'
security:
  - authlete: []
  - bearer: []
paths:
  '/api/{serviceId}/service/get':
    get:
      summary: Get Service
      description: |
        Get a service.

        If the access token can only view or modify clients underneath this service, but does not
        have access to view this service directly, a limited view of the service will be returned.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
              examples:
                full:
                  summary: Example showing the full service object.
                  value:
                    accessTokenDuration: 3600
                    accessTokenType: Bearer
                    allowableClockSkew: 0
                    apiKey: 21653835348762
                    attributes:
                      - key: attribute1-key
                        value: attribute1-value
                      - key: attribute2-key
                        value: attribute2-value
                    authorizationEndpoint: 'https://my-service.example.com/authz'
                    authorizationResponseDuration: 0
                    backchannelAuthReqIdDuration: 0
                    backchannelBindingMessageRequiredInFapi: false
                    backchannelPollingInterval: 0
                    backchannelUserCodeParameterSupported: false
                    claimShortcutRestrictive: false
                    clientIdAliasEnabled: true
                    clientsPerDeveloper: 0
                    createdAt: 1639373421000
                    dcrScopeUsedAsRequestable: false
                    deviceFlowCodeDuration: 0
                    deviceFlowPollingInterval: 0
                    directAuthorizationEndpointEnabled: false
                    directIntrospectionEndpointEnabled: false
                    directJwksEndpointEnabled: false
                    directRevocationEndpointEnabled: false
                    directTokenEndpointEnabled: false
                    directUserInfoEndpointEnabled: false
                    dynamicRegistrationSupported: false
                    errorDescriptionOmitted: false
                    errorUriOmitted: false
                    frontChannelRequestObjectEncryptionRequired: false
                    grantManagementActionRequired: false
                    hsmEnabled: false
                    idTokenDuration: 0
                    introspectionEndpoint: 'https://my-service.example.com/introspection'
                    issSuppressed: false
                    issuer: 'https://my-service.example.com'
                    metadata:
                      - key: clientCount
                        value: '1'
                    missingClientIdAllowed: false
                    modifiedAt: 1639373421000
                    mutualTlsValidatePkiCertChain: false
                    nbfOptional: false
                    number: 5041
                    parRequired: false
                    pkceRequired: true
                    pkceS256Required: false
                    pushedAuthReqDuration: 0
                    refreshTokenDuration: 3600
                    refreshTokenDurationKept: false
                    refreshTokenDurationReset: false
                    refreshTokenKept: false
                    requestObjectEncryptionAlgMatchRequired: false
                    requestObjectEncryptionEncMatchRequired: false
                    requestObjectRequired: false
                    revocationEndpoint: 'https://my-service.example.com/revocation'
                    scopeRequired: false
                    serviceName: My service
                    serviceOwnerNumber: 2
                    singleAccessTokenPerSubject: false
                    supportedClaimTypes:
                      - NORMAL
                    supportedDisplays:
                      - PAGE
                    supportedGrantTypes:
                      - AUTHORIZATION_CODE
                      - REFRESH_TOKEN
                    supportedIntrospectionAuthMethods:
                      - CLIENT_SECRET_BASIC
                    supportedResponseTypes:
                      - CODE
                    supportedRevocationAuthMethods:
                      - CLIENT_SECRET_BASIC
                    supportedScopes:
                      - defaultEntry: false
                        description: A permission to read your history.
                        name: history.read
                      - defaultEntry: false
                        description: A permission to read your timeline.
                        name: timeline.read
                    supportedTokenAuthMethods:
                      - CLIENT_SECRET_BASIC
                    tlsClientCertificateBoundAccessTokens: false
                    tokenEndpoint: 'https://my-service.example.com/token'
                    tokenExpirationLinked: false
                    traditionalRequestObjectProcessingApplied: false
                    unauthorizedOnClientConfigSupported: false
                    userCodeLength: 0
                limited:
                  summary: Example showing the limited service object.
                  value:
                    apiKey: 21653835348762
                    description: This Service.
                    number: 5041
                    serviceName: My service
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: service_get_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/service/get \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long serviceId = ...;

            api.getService(serviceId);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            serviceId = ...

            api.getService(serviceId)
      tags:
        - Service Management
  /api/service/get/list:
    get:
      summary: List Services
      description: |
        Get a list of services.

        If the access token can only view or modify clients underneath a service, but does not
        have access to view that service directly, a limited view of the service will be returned.
        Otherwise, all properties of the service are returned.

        If the access token is an administrative token, this returns a list of all services on the Authlete instance.
        Otherwise, all services that the access token can view, even in a limited fashion, are returned.
      parameters:
        - in: query
          name: start
          schema:
            type: integer
            format: int32
          required: false
          description: Start index (inclusive) of the result set. The default value is 0. Must not be a negative number.
        - in: query
          name: end
          schema:
            type: integer
            format: int32
          required: false
          description: End index (exclusive) of the result set. The default value is 5. Must not be a negative number.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  start:
                    type: integer
                    format: int32
                    description: |
                      Start index (inclusive) of the result set. The default value is 0. Must not be a negative
                      number.
                  end:
                    type: integer
                    format: int32
                    description: |
                      Start index (inclusive) of the result set. The default value is 0. Must not be a negative
                      number.
                  totalCount:
                    type: integer
                    format: int32
                    description: |
                      Total number of services owned by the service owner. This doesn't mean the number of services
                      contained in the response.
                  services:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
                    description: |
                      An array of services.
              examples:
                full:
                  summary: Example showing the full service view.
                  value:
                    start: 0
                    end: 5
                    totalCount: 1
                    services:
                      - accessTokenDuration: 3600
                        accessTokenType: Bearer
                        allowableClockSkew: 0
                        apiKey: 21653835348762
                        apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                        attributes:
                          - key: attribute1-key
                            value: attribute1-value
                          - key: attribute2-key
                            value: attribute2-value
                        authorizationEndpoint: 'https://as.example.com/authz'
                        authorizationResponseDuration: 0
                        backchannelAuthReqIdDuration: 0
                        backchannelBindingMessageRequiredInFapi: false
                        backchannelPollingInterval: 0
                        backchannelUserCodeParameterSupported: false
                        claimShortcutRestrictive: false
                        clientIdAliasEnabled: true
                        createdAt: 1639373421000
                        dcrScopeUsedAsRequestable: false
                        deviceFlowCodeDuration: 0
                        deviceFlowPollingInterval: 0
                        directAuthorizationEndpointEnabled: false
                        directIntrospectionEndpointEnabled: false
                        directJwksEndpointEnabled: false
                        directRevocationEndpointEnabled: false
                        directTokenEndpointEnabled: false
                        directUserInfoEndpointEnabled: false
                        dynamicRegistrationSupported: false
                        errorDescriptionOmitted: false
                        errorUriOmitted: false
                        frontChannelRequestObjectEncryptionRequired: false
                        grantManagementActionRequired: false
                        hsmEnabled: false
                        idTokenDuration: 0
                        introspectionEndpoint: 'https://my-service.example.com/introspection'
                        issSuppressed: false
                        issuer: 'https://my-service.example.com'
                        metadata:
                          - key: clientCount
                            value: '1'
                        missingClientIdAllowed: false
                        modifiedAt: 1639373421000
                        mutualTlsValidatePkiCertChain: false
                        nbfOptional: false
                        number: 5041
                        parRequired: false
                        pkceRequired: true
                        pkceS256Required: false
                        pushedAuthReqDuration: 0
                        refreshTokenDuration: 3600
                        refreshTokenDurationKept: false
                        refreshTokenDurationReset: false
                        refreshTokenKept: false
                        requestObjectEncryptionAlgMatchRequired: false
                        requestObjectEncryptionEncMatchRequired: false
                        requestObjectRequired: false
                        revocationEndpoint: 'https://my-service.example.com/revocation'
                        scopeRequired: false
                        serviceName: My service
                        serviceOwnerNumber: 2
                        singleAccessTokenPerSubject: false
                        supportedClaimTypes:
                          - NORMAL
                        supportedDisplays:
                          - PAGE
                        supportedGrantTypes:
                          - AUTHORIZATION_CODE
                          - REFRESH_TOKEN
                        supportedIntrospectionAuthMethods:
                          - CLIENT_SECRET_BASIC
                        supportedResponseTypes:
                          - CODE
                        supportedRevocationAuthMethods:
                          - CLIENT_SECRET_BASIC
                        supportedScopes:
                          - defaultEntry: false
                            description: A permission to read your history.
                            name: history.read
                          - defaultEntry: false
                            description: A permission to read your timeline.
                            name: timeline.read
                        supportedTokenAuthMethods:
                          - CLIENT_SECRET_BASIC
                        tlsClientCertificateBoundAccessTokens: false
                        tokenEndpoint: 'https://my-service.example.com/token'
                        tokenExpirationLinked: false
                        traditionalRequestObjectProcessingApplied: false
                        unauthorizedOnClientConfigSupported: false
                        userCodeLength: 0
                limited:
                  summary: Example showing the limited service view.
                  value:
                    start: 0
                    end: 5
                    totalCount: 1
                    services:
                      - apiKey: 21653835348762
                        clientIdAliasEnabled: true
                        number: 5041
                        serviceName: My service
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: service_get_list_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/9503564192/service/get/list?start=0\&end=5 \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            int start = 0;
            int end = 5;

            api.getServiceList(start, end);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            start = 0
            end = 5

            api.getServiceList(start, end)
      tags:
        - Service Management
  /api/service/create:
    post:
      summary: Create Service
      description: |
        Create a new service.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
            example:
              serviceName: My service
              issuer: 'https://my-service.example.com'
              clientIdAliasEnabled: true
              supportedGrantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
              supportedResponseTypes:
                - CODE
              authorizationEndpoint: 'https://my-service.example.com/authz'
              pkceRequired: true
              tokenEndpoint: 'https://my-service.example.com/token'
              supportedTokenAuthMethods:
                - CLIENT_SECRET_BASIC
              revocationEndpoint: 'https://my-service.example.com/revocation'
              supportedRevocationAuthMethods:
                - CLIENT_SECRET_BASIC
              introspectionEndpoint: 'https://my-service.example.com/introspection'
              supportedIntrospectionAuthMethods:
                - CLIENT_SECRET_BASIC
              accessTokenType: Bearer
              accessTokenDuration: 3600
              refreshTokenDuration: 3600
              supportedScopes:
                - name: timeline.read
                  defaultEntry: false
                  description: A permission to read your timeline.
                - name: history.read
                  defaultEntry: false
                  description: A permission to read your history.
              attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
              example:
                accessTokenDuration: 3600
                accessTokenType: Bearer
                allowableClockSkew: 0
                apiKey: 21653835348762
                apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                authorizationEndpoint: 'https://my-service.example.com/authz'
                authorizationResponseDuration: 0
                backchannelAuthReqIdDuration: 0
                backchannelBindingMessageRequiredInFapi: false
                backchannelPollingInterval: 0
                backchannelUserCodeParameterSupported: false
                claimShortcutRestrictive: false
                clientIdAliasEnabled: true
                clientsPerDeveloper: 0
                createdAt: 1639373421000
                dcrScopeUsedAsRequestable: false
                deviceFlowCodeDuration: 0
                deviceFlowPollingInterval: 0
                directAuthorizationEndpointEnabled: false
                directIntrospectionEndpointEnabled: false
                directJwksEndpointEnabled: false
                directRevocationEndpointEnabled: false
                directTokenEndpointEnabled: false
                directUserInfoEndpointEnabled: false
                dynamicRegistrationSupported: false
                errorDescriptionOmitted: false
                errorUriOmitted: false
                frontChannelRequestObjectEncryptionRequired: false
                grantManagementActionRequired: false
                hsmEnabled: false
                idTokenDuration: 0
                introspectionEndpoint: 'https://my-service.example.com/introspection'
                issSuppressed: false
                issuer: 'https://my-service.example.com'
                metadata:
                  - key: clientCount
                    value: '0'
                missingClientIdAllowed: false
                modifiedAt: 1639373421000
                mutualTlsValidatePkiCertChain: false
                nbfOptional: false
                number: 5041
                parRequired: false
                pkceRequired: true
                pkceS256Required: false
                pushedAuthReqDuration: 0
                refreshTokenDuration: 3600
                refreshTokenDurationKept: false
                refreshTokenDurationReset: false
                refreshTokenKept: false
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                revocationEndpoint: 'https://my-service.example.com/revocation'
                scopeRequired: false
                serviceName: My service
                serviceOwnerNumber: 2
                singleAccessTokenPerSubject: false
                supportedClaimTypes:
                  - NORMAL
                supportedDisplays:
                  - PAGE
                supportedGrantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                supportedIntrospectionAuthMethods:
                  - CLIENT_SECRET_BASIC
                supportedResponseTypes:
                  - CODE
                supportedRevocationAuthMethods:
                  - CLIENT_SECRET_BASIC
                supportedScopes:
                  - defaultEntry: false
                    description: A permission to read your history.
                    name: history.read
                  - defaultEntry: false
                    description: A permission to read your timeline.
                    name: timeline.read
                supportedTokenAuthMethods:
                  - CLIENT_SECRET_BASIC
                tlsClientCertificateBoundAccessTokens: false
                tokenEndpoint: 'https://my-service.example.com/token'
                tokenExpirationLinked: false
                traditionalRequestObjectProcessingApplied: false
                unauthorizedOnClientConfigSupported: false
                userCodeLength: 0
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: service_create_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/service/create \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "serviceName": "My Service", ... }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            Service service = new Service();
            service.setServiceName("My Service");
            ...

            api.createService(service);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            service = Service()
            service.serviceName = 'My Service'
            ...

            api.createService(service)
      tags:
        - Service Management
  '/api/{serviceId}/service/update':
    post:
      summary: Update Service
      description: |
        Update a service.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          schema:
            type: string
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
            example:
              accessTokenDuration: 3600
              accessTokenType: Bearer
              allowableClockSkew: 0
              attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
              authorizationEndpoint: 'https://my-service.example.com/authz'
              authorizationResponseDuration: 0
              backchannelAuthReqIdDuration: 0
              backchannelBindingMessageRequiredInFapi: false
              backchannelPollingInterval: 0
              backchannelUserCodeParameterSupported: false
              claimShortcutRestrictive: false
              clientIdAliasEnabled: true
              clientsPerDeveloper: 0
              dcrScopeUsedAsRequestable: false
              deviceFlowCodeDuration: 0
              deviceFlowPollingInterval: 0
              directAuthorizationEndpointEnabled: false
              directIntrospectionEndpointEnabled: false
              directJwksEndpointEnabled: false
              directRevocationEndpointEnabled: false
              directTokenEndpointEnabled: false
              directUserInfoEndpointEnabled: false
              dynamicRegistrationSupported: false
              errorDescriptionOmitted: false
              errorUriOmitted: false
              frontChannelRequestObjectEncryptionRequired: false
              grantManagementActionRequired: false
              hsmEnabled: false
              idTokenDuration: 0
              introspectionEndpoint: 'https://my-service.example.com/introspection'
              issSuppressed: false
              issuer: 'https://my-service.example.com'
              missingClientIdAllowed: false
              mutualTlsValidatePkiCertChain: false
              nbfOptional: false
              parRequired: false
              pkceRequired: true
              pkceS256Required: false
              pushedAuthReqDuration: 0
              refreshTokenDuration: 3600
              refreshTokenDurationKept: false
              refreshTokenDurationReset: false
              refreshTokenKept: false
              requestObjectEncryptionAlgMatchRequired: false
              requestObjectEncryptionEncMatchRequired: false
              requestObjectRequired: false
              revocationEndpoint: 'https://my-service.example.com/revocation'
              scopeRequired: false
              serviceName: My updated service
              singleAccessTokenPerSubject: false
              supportedClaimTypes:
                - NORMAL
              supportedDisplays:
                - PAGE
              supportedGrantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
              supportedIntrospectionAuthMethods:
                - CLIENT_SECRET_BASIC
              supportedResponseTypes:
                - CODE
              supportedRevocationAuthMethods:
                - CLIENT_SECRET_BASIC
              supportedScopes:
                - defaultEntry: false
                  description: A permission to read your history.
                  name: history.read
                - defaultEntry: false
                  description: A permission to read your timeline.
                  name: timeline.read
              supportedTokenAuthMethods:
                - CLIENT_SECRET_BASIC
              tlsClientCertificateBoundAccessTokens: false
              tokenEndpoint: 'https://my-service.example.com/token'
              tokenExpirationLinked: false
              traditionalRequestObjectProcessingApplied: false
              unauthorizedOnClientConfigSupported: false
              userCodeLength: 0
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
              example:
                accessTokenDuration: 3600
                accessTokenType: Bearer
                allowableClockSkew: 0
                apiKey: 21653835348762
                apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                authorizationEndpoint: 'https://my-service.example.com/authz'
                authorizationResponseDuration: 0
                backchannelAuthReqIdDuration: 0
                backchannelBindingMessageRequiredInFapi: false
                backchannelPollingInterval: 0
                backchannelUserCodeParameterSupported: false
                claimShortcutRestrictive: false
                clientIdAliasEnabled: true
                clientsPerDeveloper: 0
                createdAt: 1639373421000
                dcrScopeUsedAsRequestable: false
                deviceFlowCodeDuration: 0
                deviceFlowPollingInterval: 0
                directAuthorizationEndpointEnabled: false
                directIntrospectionEndpointEnabled: false
                directJwksEndpointEnabled: false
                directRevocationEndpointEnabled: false
                directTokenEndpointEnabled: false
                directUserInfoEndpointEnabled: false
                dynamicRegistrationSupported: false
                errorDescriptionOmitted: false
                errorUriOmitted: false
                frontChannelRequestObjectEncryptionRequired: false
                grantManagementActionRequired: false
                hsmEnabled: false
                idTokenDuration: 0
                introspectionEndpoint: 'https://my-service.example.com/introspection'
                issSuppressed: false
                issuer: 'https://my-service.example.com'
                metadata:
                  - key: clientCount
                    value: '1'
                missingClientIdAllowed: false
                modifiedAt: 1639373420725
                mutualTlsValidatePkiCertChain: false
                nbfOptional: false
                number: 5041
                parRequired: false
                pkceRequired: true
                pkceS256Required: false
                pushedAuthReqDuration: 0
                refreshTokenDuration: 3600
                refreshTokenDurationKept: false
                refreshTokenDurationReset: false
                refreshTokenKept: false
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                revocationEndpoint: 'https://my-service.example.com/revocation'
                scopeRequired: false
                serviceName: My updated service
                serviceOwnerNumber: 2
                singleAccessTokenPerSubject: false
                supportedClaimTypes:
                  - NORMAL
                supportedDisplays:
                  - PAGE
                supportedGrantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                supportedIntrospectionAuthMethods:
                  - CLIENT_SECRET_BASIC
                supportedResponseTypes:
                  - CODE
                supportedRevocationAuthMethods:
                  - CLIENT_SECRET_BASIC
                supportedScopes:
                  - defaultEntry: false
                    description: A permission to read your history.
                    name: history.read
                  - defaultEntry: false
                    description: A permission to read your timeline.
                    name: timeline.read
                supportedTokenAuthMethods:
                  - CLIENT_SECRET_BASIC
                tlsClientCertificateBoundAccessTokens: false
                tokenEndpoint: 'https://my-service.example.com/token'
                tokenExpirationLinked: false
                traditionalRequestObjectProcessingApplied: false
                unauthorizedOnClientConfigSupported: false
                userCodeLength: 0
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: service_update_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/service/update \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "serviceName": "My updated service", ... }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            // Get an existing service.
            long serviceId = ...;
            Service service = api.getService(serviceId);

            // Update "service name".
            service.setAServiceName("My updated service");

            api.updateService(service);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            # Get an existing service.
            serviceId = ...
            service = api.getService(serviceId)

            # Update "service name".
            service.serviceName = 'My updated service'

            api.updateService(service)
      tags:
        - Service Management
  '/api/{serviceId}/service/delete':
    delete:
      summary: Delete Service ⚡
      description: |
        Delete a service.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          schema:
            type: string
          required: true
      responses:
        '204':
          description: The service was successfully deleted.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: service_delete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X DELETE https://us.authlete.com/api/9503564192/service/delete/21653835348762 \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long serviceId = ...;

            api.deleteService(serviceId);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            serviceId = ...

            api.deleteService(serviceId)
      tags:
        - Service Management
  '/api/{serviceId}/client/get/{clientId}':
    get:
      summary: Get Client
      description: |
        Get a client.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: A client ID.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
              example:
                applicationType: WEB
                attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639468356000
                number: 6164
                parRequired: false
                redirectUris:
                  - 'https://my-client.example.com/cb1'
                  - 'https://my-client.example.com/cb2'
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                  - CODE
                  - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_get_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/client/get/26478243745571 \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long clientId = ...;

            api.getClient(clientId);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientId = ...

            api.getClient(clientId)
      tags:
        - Client Management
  '/api/{serviceId}/client/get/list':
    get:
      summary: List Clients
      description: |
        Get a list of clients on a service.

        If the access token can view a full service (including an admin), all clients within the
        service are returned. Otherwise, only clients that the access token can view within the
        service are returned.
        - ViewClient: []
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: query
          name: developer
          schema:
            type: string
          required: false
          description: |
            The developer of client applications. The default value is null. If this parameter is not set
            to `null`, client application of the specified developer are returned. Otherwise, all client
            applications that belong to the service are returned.
        - in: query
          name: start
          schema:
            type: integer
            format: int32
          required: false
          description: Start index (inclusive) of the result set. The default value is 0. Must not be a negative number.
        - in: query
          name: end
          schema:
            type: integer
            format: int32
          required: false
          description: End index (exclusive) of the result set. The default value is 5. Must not be a negative number.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  start:
                    type: integer
                    format: int32
                    description: |
                      Start index (inclusive) of the result set of the query.
                  end:
                    type: integer
                    format: int32
                    description: |
                      End index (exclusive) of the result set of the query.
                  totalCount:
                    type: integer
                    format: int32
                    description: |
                      Total number of clients that belong to the service. This doesn't mean the number of clients
                      contained in the response.
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                    description: |
                      An array of clients.
              examples:
                full:
                  summary: Example showing full client view.
                  value:
                    clients:
                      - applicationType: WEB
                        attributes:
                          - key: attribute1-key
                            value: attribute1-value
                          - key: attribute2-key
                            value: attribute2-value
                        authTimeRequired: false
                        bcUserCodeRequired: false
                        clientId: 26478243745571
                        clientIdAlias: my-client
                        clientIdAliasEnabled: true
                        clientName: My client
                        clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                        clientType: CONFIDENTIAL
                        createdAt: 1639468356000
                        defaultMaxAge: 0
                        derivedSectorIdentifier: my-client.example.com
                        dynamicallyRegistered: false
                        frontChannelRequestObjectEncryptionRequired: false
                        grantTypes:
                          - AUTHORIZATION_CODE
                          - REFRESH_TOKEN
                        idTokenSignAlg: RS256
                        modifiedAt: 1639468356000
                        number: 6164
                        parRequired: false
                        redirectUris:
                          - 'https://my-client.example.com/cb1'
                          - 'https://my-client.example.com/cb2'
                        requestObjectEncryptionAlgMatchRequired: false
                        requestObjectEncryptionEncMatchRequired: false
                        requestObjectRequired: false
                        responseTypes:
                          - CODE
                          - TOKEN
                        serviceNumber: 5041
                        subjectType: PUBLIC
                        tlsClientCertificateBoundAccessTokens: false
                        tokenAuthMethod: CLIENT_SECRET_BASIC
                    end: 3
                    start: 0
                    totalCount: 1
                limited:
                  summary: Example showing limited client view.
                  value:
                    clients:
                      - clientId: 26478243745571
                        clientIdAlias: my-client
                        clientIdAliasEnabled: true
                        clientName: My client
                        clientType: CONFIDENTIAL
                        number: 6164
                    end: 3
                    start: 0
                    totalCount: 1
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_get_list_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/client/get/list?developer=john\&start=0\&end=5 \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            String developer = "john";
            int start = 0;
            int end = 5;

            api.getClientList(developer, start, end);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            developer = 'john'
            start = 0
            end = 5

            api.getClientList(developer, start, end)
      tags:
        - Client Management
  '/api/{serviceId}/client/create':
    post:
      summary: Create Client
      description: |
        Create a new client.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
            example:
              developer: john
              clientName: My Client
              clientIdAlias: my-client
              clientIdAliasEnabled: true
              clientType: CONFIDENTIAL
              applicationType: WEB
              grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
              responseTypes:
                - CODE
                - TOKEN
              redirectUris:
                - 'https://my-client.example.com/cb1'
                - 'https://my-client.example.com/cb2'
              tokenAuthMethod: CLIENT_SECRET_BASIC
              attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
              example:
                applicationType: WEB
                attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639468356000
                number: 6164
                parRequired: false
                redirectUris:
                  - 'https://my-client.example.com/cb1'
                  - 'https://my-client.example.com/cb2'
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                  - CODE
                  - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_create_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/client/create \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "developer": "john", "clientName": "My Client", ... }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            Client client = new Client();
            client.setDeveloper("john");
            client.setClientName("My Client");
            ...

            api.createClient(client);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            client = Client()
            client.developer = 'john'
            client.clientName = 'My Client'
            ...

            api.createClient(client)
      tags:
        - Client Management
  '/api/{serviceId}/client/update/{clientId}':
    post:
      summary: Update Client
      description: |
        Update a client.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: A client ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
            example:
              applicationType: WEB
              attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
              authTimeRequired: false
              bcUserCodeRequired: false
              clientIdAlias: my-client
              clientIdAliasEnabled: true
              clientName: My updated client
              clientType: CONFIDENTIAL
              defaultMaxAge: 0
              derivedSectorIdentifier: my-client.example.com
              developer: john
              dynamicallyRegistered: false
              frontChannelRequestObjectEncryptionRequired: false
              grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
              idTokenSignAlg: RS256
              parRequired: false
              redirectUris:
                - 'https://my-client.example.com/cb1'
                - 'https://my-client.example.com/cb2'
              requestObjectEncryptionAlgMatchRequired: false
              requestObjectEncryptionEncMatchRequired: false
              requestObjectRequired: false
              responseTypes:
                - CODE
                - TOKEN
              subjectType: PUBLIC
              tlsClientCertificateBoundAccessTokens: false
              tokenAuthMethod: CLIENT_SECRET_BASIC
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
              example:
                applicationType: WEB
                attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My updated client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639557082764
                number: 6164
                parRequired: false
                redirectUris:
                  - 'https://my-client.example.com/cb1'
                  - 'https://my-client.example.com/cb2'
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                  - CODE
                  - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_update_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/client/update/26478243745571 \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "clientName": "My updated client", ... }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            // Get an existing client.
            long clientId = ...;
            Client client = api.getClient(clientId);

            // Update "client name".
            client.setClientName("My updated client");

            api.updateClient(client);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            # Get an existing client.
            clientId = ...
            client = api.getClient(clientId)

            # Update "client name".
            client.clientName = 'My updated client'

            api.updatedClient(client)
      tags:
        - Client Management
  '/api/{serviceId}/client/delete/{clientId}':
    delete:
      summary: Delete Client ⚡
      description: |
        Delete a client.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: The client ID.
      responses:
        '204':
          description: The client was successfully deleted.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_delete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X DELETE https://us.authlete.com/api/21653835348762/client/delete/26478243745571 \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long clientId = ...;

            api.deleteClient(clientId);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientId = ...

            api.deleteClient(clientId)
      tags:
        - Client Management
  '/api/{serviceId}/client/lock_flag/update/{clientIdentifier}':
    post:
      summary: Update Client Lock
      description: |
        Lock and unlock a client
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientIdentifier
          schema:
            type: string
          required: true
          description: A client ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required:
                - clientLocked
              properties:
                clientLocked:
                  type: boolean
                  description: |
                    The flag value to be set
            example:
              clientLocked: true
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1lock_flag~1update~1%7BclientIdentifier%7D/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                required:
                  - resultCode
                  - resultMessage
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_flag_update_api
      tags:
        - Client Management
  '/api/{serviceId}/client/secret/refresh/{clientIdentifier}':
    get:
      summary: Rotate Client Secret
      description: |
        Refresh the client secret of a client. A new value of the client secret will be generated by the
        Authlete server.

        If you want to specify a new value, use `/api/client/secret/update` API.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientIdentifier
          schema:
            type: string
          required: true
          description: |
            The client ID or the client ID alias of a client.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  newClientSecret:
                    type: string
                    description: |
                      The new client secret.
                  oldClientSecret:
                    type: string
                    description: |
                      The old client secret.
              example:
                resultCode: A148001
                resultMessage: '[A148001] Successfully refreshed the client secret of the client (ID = 26478243745571).'
                newClientSecret: 6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA
                oldClientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_secret_refresh_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/client/secret/refresh/26478243745571 \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            String clientIdentifier = ...;

            api.refreshClientSecret(clientIdentifier);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientIdentifier = ...

            api.refreshClientSecret(clientIdentifier)
      tags:
        - Client Management
  '/api/{serviceId}/client/secret/update/{clientIdentifier}':
    post:
      summary: Update Client Secret
      description: |
        Update the client secret of a client.

        If you want to have the Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`
        API.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientIdentifier
          schema:
            type: string
          required: true
          description: |
            The client ID or the client ID alias of a client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - clientSecret
              properties:
                clientSecret:
                  type: string
                  description: |
                    The new value of the client secret. Valid characters for a client secret are `A-Z`, `a-z`, `0-9`,
                    `-`, and `_`. The maximum length of a client secret is 86.
            example:
              clientSecret: my_updated_client_secret
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1secret~1update~1%7BclientIdentifier%7D/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  newClientSecret:
                    type: string
                    description: |
                      The new client secret.
                  oldClientSecret:
                    type: string
                    description: |
                      The old client secret.
              example:
                resultCode: A149001
                resultMessage: '[A149001] Successfully updated the client secret of the client (ID = 26478243745571).'
                newClientSecret: my_updated_client_secret
                oldClientSecret: 6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_secret_update_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/client/secret/update/26478243745571 \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "clientSecret": "..." }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            String clientIdentifier = ...;
            String clientSecret = "my_updated_client_secret";

            api.updateClientSecret(clientIdentifier, clientSecret);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientIdentifier = ...
            clientSecret = 'my_new_client_secret'

            api.updateClientSecret(clientIdentifier, clientSecret)
      tags:
        - Client Management
  '/api/{serviceId}/client/authorization/get/list':
    get:
      summary: Get Authorized Applications
      description: |
        Get a list of client applications that an end-user has authorized.

        The subject parameter is required and can be provided either in the path or as a query parameter.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
        - in: query
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
        - in: query
          name: developer
          schema:
            type: string
          required: false
          description: |
            Unique ID of a client developer.
        - in: query
          name: start
          schema:
            type: integer
            format: int32
          required: false
          description: Start index of search results (inclusive). The default value is 0.
        - in: query
          name: end
          schema:
            type: integer
            format: int32
          required: false
          description: |
            End index of search results (exclusive). The default value is 5.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  start:
                    type: integer
                    format: int32
                    description: |
                      Start index of search results (inclusive).
                  end:
                    type: integer
                    format: int32
                    description: |
                      End index of search results (exclusive).
                  developer:
                    type: string
                    description: |
                      Unique ID of a client developer.
                  subject:
                    type: string
                    description: |
                      Unique user ID of an end-user.
                  totalCount:
                    type: integer
                    format: int32
                    description: |
                      Unique ID of a client developer.
                  clients:
                    type: array
                    items:
                      $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token~1get~1list/get/responses/200/content/application~1json/schema/properties/client'
                    description: |
                      An array of clients.
              example:
                clients:
                  - clientId: 26478243745571
                    clientIdAlias: my-client
                    clientIdAliasEnabled: true
                    clientName: My client
                    clientType: CONFIDENTIAL
                    number: 6164
                end: 5
                start: 0
                subject: john
                totalCount: 1
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_authorization_get_list_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/client/authorization/get/list/john?start=0\&end=5 \
            -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            ClientAuthorizationGetListRequest req = new ClientAuthorizationGetListRequest();
            req.setSubject("john");
            req.setStart(0);
            req.setEnd(5);

            api.getClientAuthorizationList(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = ClientAuthorizationGetListRequest()
            req.subject = 'john'
            req.start = 0
            req.end = 5

            api.getClientAuthorizationList(req)
      tags:
        - Client Management
  '/api/{serviceId}/client/authorization/update/{clientId}':
    post:
      summary: Update Client Tokens
      description: |
        Update attributes of all existing access tokens given to a client application.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: |
            A client ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required:
                - subject
              properties:
                subject:
                  type: string
                  description: |
                    The subject (= unique identifier) of the end-user who has granted authorization to the client
                    application.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
                    existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
                    scope names listed in this request parameter should be delimited by spaces (after form encoding,
                    spaces are converted to `+`).
            example:
              subject: john
              scopes:
                - history.read
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1authorization~1update~1%7BclientId%7D/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
              example:
                resultCode: A138001
                resultMessage: '[A138001] Updated 1 access token(s) issued to the client (ID = 26478243745571) of the service (API Key = 21653835348762).'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_authorization_update_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/client/authorization/update/26478243745571 \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "subject": "john", "scopes": [ "history.read" ] }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long clientId = ...;

            ClientAuthorizationUpdateRequest req = new ClientAuthorizationUpdateRequest();
            req.setSubject("john");
            req.setScopes(new String[]{ "history.read" });

            api.updateClientAuthorization(clientId, req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientId = ...

            req = ClientAuthorizationUpdateRequest()
            req.subject = 'john'
            req.scopes = [ 'history.read' ]

            api.updateClientAuthorization(clientId, req)
      tags:
        - Client Management
  '/api/{serviceId}/client/authorization/delete/{clientId}':
    delete:
      summary: Delete Client Tokens
      description: |
        Delete all existing access tokens issued to a client application by an end-user.

        The subject parameter is required and can be provided either in the path or as a query parameter.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: |
            A client ID.
        - in: path
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
        - in: query
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1granted_scopes~1get~1%7BclientId%7D/get/responses/200/content/application~1json/schema'
              example:
                resultCode: A137001
                resultMessage: '[A137001] Deleted 3 access token(s) issued to the client (ID = 26478243745571) of the service (API Key = 21653835348762).'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_authorization_delete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X DELETE https://us.authlete.com/api/21653835348762/client/authorization/delete/26478243745571/john \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long clientId = ...;
            String subject = "john";

            api.deleteClientAuthorization(clientId, subject);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientId = ...
            subject = 'john'

            api.deleteClientAuthorization(clientId, subject)
      tags:
        - Client Management
  '/api/{serviceId}/client/granted_scopes/get/{clientId}':
    get:
      summary: Get Granted Scopes
      description: |
        Get the set of scopes that a user has granted to a client application.

        <br>
        <details>
        <summary>Description</summary>

        Possible values for `requestableScopes` parameter in the response from this API are as follows.

        **null**

        The user has not granted authorization to the client application in the past, or records about the
        combination of the user and the client application have been deleted from Authlete's DB.

        **An empty set**

        The user has granted authorization to the client application in the past, but no scopes are associated
        with the authorization.

        **A set with at least one element**

        The user has granted authorization to the client application in the past and some scopes are associated
        with the authorization. These scopes are returned.
        Example: `[ "profile", "email" ]`

        The subject parameter is required and can be provided either in the path or as a query parameter.
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: |
            A client ID.
        - in: path
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
        - in: query
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  serviceApiKey:
                    type: integer
                    format: int64
                    description: A short message which explains the result of the API call.
                  clientId:
                    type: integer
                    format: int64
                    description: Get the client ID.
                  subject:
                    type: string
                    description: |
                      Get the subject (= unique identifier) of the user
                      who has granted authorization to the client.
                  latestGrantedScopes:
                    type: array
                    items:
                      type: string
                    description: |
                      Get the scopes granted to the client application by the last
                      authorization process by the user (who is identified by the
                      subject).
                  mergedGrantedScopes:
                    type: array
                    items:
                      type: string
                    description: |
                      Get the scopes granted to the client application by all the
                      past authorization processes. Note that revoked scopes are
                      not included.
                  modifiedAt:
                    type: integer
                    format: int64
                    description: |
                      Get the timestamp in milliseconds since Unix epoch
                      at which this record was modified.
              example:
                type: GrantedScopesGetResponse
                serviceApiKey: 21653835348762
                clientId: 26478243745571
                subject: john
                latestGrantedScopes:
                  - history.read
                mergedGrantedScopes:
                  - history.read
                  - timeline.read
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_granted_scopes_get_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/client/granted_scopes/get/26478243745571/john \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long clientId  = 26478243745571;
            String subject = "john";

            api.getGrantedScopes(clientId, subject);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientId = 26478243745571
            subject = 'john'

            api.getGrantedScopes(clientId, subject)
      tags:
        - Client Management
  '/api/{serviceId}/client/granted_scopes/delete/{clientId}':
    delete:
      summary: Delete Granted Scopes
      description: |
        Delete the set of scopes that an end-user has granted to a client application.

        <br>
        <details>
        <summary>Description</summary>

        Even if records about granted scopes are deleted by calling this API, existing access tokens are
        not deleted and scopes of existing access tokens are not changed.
        </details>

        The subject parameter is required and can be provided either in the path or as a query parameter.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: |
            A client ID.
        - in: path
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
        - in: query
          name: subject
          schema:
            type: string
          required: true
          description: |
            Unique user ID of an end-user.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_granted_scopes_delete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X DELETE https://us.authlete.com/api/21653835348762/client/granted_scopes/delete/26478243745571/john \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            long clientId  = ...;
            String subject = "john";

            api.deleteGrantedScopes(clientId, subject);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientId = ...
            subject = 'john'

            api.deleteGrantedScopes(clientId, subject)
      tags:
        - Client Management
  '/api/{serviceId}/auth/authorization':
    post:
      summary: Process Authorization Request
      x-badges:
        - color: red
          label: Core API
      description: |
        This API parses request parameters of an authorization request and returns necessary data for the authorization server
        implementation to process the authorization request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the authorization endpoint of
        the service. The endpoint implementation must extract the request parameters from the authorization
        request from the client application and pass them as the value of parameters request parameter for
        Authlete's `/auth/authorization` API.

        The value of `parameters` is either (1) the entire query string when the HTTP method of the request
        from the client application is `GET` or (2) the entire entity body (which is formatted in
        `application/x-www-form-urlencoded`) when the HTTP method of the request from the client application
        is `POST`.

        The following code snippet is an example in JAX-RS showing how to extract request parameters from
        the authorization request.

        ```java
        @GET
        public Response get(@Context UriInfo uriInfo)
        {
            // The query parameters of the authorization request.
            String parameters = uriInfo.getRequestUri().getQuery();
            ......
        }

        @POST
        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
        public Response post(String parameters)
        {
            // 'parameters' is the entity body of the authorization request.
            ......
        }
        ```

        The endpoint implementation does not have to parse the request parameters from the client application
        because Authlete's `/auth/authorization` API does it.

        The response from `/auth/authorization` API has various parameters. Among them, it is `action`
        parameter that the authorization server implementation should check first because it denotes the
        next action that the authorization server implementation should take. According to the value of
        `action`, the service implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content
        type although OAuth 2.0 specification does not mention the format of the error response when the
        redirect URI is not usable.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        is invalid.

        A response with HTTP status of "400 Bad Request" should be returned to the client application and
        Authlete recommends `application/json` as the content type although OAuth 2.0 specification does
        not mention the format of the error response when the redirect URI is not usable.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since
        "400 Bad Request" is not required by OAuth 2.0.

        **LOCATION**

        When the value of `action` is `LOCATION`, it means that the request from the client application
        is invalid but the redirect URI
        to which the error should be reported has been determined.

        A response with HTTP status of "302 Found" must be returned to the client application with `Location`
        header which has a redirect URI with error parameter.

        The value of `responseContent` is a redirect URI with `error` parameter, so it can be used as the
        value of `Location` header.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 302 Found
        Location: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORM**

        When the value of `action` is `FORM`, it means that the request from the client application is
        invalid but the redirect URI to which the error should be reported has been determined, and that
        the authorization request contains `response_mode=form_post` as is defined in [OAuth 2.0 Form Post
        Response Mode](https://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html).

        The HTTP status of the response returned to the client application should be "200 OK" and the
        content type should be `text/html;charset=UTF-8`.

        The value of `responseContent` is an HTML which can be used as the entity body of the response.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 200 OK
        Content-Type: text/html;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **NO_INTERACTION**

        When the value of `action` is `NO_INTERACTION`, it means that the request from the client application
        has no problem and requires the service to process the request without displaying any user interface
        pages for authentication or consent. This case happens when the authorization request contains
        `prompt=none`.

        The service must follow the steps described below.

        [1] END-USER AUTHENTICATION

        Check whether an end-user has already logged in. If an end-user has logged in, go to the next step ([MAX_AGE]).
        Otherwise, call Authlete's `/auth/authorization/fail` API with `reason=NOT_LOGGED_IN` and use the response from
        the API to generate a response to the client application.

        [2] MAX AGE

        Get the value of `maxAge` parameter from the `/auth/authorization` API response. The value represents
        the maximum authentication age which has come from `max_age` request parameter or `defaultMaxAge`
        configuration parameter of the client application. If the value is `0`, go to the next step ([SUBJECT]).
        Otherwise, follow the sub steps described below.

        (i) Get the time at which the end-user was authenticated. that this value is not managed by Authlete,
        meaning that it is expected that the service implementation manages the value. If the service implementation
        does not manage authentication time of end-users, call Authlete's `/auth/authorization/fail` API
        with `reason=MAX_AGE_NOT_SUPPORTED` and use the API response to generate a response to the client
        application.

        (ii) Add the value of the maximum authentication age (which is represented in seconds) to the authentication
        time. The calculated value is the expiration time.

        (iii) Check whether the calculated value is equal to or greater than the current time. If this condition
        is satisfied, go to the next step ([SUBJECT]). Otherwise, call Authlete's `/auth/authorization/fail`
        API with `reason=EXCEEDS_MAX_AGE` and use the API response to generate a response to the client
        application.

        [3] SUBJECT

        Get the value of `subject` from the `/auth/authorization` API response. The value represents an
        end-user who the client application expects to grant authorization. If the value is `null`, go to
        the next step ([ACRs]). Otherwise, follow the sub steps described below.

        (i) Compare the value of the requested subject to the current end-user.

        (ii) If they are equal, go to the next step ([ACRs]). If they are not equal, call Authlete's
        `/auth/authorization/fail` API with `reason=DIFFERENT_SUBJECT` and use the response from the API
        to generate a response to the client application.

        [4] ACRs

        Get the value of `acrs` from the `/auth/authorization` API response. The value represents a list
        of ACRs (Authentication Context Class References) and comes from (1) acr claim in `claims` request
        parameter, (2) `acr_values` request parameter, or (3) `default_acr_values` configuration parameter
        of the client application.

        It is ensured that all the ACRs in acrs are supported by the authorization server implementation.
        In other words, it is ensured that all the ACRs are listed in `acr_values_supported` configuration
        parameter of the authorization server.

        If the value of ACRs is `null`, go to the next step ([ISSUE]). Otherwise, follow the sub steps
        described below.

        (i) Get the ACR performed for the authentication of the current end-user. Note that this value is
        managed not by Authlete but by the authorization server implementation. (If the authorization server
        implementation cannot handle ACRs, it should not have listed ACRs as `acr_values_supported`.)

        (ii) Compare the ACR value obtained in the above step to each element in the ACR array (`acrs`)
        in the listed order.

        (iii) If the ACR value was found in the array, (= the ACR performed for the authentication of the
        current end-user did not match any one of the ACRs requested by the client application), check
        whether one of the requested ACRs must be satisfied or not using `acrEssential` parameter in the
        `/auth/authorization` API response. If the value of `acrEssential` parameter is `true`, call Authlete's
        `/auth/authorization/fail` API with `reason=ACR_NOT_SATISFIED` and use the response from the API
        to generate a response to the client application. Otherwise, go to the next step ([SCOPES]).

        [5] SCOPES

        Get the value of `scopes` from the `/auth/authorization` API response. If the array contains a
        scope which has not been granted to the client application by the end-user in the past, call
        Authlete's `/auth/authorization/fail` API with `reason=CONSENT_REQUIRED` and use the response from
        the API to generate a response to the client application. Otherwise, go to the next step ([RESOURCES]).

        Note that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`
        APIs), which is only available in a dedicated/onpremise Authlete server (contact sales@authlete.com
        for details).

        [6] DYNAMIC SCOPES

        Get the value of `dynamicScopes` from the `/auth/authorization` API response. If the array contains
        a scope which has not been granted to the client application by the end-user in the past, call
        Authlete's `/auth/authorization/fail` API with `reason=CONSENT_REQUIRED` and use the response from
        the API to generate a response to the client application. Otherwise, go to the next step ([RESOURCES]).

        Note that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`
        APIs) but dynamic scopes are not remembered as granted scopes.

        [7] RESOURCES

        Get the value of `resources` from the `/auth/authorization` API response. The array represents
        the values of the `resource` request parameters. If you want to reject the request, call Authlete's
        `/auth/authorization/fail` API with `reason=INVALID_TARGET` and use the response from the API to
        generate a response to the client application. Otherwise, go to the next step ([ISSUE]).

        See "Resource Indicators for OAuth 2.0" for details.

        [8] ISSUE

        If all the above steps succeeded, the last step is to issue an authorization code, an ID token
        and/or an access token. (There is a special case, though. In the case of `response_type=none`,
        nothing is issued.) It can be performed by calling Authlete's `/auth/authorization/issue` API.
        The API requires the following parameters. Prepare these parameters and call `/auth/authorization/issue`
        API and use the response to generate a response to the client application.

        - <u>`ticket` (required)</u><br>
          This parameter represents a ticket which is exchanged with tokens at `/auth/authorization/issue`.
          Use the value of `ticket` contained in the `/auth/authorization` API response.

        - <u>`subject` (required)</u><br>
          This parameter represents the unique identifier of the current end-user. It is often called "user ID"
          and it may or may not be visible to the user. In any case, it is a number or a string assigned
          to an end-user by the authorization server implementation. Authlete does not care about the format
          of the value of subject, but it must consist of only ASCII letters and its length must not exceed 100.

          When the value of `subject` parameter in the /auth/authorization API response is not `null`,
          it is necessarily identical to the value of `subject` parameter in the `/auth/authorization/issue`
          API request.

          The value of this parameter will be embedded in an ID token as the value of `sub` claim. When
          the value of `subject_type` configuration parameter of the client application is `PAIRWISE`,
          the value of sub claim is different from the value specified by this parameter, See [8. Subject
          Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes) of OpenID
          Connect Core 1.0 for details about subject types.

          You can use the `sub` request parameter to adjust the value of the `sub` claim in an ID token.
          See the description of the `sub` request parameter for details.

        - <u>`authTime` (optional)</u><br>
          This parameter represents the time when the end-user authentication occurred. Its value is the
          number of seconds from `1970-01-01`. The value of this parameter will be embedded in an ID token
          as the value of `auth_time` claim.

        - <u>`acr` (optional)</u><br>
          This parameter represents the ACR (Authentication Context Class Reference) which the authentication
          of the end-user satisfies. When `acrs` in the `/auth/authorization` API response is a non-empty
          array and the value of `acrEssential` is `true`, the value of this parameter must be one of the
          array elements. Otherwise, even `null` is allowed. The value of this parameter will be embedded
          in an ID token as the value of `acr` claim.

        - <u>`claims` (optional)</u><br>
          This parameter represents claims of the end-user. "Claims" here are pieces of information about
          the end-user such as `"name"`, `"email"` and `"birthdate"`. The authorization server implementation
          is required to gather claims of the end-user, format the claim values into JSON and set the JSON
          string as the value of this parameter.

          The claims which the authorization server implementation is required to gather are listed in
          `claims` parameter in the `/auth/authorization` API response.

          For example, if claims parameter lists `"name"`, `"email"` and `"birthdate"`, the value of this
          parameter should look like the following.

          ```json
          {
            "name": "John Smith",
            "email": "john@example.com",
            "birthdate": "1974-05-06"
          }
          ```

          `claimsLocales` parameter in the `/auth/authorization` API response lists the end-user's preferred
          languages and scripts, ordered by preference. When `claimsLocales` parameter is a non-empty array,
          its elements should be taken into account when the authorization server implementation gathers
          claim values. Especially, note the excerpt below from [5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)
          of OpenID Connect Core 1.0.

          > When the OP determines, either through the `claims_locales` parameter, or by other means, that
          the End-User and Client are requesting Claims in only one set of languages and scripts, it is
          RECOMMENDED that OPs return Claims without language tags when they employ this language and script.
          It is also RECOMMENDED that Clients be written in a manner that they can handle and utilize Claims
          using language tags.

          If `claims` parameter in the `/auth/authorization` API response is `null` or an empty array,
          the value of this parameter should be `null`.

          See [5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)
          of OpenID Connect core 1.0 for claim names and their value formats. Note (1) that the authorization
          server implementation support its special claims ([5.1.2. Additional Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims))
          and (2) that claim names may be followed by a language tag ([5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)).
          Read the specification of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html)
          for details.

          The claim values in this parameter will be embedded in an ID token.

          Note that `idTokenClaims` parameter is available in the `/auth/authorization` API response.
          The parameter has the value of the `"id_token"` property in the `claims` request parameter or
          in the `"claims"` property in a request object. The value of this parameter should be considered
          when you prepare claim values.

        - <u>`properties` (optional)</u><br>
          Extra properties to associate with an access token and/or an authorization code that may be issued
          by this request. Note that `properties` parameter is accepted only when `Content-Type` of the
          request is `application/json`, so don't use `application/x-www-form-urlencoded` for details.

        - <u>`scopes` (optional)</u><br>
          Scopes to associate with an access token and/or an authorization code. If this parameter is `null`,
          the scopes specified in the original authorization request from the client application are used.
          In other cases, including the case of an empty array, the specified scopes will replace the original
          scopes contained in the original authorization request.

          Even scopes that are not included in the original authorization request can be specified. However,
          as an exception, `openid` scope is ignored on the server side if it is not included in the original
          request. It is because the existence of `openid` scope considerably changes the validation steps
          and because adding `openid` triggers generation of an ID token (although the client application
          has not requested it) and the behavior is a major violation against the specification.

          If you add `offline_access` scope although it is not included in the original request, keep in
          mind that the specification requires explicit consent from the user for the scope ([OpenID Connect
          Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess)).
          When `offline_access` is included in the original request, the current implementation of Authlete's
          `/auth/authorization` API checks whether the request has come along with `prompt` request parameter
          and the value includes consent. However, note that the implementation of Authlete's `/auth/authorization/issue`
          API does not perform such checking if `offline_access` scope is added via this `scopes` parameter.

        - <u>`sub` (optional)</u><br>
          The value of the `sub` claim in an ID token. If the value of this request parameter is not empty,
          it is used as the value of the `sub` claim. Otherwise, the value of the `subject` request parameter
          is used as the value of the `sub` claim. The main purpose of this parameter is to hide the actual
          value of the subject from client applications.

          Note that even if this `sub` parameter is not empty, the value of the subject request parameter
          is used as the value of the subject which is associated with the access token.

        **INTERACTION**

        When the value of `action` is `INTERACTION`, it means that the request from the client application
        has no problem and requires the service to process the request with user interaction by an HTML form.
        The purpose of the UI displayed to the end-user is to ask the end-user to grant authorization to
        the client application. The items described below are some points which the service implementation
        should take into account when it builds the UI.

        [1] DISPLAY MODE

        The response from `/auth/authorization` API has `display` parameter. It is one of `PAGE` (default),
        `POPUP`, `TOUCH` and `WAP` The meanings of the values are described in [3.1.2.1. Authentication
        Request of OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
        Basically, the authorization server implementation should display the UI which is suitable for the
        display mode, but it is okay for the authorization server implementation to "attempt to detect the
        capabilities of the User Agent and present an appropriate display".

        It is ensured that the value of `display` is one of the supported display modes which are specified
        by `supportedDisplays` configuration parameter of the service.

        [2] UI LOCALE

        The response from `/auth/authorization` API has `uiLocales` parameter. It it is not `null`, it lists
        language tag values (such as `fr-CA`, `ja-JP` and `en`) ordered by preference. The service implementation
        should display the UI in one of the language listed in the parameter when possible. It is ensured
        that language tags listed in `uiLocales` are contained in the list of supported UI locales which
        are specified by `supportedUiLocales` configuration parameter of the service.

        [3] CLIENT INFORMATION

        The authorization server implementation should show information about the client application to
        the end-user. The information is embedded in `client` parameter in the response from `/auth/authorization`
        API.

        [4] SCOPES

        A client application requires authorization for specific permissions. In OAuth 2.0 specification,
        "scope" is a technical term which represents a permission. `scopes` parameter in the response
        from `/auth/authorization` API is a list of scopes requested by the client application. The service
        implementation should show the end-user the scopes.

        The authorization server implementation may choose not to show scopes to which the end-user has
        given consent in the past. To put it the other way around, the authorization server implementation
        may show only the scopes to which the end-user has not given consent yet. However, if the value
        of `prompts` response parameter contains `CONSENT`, the authorization server implementation has
        to obtain explicit consent from the end-user even if the end-user has given consent to all the
        requested scopes in the past.

        Note that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`
        APIs), but the APIs work only in the case the Authlete server you use is a dedicated Authlete server
        (contact sales@authlete.com for details). In other words, the APIs of the shared Authlete server
        are disabled intentionally (in order to prevent garbage data from being accumulated) and they
        return 403 Forbidden.

        It is ensured that the values in `scopes` parameter are contained in the list of supported scopes
        which are specified by `supportedScopes` configuration parameter of the service.

        [5] DYNAMIC SCOPES

        The authorization request may include dynamic scopes. The list of recognized dynamic scopes are
        accessible by getDynamicScopes() method. See the description of the [DynamicScope](https://authlete.github.io/authlete-java-common/com/authlete/common/dto/DynamicScope.html)
        class for details about dynamic scopes.

        [6] AUTHORIZATION DETAILS

        The authorization server implementation should show the end-user "authorization details" if the
        request includes it. The value of `authorization_details` parameter in the response is the content
        of the `authorization_details` request parameter.

        See "OAuth 2.0 Rich Authorization Requests" for details.

        [7] PURPOSE

        The authorization server implementation must show the value of the `purpose` request parameter if
        it supports [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
        See [8. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.8)
        in the specification for details.

        Note that the value of `purpose` response parameter is the value of the purpose request parameter.

        [7] END-USER AUTHENTICATION

        Necessarily, the end-user must be authenticated (= must login the service) before granting authorization
        to the client application. Simply put, a login form is expected to be displayed for end-user authentication.
        The service implementation must follow the steps described below to comply with OpenID Connect.
        (Or just always show a login form if it's too much of a bother.)

        (i) Get the value of `prompts` response parameter. It corresponds to the value of the `prompt`
        request parameter. Details of the request parameter are described in [3.1.2.1. Authentication
        Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest) of OpenID Connect Core 1.0.

        (ii) If the value of `prompts` parameter is `SELECT_ACCOUNT` display a form to let the end-user
        select on of his/her accounts for login. If `subject` response parameter is not `null`, it is the
        end-user ID that the client application expects, so the value should be used to determine the value
        of the login ID. Note that a subject and a login ID are not necessarily equal. If the value of
        `subject` response parameter is `null`, the value of `loginHint` response parameter should be referred
        to as a hint to determine the value of the login ID. The value of `loginHint` response parameter
        is simply the value of the `login_hint` request parameter.

        (iii) If the value of `prompts` response parameter contains `LOGIN`, display a form to urge the
        end-user to login even if the end-user has already logged in. If the value of `subject` response
        parameter is not `null`, it is the end-user ID that the client application expects, so the value
        should be used to determine the value of the login ID. Note that a subject and a login ID are not
        necessarily equal. If the value of `subject` response parameter is `null`, the value of `loginHint`
        response parameter should be referred to as a hint to determine the value of the login ID. The value
        of `loginHint` response parameter is simply the value of the `login_hint` request parameter.

        (iv) If the value of `prompts` response parameter does not contain `LOGIN`, the authorization server
        implementation does not have to authenticate the end-user if all the conditions described below
        are satisfied. If any one of the conditions is not satisfied, show a login form to authenticate
        the end-user.

        - An end-user has already logged in the service.

        - The login ID of the current end-user matches the value of `subject` response parameter.
        This check is required only when the value of `subject` response parameter is a non-null value.

        - The max age, which is the number of seconds contained in `maxAge` response parameter,
        has not passed since the current end-user logged in your service. This check is required only when
        the value of `maxAge` response parameter is a non-zero value.

        - If the authorization server implementation does not manage authentication time of end-users
        (= if the authorization server implementation cannot know when end-users logged in) and if the
        value of `maxAge` response parameter is a non-zero value, a login form should be displayed.

        - The ACR (Authentication Context Class Reference) of the authentication performed for
        the current end-user satisfies one of the ACRs listed in `acrs` response parameter. This check is
        required only when the value of `acrs` response parameter is a non-empty array.

        In every case, the end-user authentication must satisfy one of the ACRs listed in `acrs` response
        parameter when the value of `acrs` response parameter is a non-empty array and `acrEssential`
        response parameter is `true`.

        [9] GRANT/DENY BUTTONS

        The end-user is supposed to choose either (1) to grant authorization to the client application or
        (2) to deny the authorization request. The UI must have UI components to accept the judgment by
        the user. Usually, a button to grant authorization and a button to deny the request are provided.

        When the value of `subject` response parameter is not `null`, the end-user authentication must be
        performed for the subject, meaning that the authorization server implementation should repeatedly
        show a login form until the subject is successfully authenticated.

        The end-user will choose either (1) to grant authorization to the client application or (2) to
        deny the authorization request. When the end-user chose to deny the authorization request, call
        Authlete's `/auth/authorization/fail` API with `reason=DENIED` and use the response from the API
        to generate a response to the client application.

        When the end-user chose to grant authorization to the client application, the authorization server
        implementation has to issue an authorization code, an ID token, and/or an access token to the client
        application. (There is a special case. When `response_type=none`, nothing is issued.) Issuing the
        tokens can be performed by calling Authlete's `/auth/authorization/issue` API. Read [ISSUE] written
        above in the description for the case of `action=NO_INTERACTION`.
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  description: |
                    OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
                    the authorization server implementation received from the client application.

                    The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
                    or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
                    the client application is `POST`.
            example:
              parameters: response_type=code&client_id=26478243745571&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&scope=timeline.read+history.read&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - LOCATION
                      - FORM
                      - NO_INTERACTION
                      - INTERACTION
                    description: The next action that the authorization server implementation should take.
                  client:
                    type: object
                    properties:
                      number:
                        type: integer
                        format: int32
                        readOnly: true
                        description: |
                          The sequential number of the client. The value of this property is assigned by Authlete.
                      clientName:
                        type: string
                        description: |
                          The name of the client application. This property corresponds to `client_name` in
                          [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                      clientNames:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaggedValue'
                        description: |
                          Client names with language tags. If the client application has different names for different
                          languages, this property can be used to register the names.
                      description:
                        type: string
                        description: The description about the client application.
                      descriptions:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaggedValue'
                        description: |
                          Descriptions about the client application with language tags. If the client application has different
                          descriptions for different languages, this property can be used to register the descriptions.
                      clientId:
                        type: integer
                        format: int64
                        readOnly: true
                        description: The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
                      clientIdAlias:
                        type: string
                        description: |
                          The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
                          default, this is a string version of the `clientId` property.
                      clientIdAliasEnabled:
                        type: boolean
                        description: Deprecated. Always set to `true`.
                      clientType:
                        $ref: '#/components/schemas/Client/properties/clientType'
                      logoUri:
                        type: string
                        description: |
                          The URL pointing to the logo image of the client application.

                          This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
                          Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                      logoUris:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaggedValue'
                        description: |
                          Logo image URLs with language tags. If the client application has different logo images for
                          different languages, this property can be used to register URLs of the images.
                      tosUri:
                        type: string
                        description: |
                          The URL pointing to the "Terms Of Service" page.

                          This property corresponds to `tos_uri` in
                          [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                      tosUris:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaggedValue'
                        description: |
                          URLs of "Terms Of Service" pages with language tags.

                          If the client application has different "Terms Of Service" pages for different languages,
                          this property can be used to register the URLs.
                      policyUri:
                        type: string
                        description: |
                          The URL pointing to the page which describes the policy as to how end-user's profile data is used.

                          This property corresponds to `policy_uri` in
                          [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                      policyUris:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaggedValue'
                        description: |
                          URLs of policy pages with language tags.
                          If the client application has different policy pages for different languages, this property can be used to register the URLs.
                  display:
                    $ref: '#/components/schemas/Display'
                  maxAge:
                    type: integer
                    format: int32
                    description: |
                      The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
                      of the client application when the authorization request does not contain `max_age` request parameter.

                      See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
                      for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
                      for `defaultMaxAge` configuration parameter.
                  service:
                    $ref: '#/components/schemas/Service'
                  scopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scope'
                    description: |
                      The scopes that the client application requests. This value comes from `scope` request parameter.
                      If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
                      If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
                      the value of this parameter is `null`.

                      It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
                      by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
                      an error and are just ignored.

                      OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.

                      | Name | Description |
                      | --- | --- |
                      | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
                      | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
                      | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
                      | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br> The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
                      | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
                      | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). <blockquote>This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).</blockquote>  |

                      Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
                      when scope request parameter contains `offline_access`. This behavior is a requirement written in
                      [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
                  uiLocales:
                    type: array
                    items:
                      type: string
                    description: |
                      The locales that the client application presented as candidates to be used for UI.
                      This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
                      defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
                      See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.

                      It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
                      by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
                      cause an error and are just ignored.
                  claimsLocales:
                    type: array
                    items:
                      type: string
                    description: |
                      End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
                      The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
                      See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.

                      It is ensured that locales listed by this parameters are contained in the list of supported claim locales
                      which are specified by `supportedClaimsLocales` configuration parameter of the service.
                      Unsupported claim locales in the authorization request do not cause an error and are just ignored.
                  claims:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of claims that the client application requests to be embedded in the ID token.
                      The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
                      which are expanded to claims.

                      See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
                      for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
                      for the special scopes.
                  acrEssential:
                    type: boolean
                    description: |
                      This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
                      This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
                      the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
                      `false` if the value is the original numeric client ID.
                  acrs:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
                      This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.

                      See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
                      request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
                      default_acr_values" for `defaultAcrs` configuration parameter.
                  subject:
                    type: string
                    description: |
                      The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
                      The value comes from `sub` claim in `claims` request parameter.
                  loginHint:
                    type: string
                    description: A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
                  prompts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Prompt'
                    description: 'The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.'
                  lowestPrompt:
                    $ref: '#/components/schemas/Prompt'
                  requestObjectPayload:
                    type: string
                    description: |
                      The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
                  idTokenClaims:
                    type: string
                    description: |
                      The value of the `id_token` property in the claims request parameter or in the claims property in a request object.

                      A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                      There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                      In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                      Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                      The following is an excerpt from the specification.
                      You can find `userinfo` and `id_token` are top-level properties.

                      ```json
                      {
                        "userinfo":
                        {
                          "given_name": { "essential": true },
                          "nickname": null,
                          "email": { "essential": true },
                          "email_verified": { "essential": true },
                          "picture": null,
                          "http://example.info/claims/groups": null
                        },
                        "id_token":
                        {
                          "auth_time": { "essential": true },
                          "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                        }
                      }
                      ```

                      This value of this property is the value of the `id_token` property in JSON format.
                      For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                      ```json
                      {
                        "auth_time": { "essential": true },
                        "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                      }
                      ```

                      Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                      this property holds the former value.
                  userInfoClaims:
                    type: string
                    description: |
                      The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.

                      A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                      There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                      In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                      Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                      The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.

                      ```json
                      {
                        "userinfo":
                        {
                          "given_name": { "essential": true },
                          "nickname": null,
                          "email": { "essential": true },
                          "email_verified": { "essential": true },
                          "picture": null,
                          "http://example.info/claims/groups": null
                        },
                        "id_token":
                        {
                          "auth_time": { "essential": true },
                          "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                        }
                      }
                      ````

                      The value of this property is the value of the `userinfo` property in JSON format.
                      For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                      ```json
                      {
                        "given_name": { "essential": true },
                        "nickname": null,
                        "email": { "essential": true },
                        "email_verified": { "essential": true },
                        "picture": null,
                        "http://example.info/claims/groups": null
                      }
                      ```

                      Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                      the value of this property holds the former value.
                  resources:
                    type: array
                    items:
                      type: string
                    description: |
                      The resources specified by the `resource` request parameters or by the `resource` property in the request object.
                      If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  purpose:
                    type: string
                    description: |
                      The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
                      of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:

                      > purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
                      If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
                  ticket:
                    type: string
                    description: |
                      A ticket issued by Authlete to the service implementation. This is needed when the service
                      implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
                      API.
                  dynamicScopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/DynamicScope'
                    description: |
                      The dynamic scopes which the client application requested by the scope request parameter.
                  gmAction:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1gm/post/requestBody/content/application~1json/schema/properties/gmAction'
                  grantId:
                    type: string
                    description: |
                      the value of the `grant_id` request parameter of the device authorization request.

                      The `grant_id` request parameter is defined in
                      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                      , which is supported by Authlete 2.3 and newer versions.
                  grant:
                    type: object
                    properties:
                      scopes:
                        type: array
                        items:
                          type: object
                          properties:
                            scope:
                              type: string
                              description: |
                                Space-delimited scopes.
                            resource:
                              type: array
                              items:
                                type: string
                              description: |
                                List of resource indicators.
                      claims:
                        type: array
                        items:
                          type: string
                        description: |
                          The claims associated with the Grant.
                      authorizationDetails:
                        $ref: '#/components/schemas/AuthorizationDetails'
                  grantSubject:
                    type: string
                    description: |
                      The subject identifying the user who has given the grant identified
                      by the `grant_id` request parameter of the device authorization
                      request.

                      Authlete 2.3 and newer versions support <a href=
                      "https://openid.net/specs/fapi-grant-management.html">Grant Management
                      for OAuth 2.0</a>. An authorization request may contain a `grant_id`
                      request parameter which is defined in the specification. If the value of
                      the request parameter is valid, {@link #getGrantSubject()} will return
                      the subject of the user who has given the grant to the client application.
                      Authorization server implementations may use the value returned from
                      {@link #getGrantSubject()} in order to determine the user to authenticate.

                      The user your system will authenticate during the authorization process
                      (or has already authenticated) may be different from the user of the
                      grant. The first implementer's draft of "Grant Management for OAuth 2.0"
                      does not mention anything about the case, so the behavior in the case is
                      left to implementations. Authlete will not perform the grant management
                      action when the `subject` passed to Authlete does not match the
                      user of the grant.
                  requestedClaimsForTx:
                    type: array
                    items:
                      type: string
                    description: |
                      Get names of claims that are requested indirectly by <i>"transformed
                      claims"</i>.

                      <p>
                      A client application can request <i>"transformed claims"</i> by adding
                      names of transformed claims in the `claims` request parameter.
                      The following is an example of the `claims` request parameter
                      that requests a predefined transformed claim named `18_or_over`
                      and a transformed claim named `nationality_usa` to be embedded
                      in the response from the userinfo endpoint.
                      </p>

                      ```json
                      {
                        "transformed_claims": {
                          "nationality_usa": {
                            "claim": "nationalities",
                            "fn": [
                              [ "eq", "USA" ],
                              "any"
                            ]
                          }
                        },
                        "userinfo": {
                          "::18_or_over": null,
                          ":nationality_usa": null
                        }
                      }
                      ```

                      The example above assumes that a transformed claim named `18_or_over`
                      is predefined by the authorization server like below.

                      ```json
                      {
                        "18_or_over": {
                          "claim": "birthdate",
                          "fn": [
                            "years_ago",
                            [ "gte", 18 ]
                          ]
                        }
                      }
                      ```

                      In the example, the `nationalities` claim is requested indirectly
                      by the `nationality_usa` transformed claim. Likewise, the
                      `birthdate` claim is requested indirectly by the `18_or_over`
                      transformed claim.

                      When the `claims` request parameter of an authorization request is
                      like the example above, this `requestedClaimsForTx` property will
                      hold the following value.

                      ```json
                      [ "birthdate", "nationalities" ]
                      ```

                      It is expected that the authorization server implementation prepares values
                      of the listed claims and passes them as the value of the `claimsForTx`
                      request parameter when it calls the `/api/auth/userinfo/issue` API. The following
                      is an example of the value of the `claimsForTx` request parameter.

                      ```json
                      {
                        "birthdate": "1970-01-23",
                        "nationalities": [ "DEU", "USA" ]
                      }
                      ```
                  requestedVerifiedClaimsForTx:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                    description: |
                      Names of verified claims that will be referenced when transformed claims are computed.
                  transformedClaims:
                    type: string
                    description: |
                      the value of the `transformed_claims` property in the `claims` request
                      parameter of an authorization request or in the `claims` property in a
                      request object.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
                  claimsAtUserInfo:
                    type: array
                    items:
                      type: string
                    description: |
                      Get the list of claims that the client application requests to be
                      embedded in userinfo responses. The value comes from the `"scope"`
                      and `"claims"` request parameters of the original authorization
                      request.
                  credentialOfferInfo:
                    $ref: '#/components/schemas/CredentialOfferInfo'
                  issuableCredentials:
                    type: string
                    description: |
                      Get the information about the <b>issuable credentials</b> that can
                      be obtained by presenting the access token that will be issued as a
                      result of the authorization request.
              example:
                resultCode: A004001
                resultMessage: '[A004001] Authlete has successfully issued a ticket to the service (API Key = 21653835348762) for the authorization request from the client (ID = 26478243745571). [response_type=code, openid=false]'
                acrEssential: false
                action: INTERACTION
                client:
                  clientId: 26478243745571
                  clientIdAlias: my-client
                  clientIdAliasEnabled: true
                  clientName: My updated client
                  logo_uri: 'https://my-client.example.com/logo.png'
                  number: 6164
                clientIdAliasUsed: false
                display: PAGE
                maxAge: 0
                scopes:
                  - defaultEntry: false
                    description: A permission to read your history.
                    name: history.read
                  - defaultEntry: false
                    description: A permission to read your timeline.
                    name: timeline.read
                service:
                  apiKey: 21653835348762
                  clientIdAliasEnabled: true
                  number: 5041
                  serviceName: My updated service
                ticket: hXoY87t_t23enrVHWxpXNP5FfVDhDypD3T6H6lt4IPA
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_authorization_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/authorization \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "parameters": "response_type=code&client_id=26478243745571&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&scope=timeline.read+history.read&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            AuthorizationRequest req = new AuthorizationRequest();
            req.setParameters(...);

            api.authorization(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = AuthorizationRequest()
            req.parameters = ...

            api.authorization(req)
      tags:
        - Authorization Endpoint
  '/api/{serviceId}/auth/authorization/fail':
    post:
      summary: Fail Authorization Request
      x-badges:
        - color: red
          label: Core API
      description: |
        This API generates a content of an error authorization response that the authorization server implementation
        returns to the client application.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the authorization endpoint of the service
        in order to generate an error response to the client application.

        The description of the `/auth/authorization` API describes the timing when this API should be called.

        The response from `/auth/authorization/fail` API has some parameters.
        Among them, it is `action` parameter that the authorization server implementation should check first because
        it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since
        "500 Internal Server Error" is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
        or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
        response to the authorization UI.

        A response with HTTP status of "400 Bad Request" should be returned to the client application and
        Authlete recommends `application/json` as the content type.

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since
        "400 Bad Request" is not required by OAuth 2.0.

        **LOCATION**

        When the value of `action` is `LOCATION`, it means that the response to the client application must
        be "302 Found" with Location header.

        The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
        and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
        value of `Location` header.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 302 Found
        Location: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORM**

        When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
        with an HTML which triggers redirection by JavaScript.
        This happens when the authorization request from the client application contained `response_mode=form_post`.

        The value of `responseContent` is an HTML which can be used as the entity body of the response.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 200 OK
        Content-Type: text/html;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - reason
              properties:
                ticket:
                  type: string
                  description: |
                    The ticket issued from Authlete `/auth/authorization` API.
                reason:
                  type: string
                  enum:
                    - UNKNOWN
                    - NOT_LOGGED_IN
                    - MAX_AGE_NOT_SUPPORTED
                    - EXCEEDS_MAX_AGE
                    - DIFFERENT_SUBJECT
                    - ACR_NOT_SATISFIED
                    - DENIED
                    - SERVER_ERROR
                    - NOT_AUTHENTICATED
                    - ACCOUNT_SELECTION_REQUIRED
                    - CONSENT_REQUIRED
                    - INTERACTION_REQUIRED
                    - INVALID_TARGET
                  description: |
                    The reason of the failure of the authorization request.
                    For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
                description:
                  type: string
                  description: |
                    The custom description about the authorization failure.
            example:
              ticket: qA7wGybwArICpbUSutrf5Xc9-i1fHE0ySOHxR1eBoBQ
              reason: NOT_AUTHENTICATED
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization~1fail/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - LOCATION
                      - FORM
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
              example:
                resultCode: A004201
                resultMessage: '[A004201] The authorization request from the service does not contain ''parameters'' parameter.'
                action: BAD_REQUEST
                responseContent: '{\"error_description\":\"[A004201] The authorization request from the service does not contain ''parameters'' parameter.\",\"error\":\"invalid_request\",\"error_uri\":\"https://docs.authlete.com/#A004201\"}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_authorization_fail_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/authorization/fail \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "ticket": "c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q", "reason": "NOT_AUTHENTICATED" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            AuthorizationFailRequest req = new AuthorizationFailRequest();
            req.setTicket("c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q");
            req.setReason(AuthorizationFailRequest.Reason.NOT_AUTHENTICATED);

            api.authorizationFail(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = AuthorizationFailRequest()
            req.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q'
            req.reason = AuthorizationFailReason.NOT_AUTHENTICATED

            api.authorizationFail(req)
      tags:
        - Authorization Endpoint
  '/api/{serviceId}/auth/authorization/issue':
    post:
      summary: Issue Authorization Response
      x-badges:
        - color: red
          label: Core API
      description: |
        This API parses request parameters of an authorization request and returns necessary data for the
        authorization server implementation to process the authorization request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the authorization endpoint of
        the service in order to generate a successful response to the client application.

        The description of the `/auth/authorization` API describes the timing when this API should be called
        and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.

        The response from `/auth/authorization/issue` API has some parameters.
        Among them, it is `action` parameter that the authorization server implementation should check first
        because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps
        described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error".

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since
        "500 Internal Server Error" is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
        or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
        response to the authorization UI.

        The HTTP status of the response returned to the client application should be "400 Bad Request"
        and the content type should be `application/json` although OAuth 2.0 specification does not mention
        the format of the error response.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since
        "400 Bad Request" is not required by OAuth 2.0.

        **LOCATION**

        When the value of `action` is `LOCATION`, it means that the response to the client application
        should be "302 Found" with `Location` header.

        The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
        token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
        the value of `Location` header.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 302 Found
        Location: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORM**

        When the value of `action` is `FORM`, it means that the response to the client application should
        be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
        request from the client contains `response_mode=form_post` request parameter.

        The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
        so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 200 OK
        Content-Type: text/html;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - subject
              properties:
                ticket:
                  type: string
                  description: |
                    The ticket issued from Authlete `/auth/authorization` API.
                subject:
                  type: string
                  description: |
                    The subject (= a user account managed by the service) who has granted authorization to the client application.
                authTime:
                  type: integer
                  format: int64
                  description: |
                    The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
                acr:
                  type: string
                  description: The Authentication Context Class Reference performed for the end-user authentication.
                claims:
                  type: string
                  description: |
                    The claims of the end-user (= pieces of information about the end-user) in JSON format.
                    See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Property'
                  description: Extra properties to associate with an access token and/or an authorization code.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    Scopes to associate with an access token and/or an authorization code.
                    If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
                sub:
                  type: string
                  description: |
                    The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
                    the value of the `subject` request parameter is used as the value of the `sub` claim.
                idtHeaderParams:
                  type: string
                  description: |
                    JSON that represents additional JWS header parameters for ID tokens that may be issued based on
                    the authorization request.
                claimsForTx:
                  type: string
                  description: |
                    Claim key-value pairs that are used to compute transformed claims.
                consentedClaims:
                  type: array
                  items:
                    type: string
                  description: |
                    the claims that the user has consented for the client application
                    to know.
                authorizationDetails:
                  $ref: '#/components/schemas/AuthorizationDetails'
                jwtAtClaims:
                  type: string
                  description: |
                    Additional claims that are added to the payload part of the JWT access token.
                accessToken:
                  type: string
                  description: |
                    The representation of an access token that may be issued as a result of the Authlete API call.
            example:
              ticket: FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc
              subject: john
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization~1issue/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - LOCATION
                      - FORM
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
                  accessToken:
                    type: string
                    description: |
                      The newly issued access token. Note that an access token is issued from an authorization endpoint only
                      when `response_type` contains token.
                  accessTokenExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      The datetime at which the newly issued access token will expire. The value is represented in milliseconds
                      since the Unix epoch (1970-01-01).
                  accessTokenDuration:
                    type: integer
                    format: int64
                    description: |
                      The duration of the newly issued access token in seconds.
                  idToken:
                    type: string
                    description: |
                      The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
                      when `response_type` contains `id_token`.
                  authorizationCode:
                    type: string
                    description: |
                      The newly issued authorization code. Note that an authorization code is issued only
                      when `response_type` contains code.
                  jwtAccessToken:
                    type: string
                    description: |
                      The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
                      this property is always set to `null`.
                  ticketInfo:
                    type: string
                    description: |
                      The information about the ticket.
              example:
                resultCode: A040001
                resultMessage: '[A040001] The authorization request was processed successfully.'
                accessTokenDuration: 0
                accessTokenExpiresAt: 0
                action: LOCATION
                authorizationCode: Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo
                responseContent: 'https://my-client.example.com/cb1?code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&iss=https%3A%2F%2Fmy-service.example.com'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_authorization_issue_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/authorization/issue \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "ticket": "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc", "subject": "john" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            AuthorizationIssueRequest req = new AuthorizationIssueRequest();
            req.setTicket("FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc");
            req.setSubject("john");

            api.authorizationIssue(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = AuthorizationIssueRequest()
            req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'
            req.subject = 'john'

            api.authorizationIssue(req)
      tags:
        - Authorization Endpoint
  '/api/{serviceId}/pushed_auth_req':
    post:
      summary: Process Pushed Authorization Request
      description: |
        This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  description: |
                    The pushed authorization request body received from the client application.

                    The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
                    the client application.
                clientId:
                  type: string
                  description: |
                    The client ID extracted from `Authorization` header of the pushed request from the client application.
                clientSecret:
                  type: string
                  description: |
                    The client secret extracted from `Authorization` header of the pushed authorization request from the client application.
                clientCertificate:
                  type: string
                  description: The client certificate from the MTLS connection to pushed authorization endpoint from the client application.
                clientCertificatePath:
                  type: string
                  description: |
                    The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
                dpop:
                  type: string
                  description: |
                    DPoP Header
                htm:
                  type: string
                  description: |
                    HTTP Method (for DPoP validation).
                htu:
                  type: string
                  description: |
                    HTTP URL base (for DPoP validation).
            example:
              parameters: response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256
              clientId: '5921531358155430'
              clientSecret: P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1pushed_auth_req/post/requestBody/content/application~1json/schema'
            example:
              parameters: response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256
              clientId: '5921531358155430'
              clientSecret: P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - CREATED
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - PAYLOAD_TOO_LARGE
                      - INTERNAL_SERVER_ERROR
                    description: The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
                  requestUri:
                    type: string
                    description: |
                      The request_uri created to the client to be used as request_uri on the authorize call.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client
                      application.
                  clientAuthMethod:
                    type: string
                    description: |
                      The client authentication method that the client application declares that it uses at the token
                      endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
                      Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                    enum:
                      - NONE
                      - CLIENT_SECRET_BASIC
                      - CLIENT_SECRET_POST
                      - CLIENT_SECRET_JWT
                      - PRIVATE_KEY_JWT
                      - TLS_CLIENT_AUTH
                      - SELF_SIGNED_TLS_CLIENT_AUTH
                  dpopNonce:
                    type: string
                    description: |
                      Get the expected nonce value for DPoP proof JWT, which should be used
                      as the value of the `DPoP-Nonce` HTTP header.
              example:
                resultCode: A245001
                resultMessage: '[A245001] Successfully registered a request object for client (5921531358155430), URI is urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg.'
                action: CREATED
                requestUri: 'urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg'
                responseContent: '{"expires_in":600,"request_uri":"urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg"}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: pushed_auth_req_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/pushed_auth_req \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "parameters": "response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256", "clientId": "5921531358155430", "clientSecret" : "P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA"}'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            PushedAuthReqRequest req = new PushedAuthReqRequest();
            req.setParameters(...);
            req.setClientId("57297408867");
            req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

            api.token(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = PushedAuthReqRequest()
            req.parameters = ...
            req.clientId = '57297408867'
            req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

            api.token(req)
      tags:
        - Pushed Authorization Endpoint
  '/api/{serviceId}/auth/token':
    post:
      summary: Process Token Request
      description: |
        This API parses request parameters of an authorization request and returns necessary data for the
        authorization server implementation to process the authorization request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from with the implementation of the token endpoint of the service.
        The endpoint implementation must extract the request parameters from the token request from the
        client application and pass them as the value of parameters request parameter to Authlete's `/auth/token` API.
        The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
        of the token request.

        In addition, if the token endpoint of the authorization server implementation supports basic authentication
        as a means of [client authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3),
        the client credentials must be extracted from `Authorization` header and they must be passed as
        `clientId` request parameter and `clientSecret` request parameter to Authlete's `/auth/token` API.

        The following code snippet is an example in JAX-RS showing how to extract request parameters from
        the token request and client credentials from Authorization header.

        ```java
        @POST
        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
        public Response post(
                @HeaderParam(HttpHeaders.AUTHORIZATION) String auth,
                String parameters)
        {
            // Convert the value of Authorization header (credentials of
            // the client application), if any, into BasicCredentials.
            BasicCredentials credentials = BasicCredentials.parse(auth);

            // The credentials of the client application extracted from
            // 'Authorization' header. These may be null.
            String clientId     = credentials == null ? null
                                : credentials.getUserId();
            String clientSecret = credentials == null ? null
                                : credentials.getPassword();

            // Process the given parameters.
            return process(parameters, clientId, clientSecret);
        }
        ```

        The response from `/auth/token` API has some parameters. Among them, it is action parameter that
        the service implementation should check first because it denotes the next action that the authorization
        server implementation should take. According to the value of action, the authorization server
        implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content
        type although OAuth 2.0 specification does not mention the format of the error response when the
        redirect URI is not usable.

        The value of `responseContent` is a JSON string which describes the error, so it can be
        used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.


        **INVALID_CLIENT**

        When the value of `action` is `INVALID_CLIENT`, it means that authentication of the client failed.
        In this case, the HTTP status of the response to the client application is either "400 Bad Request"
        or "401 Unauthorized". This requirement comes from [RFC 6749, 5.2. Error Response](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2).
        The description about `invalid_client` shown below is an excerpt from RFC 6749.

        Client authentication failed (e.g., unknown client, no client authentication included, or unsupported
        authentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code
        to indicate which HTTP authentication schemes are supported. If the client attempted to authenticate
        via the `Authorization` request header field, the authorization server MUST respond with an HTTP
        401 (Unauthorized) status code and include the `WWW-Authenticate` response header field matching
        the authentication scheme used by the client.

        In either case, the value of `responseContent` is a JSON string which can be used as the entity
        body of the response to the client application.

        The following illustrate responses which the service implementation must generate and return to
        the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        <br>

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {challenge}
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        is invalid.

        A response with HTTP status of "400 Bad Request" must be returned to the client application and
        the content type must be `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        **PASSWORD**

        When the value of `"action"` is `"PASSWORD"`, it means that
        the request from the client application is valid and `grant_type`
        is `"password"`. That is, the flow is
        <a href="https://www.rfc-editor.org/rfc/rfc6749.html#section-4.3">"Resource Owner
        Password Credentials"</a>.

        In this case, {@link #getUsername()} returns the value of `"username"`
        request parameter and {@link #getPassword()} returns the value of {@code
        "password"} request parameter which were contained in the token request
        from the client application. The service implementation must validate the
        credentials of the resource owner (= end-user) and take either of the
        actions below according to the validation result.

        1. When the credentials are valid, call Authlete's /auth/token/issue} API to generate an access token for the client
            application. The API requires `"ticket"` request parameter and
            `"subject"` request parameter.
            Use the value returned from {@link #getTicket()} method as the value
            for `"ticket"` parameter.
        2. The response from `/auth/token/issue` API ({@link
            TokenIssueResponse}) contains data (an access token and others)
            which should be returned to the client application. Use the data
            to generate a response to the client application.
        3. When the credentials are invalid</b>, call Authlete's {@code
            /auth/token/fail} API with `reason=`{@link
            TokenFailRequest.Reason#INVALID_RESOURCE_OWNER_CREDENTIALS
            INVALID_RESOURCE_OWNER_CREDENTIALS} to generate an error response
            for the client application. The API requires `"ticket"`
            request parameter. Use the value returned from {@link #getTicket()}
            method as the value for `"ticket"` parameter.
        4. The response from `/auth/token/fail` API ({@link
            TokenFailResponse}) contains error information which should be
            returned to the client application. Use it to generate a response
            to the client application.

        **OK**

        When the value of `action` is `OK`, it means that the request from the client application is valid
        and an access token, and optionally an ID token, is ready to be issued.

        The HTTP status of the response returned to the client application must be "200 OK" and the content
        type must be `application/json`.

        The value of `responseContent` is a JSON string which contains an access token (and optionally
        an ID token), so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```


        **TOKEN_EXCHANGE (Authlete 2.3 onwards)**

        When the value of `"action"` is `"TOKEN_EXCHANGE"`, it means
        that the request from the client application is a valid token exchange
        request (cf. <a href="https://www.rfc-editor.org/rfc/rfc8693.html">RFC
        8693 OAuth 2.0 Token Exchange</a>) and that the request has already passed
        the following validation steps.


        1. Confirm that the value of the `requested_token_type` request parameter
        is one of the registered token type identifiers if the request parameter is
        given and its value is not empty.
        2. Confirm that the `subject_token` request parameter is given and its
        value is not empty.
        3. Confirm that the `subject_token_type` request parameter is given and
        its value is one of the registered token type identifiers.
        4. Confirm that the `actor_token_type` request parameter is given and
        its value is one of the registered token type identifiers if the
        `actor_token` request parameter is given and its value is not empty.
        5. Confirm that the `actor_token_type` request parameter is not given
        or its value is empty when the `actor_token` request parameter is
        not given or its value is empty.


        Furthermore, Authlete performs additional validation on the tokens specified
        by the `subject_token` request parameter and the `actor_token`
        request parameter according to their respective token types as shown below.

        **Token Validation Steps**

        *Token Type: `urn:ietf:params:oauth:token-type:jwt`*

        1. Confirm that the format conforms to the JWT specification [RFC 7519][https://www.rfc-editor.org/rfc/rfc7519.html].
        2. Check if the JWT is encrypted and if it is encrypted, then (a) reject
                the token exchange request when the {@link
                Service#isTokenExchangeEncryptedJwtRejected()
                tokenExchangeEncryptedJwtRejected} flag of the service is `true`
                or (b) skip remaining validation steps when the flag is `false`.
                Note that Authlete does not verify an encrypted JWT because there is
                no standard way to obtain the key to decrypt the JWT with. This means
                that you must verify an encrypted JWT by yourself when one is used as
                an input token with the token type
                { @code "urn:ietf:params:oauth:token-type:jwt" }.
        3. Confirm that the current time has not reached the time indicated by
                the `exp` claim if the JWT contains the claim.
        4. Confirm that the current time is equal to or after the time indicated
                by the `iat` claim if the JWT contains the claim.
        5.Confirm that the current time is equal to or after the time indicated
                by the `nbf` claim if the JWT contains the claim.
        6. Check if the JWT is signed and if it is not signed, then (a) reject
                the token exchange request when the {@link
                Service#isTokenExchangeUnsignedJwtRejected()
                tokenExchangeUnsignedJwtRejected} flag of the service is `true`
                or (b) finish validation on the input token. Note that Authlete does
                not verify the signature of the JWT because there is no standard way
                to obtain the key to verify the signature of a JWT with. This means
                that you must verify the signature by yourself when a signed JWT is
                used as an input token with the token type
                `"urn:ietf:params:oauth:token-type:jwt"`.

        *Token Type: `urn:ietf:params:oauth:token-type:access_token`*

        1. Confirm that the token is an access token that has been issued by
                the Authlete server of your service. This implies that access
                tokens issued by other systems cannot be used as a subject token
                or an actor token with the token type
                <code>urn:ietf:params:oauth:token-type:access_token</code>.
        2. Confirm that the access token has not expired.
        3. Confirm that the access token belongs to the service.

        *Token Type: `urn:ietf:params:oauth:token-type:refresh_token`*

        1. Confirm that the token is a refresh token that has been issued by
                the Authlete server of your service. This implies that refresh
                tokens issued by other systems cannot be used as a subject token
                or an actor token with the token type
                <code>urn:ietf:params:oauth:token-type:refresh_token</code>.
        2. Confirm that the refresh token has not expired.
        3. Confirm that the refresh token belongs to the service.

        *Token Type: `urn:ietf:params:oauth:token-type:id_token`*

        1. Confirm that the format conforms to the JWT specification (<a href=
                "https://www.rfc-editor.org/rfc/rfc7519.html">RFC 7519</a>).
        2. Check if the ID Token is encrypted and if it is encrypted, then (a)
                reject the token exchange request when the {@link
                Service#isTokenExchangeEncryptedJwtRejected()
                tokenExchangeEncryptedJwtRejected} flag of the service is `true`
                or (b) skip remaining validation steps when the flag is `false`.
                Note that Authlete does not verify an encrypted ID Token because
                there is no standard way to obtain the key to decrypt the ID Token
                with in the context of token exchange where the client ID for the
                encrypted ID Token cannot be determined. This means that you must
                verify an encrypted ID Token by yourself when one is used as an
                input token with the token type
                `"urn:ietf:params:oauth:token-type:id_token"`.
        3. Confirm that the ID Token contains the `exp` claim and the
                current time has not reached the time indicated by the claim.
        4. Confirm that the ID Token contains the `iat` claim and the
                current time is equal to or after the time indicated by the claim.
        5. Confirm that the current time is equal to or after the time indicated
                by the `nbf` claim if the ID Token contains the claim.
        6. Confirm that the ID Token contains the `iss` claim and the
                value is a valid URI. In addition, confirm that the URI has the
                `https` scheme, no query component and no fragment component.
        7. Confirm that the ID Token contains the `aud` claim and its
                value is a JSON string or an array of JSON strings.
        8. Confirm that the value of the `nonce` claim is a JSON string
                if the ID Token contains the claim.
        9. Check if the ID Token is signed and if it is not signed, then (a)
                reject the token exchange request when the {@link
                Service#isTokenExchangeUnsignedJwtRejected()
                tokenExchangeUnsignedJwtRejected} flag of the service is `true`
                or (b) finish validation on the input token.
        10. Confirm that the signature algorithm is asymmetric. This implies that
                ID Tokens whose signature algorithm is symmetric (`HS256`,
                `HS384` or `HS512`) cannot be used as a subject token or
                an actor token with the token type
                `urn:ietf:params:oauth:token-type:id_token`.
        11. Verify the signature of the ID Token. Signature verification is
                performed even in the case where the issuer of the ID Token is not
                your service. But in that case, the issuer must support the discovery
                endpoint defined in <a href=
                "https://openid.net/specs/openid-connect-discovery-1_0.html">OpenID
                Connect Discovery 1.0</a>. Otherwise, signature verification fails.

        *Token Type: `urn:ietf:params:oauth:token-type:saml1`*

        (Authlete does not perform any validation for this token type.)

        *Token Type: `urn:ietf:params:oauth:token-type:saml2`*

        (Authlete does not perform any validation for this token type.)

        The specification of Token Exchange (<a href=
        "https://www.rfc-editor.org/rfc/rfc8693.html">RFC 8693</a>) is very
        flexible. In other words, the specification has abandoned the task of
        determining details. Therefore, for secure token exchange, you have
        to complement the specification with your own rules. For that purpose,
        Authlete provides some configuration options as listed below.
        Authorization server implementers may utilize them and/or implement
        their own rules.


        In the case of {@link Action#TOKEN_EXCHANGE TOKEN_EXCHANGE}, the {@link
        #getResponseContent()} method returns `null`. You have to construct
        the token response by yourself.

        For example, you may generate an access token by calling Authlete's
        `/api/auth/token/create` API and construct a token response like
        below.

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {challenge}
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        ```
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-cache, no-store
        {
            "access_token": "{@link TokenCreateResponse#getAccessToken()}",
            "issued_token_type": "urn:ietf:params:oauth:token-type:access_token",
            "token_type": "Bearer",
            "expires_in": { @link TokenCreateResponse#getExpiresIn() },
            "scope": "String.join(" ", {@link TokenCreateResponse#getScopes()})"
        }
        ```


        **JWT_BEARER JWT_BEARER (Authlete 2.3 onwards)**

        When the value of `"action"` is `"JWT_BEARER"`, it means that
        the request from the client application is a valid token request with the
        grant type `"urn:ietf:params:oauth:grant-type:jwt-bearer"` (<a href=
        "https://www.rfc-editor.org/rfc/rfc7523.html">RFC 7523 JSON Web Token (JWT)
        Profile for OAuth 2.0 Client Authentication and Authorization Grants</a>)
        and that the request has already passed the following validation steps.

        1. Confirm that the `assertion` request parameter is given and its value
          is not empty.
        2. Confirm that the format of the assertion conforms to the JWT specification
          (<a href="https://www.rfc-editor.org/rfc/rfc7519.html">RFC 7519</a>).

        3. Check if the JWT is encrypted and if it is encrypted, then (a) reject the
          token request when the {@link Service#isJwtGrantEncryptedJwtRejected()
          jwtGrantEncryptedJwtRejected} flag of the service is `true` or (b)
          skip remaining validation steps when the flag is `false`. Note that
          Authlete does not verify an encrypted JWT because there is no standard way
          to obtain the key to decrypt the JWT with. This means that you must verify
          an encrypted JWT by yourself.
        4. Confirm that the JWT contains the `iss` claim and its value is a
          JSON string.
        5. Confirm that the JWT contains the `sub` claim and its value is a
          JSON string.
        6. Confirm that the JWT contains the `aud` claim and its value is
          either a JSON string or an array of JSON strings.
        7. Confirm that the issuer identifier of the service (cf. {@link Service#getIssuer()})
          or the URL of the token endpoint (cf. {@link Service#getTokenEndpoint()})
          is listed as audience in the `aud` claim.
        8. Confirm that the JWT contains the `exp` claim and the current time
          has not reached the time indicated by the claim.
        9. Confirm that the current time is equal to or after the time indicated by
          by the `iat` claim if the JWT contains the claim.
        10. Confirm that the current time is equal to or after the time indicated by
          by the `nbf` claim if the JWT contains the claim.
        11. Check if the JWT is signed and if it is not signed, then (a) reject the
          token request when the {@link Service#isJwtGrantUnsignedJwtRejected()
          jwtGrantUnsignedJwtRejected} flag of the service is `true` or (b)
          finish validation on the JWT. Note that Authlete does not verify the
          signature of the JWT because there is no standard way to obtain the key
          to verify the signature of a JWT with. This means that you must verify
          the signature by yourself.

        Authlete provides some configuration options for the grant type as listed
        below. Authorization server implementers may utilize them and/or implement
        their own rules.


        ```
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-cache, no-store
        {
              "access_token": "{@link TokenCreateResponse#getAccessToken()}",
              "token_type":   "Bearer",
              "expires_in":   {@link TokenCreateResponse#getExpiresIn()},
              "scope":        "String.join(" ", {@link TokenCreateResponse#getScopes()})"
                                  }
        ```

          Finally, note again that Authlete does not verify the signature of the JWT
          specified by the `assertion` request parameter. You must verify the
          signature by yourself.

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  description: |
                    OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
                    implementation received from the client application.

                    The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
                    the client application.
                clientId:
                  type: string
                  description: |
                    The client ID extracted from `Authorization` header of the token request from the client application.

                    If the token endpoint of the authorization server implementation supports basic authentication as
                    a means of client authentication, and the request from the client application contained its client ID
                    in `Authorization` header, the value should be extracted and set to this parameter.
                clientSecret:
                  type: string
                  description: |
                    The client secret extracted from `Authorization` header of the token request from the client application.

                    If the token endpoint of the authorization server implementation supports basic authentication as a means of
                    client authentication, and the request from the client application contained its client secret in `Authorization` header,
                    the value should be extracted and set to this parameter.
                clientCertificate:
                  type: string
                  description: The client certificate from the MTLS of the token request from the client application.
                clientCertificatePath:
                  type: string
                  description: |
                    The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
                properties:
                  type: string
                  description: |
                    Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
                    for details.
                dpop:
                  type: string
                  description: |
                    `DPoP` header presented by the client during the request to the token endpoint.

                    The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                htm:
                  type: string
                  description: |
                    HTTP method of the token request. This field is used to validate the `DPoP` header.

                    In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                htu:
                  type: string
                  description: |
                    URL of the token endpoint. This field is used to validate the `DPoP` header.

                    If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                accessToken:
                  type: string
                  description: |
                    The representation of an access token that may be issued as a result of the Authlete API call.
                jwtAtClaims:
                  type: string
                  description: |
                    Additional claims that are added to the payload part of the JWT access token.
            example:
              parameters: grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
              clientId: '26478243745571'
              clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - INVALID_CLIENT
                      - BAD_REQUEST
                      - PASSWORD
                      - OK
                      - TOKEN_EXCHANGE
                      - JWT_BEARER
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
                  username:
                    type: string
                    description: |
                      The value of `username` request parameter in the token request.
                      The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
                      In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.

                      This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                  password:
                    type: string
                    description: |
                      The value of `password` request parameter in the token request.
                      The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
                      In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.

                      This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                  ticket:
                    type: string
                    description: |
                      The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.

                      This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                  accessToken:
                    type: string
                    description: The newly issued access token.
                  accessTokenExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      The datetime at which the newly issued access token will expire.
                      The value is represented in milliseconds since the Unix epoch (1970-01-01).
                  accessTokenDuration:
                    type: integer
                    format: int64
                    description: The duration of the newly issued access token in seconds.
                  refreshToken:
                    type: string
                    description: The newly issued refresh token.
                  refreshTokenExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      The datetime at which the newly issued refresh token will expire.
                      The value is represented in milliseconds since the Unix epoch (1970-01-01).
                  refreshTokenDuration:
                    type: integer
                    format: int64
                    description: The duration of the newly issued refresh token in seconds.
                  idToken:
                    type: string
                    description: |
                      The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
                      of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
                  grantType:
                    type: string
                    description: The grant type of the token request.
                  clientId:
                    type: integer
                    format: int64
                    description: The client ID.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
                      Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      The flag which indicates whether the client ID alias was used when the token request was made.
                      `true` if the client ID alias was used when the token request was made.
                  subject:
                    type: string
                    description: |
                      The subject (= resource owner's ID) of the access token.
                      Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
                      [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
                      is not associated with any specific end-user.
                  scopes:
                    type: array
                    items:
                      type: string
                    description: The scopes covered by the access token.
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: |
                      The extra properties associated with the access token.
                      This parameter is `null` when no extra property is associated with the issued access token.
                  jwtAccessToken:
                    type: string
                    description: |
                      The newly issued access token in JWT format. If the authorization server is configured
                      to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
                      non-null value), a JWT-based access token is issued along with the original random-string
                      one.
                  resources:
                    type: array
                    items:
                      type: string
                    description: |
                      The resources specified by the `resource` request parameters in the token request.
                      See "Resource Indicators for OAuth 2.0" for details.
                  accessTokenResources:
                    type: array
                    items:
                      type: string
                    description: |
                      The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  clientAuthMethod:
                    type: string
                    description: |
                      The client authentication method that was performed at the token endpoint.
                  grantId:
                    type: string
                    description: |
                      the value of the `grant_id` request parameter of the device authorization request.

                      The `grant_id` request parameter is defined in
                      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                      , which is supported by Authlete 2.3 and newer versions.
                  audiences:
                    type: array
                    items:
                      type: string
                    description: |
                      The audiences on the token exchange request
                  requestedTokenType:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token/post/responses/200/content/application~1json/schema/properties/actorTokenType'
                  subjectToken:
                    type: string
                  subjectTokenType:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token/post/responses/200/content/application~1json/schema/properties/actorTokenType'
                  subjectTokenInfo:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token/post/responses/200/content/application~1json/schema/properties/actorTokenInfo'
                  actorToken:
                    type: string
                  actorTokenType:
                    type: string
                    description: |
                      The grant type of the access token when the access token was created.
                    enum:
                      - 'urn:ietf:params:oauth:token-type:jwt'
                      - 'urn:ietf:params:oauth:token-type:access_token'
                      - 'urn:ietf:params:oauth:token-type:refresh_token'
                      - 'urn:ietf:params:oauth:token-type:id_token'
                      - 'urn:ietf:params:oauth:token-type:saml1'
                      - 'urn:ietf:params:oauth:token-type:saml2'
                      - DEVICE_CODE
                      - TOKEN_EXCHANGE
                      - JWT_BEARER
                  actorTokenInfo:
                    type: object
                    properties:
                      clientId:
                        type: integer
                        description: The client id.
                      clientIdAlias:
                        type: string
                        description: The alias of the client.
                      clientIdAliasUsed:
                        type: boolean
                        description: Flag specifying if the alias was used to identify the client
                      subject:
                        type: string
                        description: the resource owner unique id
                      scopes:
                        type: array
                        items:
                          type: string
                        description: The scopes granted on the token
                      expiresAt:
                        type: integer
                        description: time which the token expires.
                      properties:
                        type: array
                        description: Extra properties associated with the token
                        items:
                          $ref: '#/components/schemas/Property'
                      resources:
                        type: array
                        description: The array of the resources of the token.
                        items:
                          type: string
                      authorizationDetails:
                        $ref: '#/components/schemas/AuthorizationDetailsElement'
                      clientEntityId:
                        type: string
                        description: |
                          The entity ID of the client.
                      clientEntityIdUsed:
                        type: boolean
                        description: |
                          Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
                  assertion:
                    type: string
                    description: |
                      For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
                  previousRefreshTokenUsed:
                    type: boolean
                    description: |
                      Indicate whether the previous refresh token that had been kept in the database for a short time was used
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
                  cnonceDuration:
                    type: integer
                    format: int64
                    description: |
                      Duration of the `c_nonce` in seconds.
                  dpopNonce:
                    type: string
                    description: |
                      Get the expected nonce value for DPoP proof JWT, which should be used
                      as the value of the `DPoP-Nonce` HTTP header.
                  cnonce:
                    type: string
                    description: |
                      Get the `c_nonce`.
                  cnonceExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      Get the time at which the `c_nonce` expires in milliseconds since
                      the Unix epoch (1970-01-01).
                  requestedIdTokenClaims:
                    type: array
                    items:
                      type: string
                    description: |
                      Get the names of the claims that the authorization request (which resulted
                      in generation of the access token) requested to be embedded in ID tokens.
                  refreshTokenScopes:
                    type: array
                    items:
                      type: string
                    description: |
                      Scopes associated with the refresh token.
              example:
                resultCode: A050001
                resultMessage: '[A050001] The token request (grant_type=authorization_code) was processed successfully.'
                accessToken: C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ
                accessTokenDuration: 3600
                accessTokenExpiresAt: 1640252942736
                action: OK
                clientAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasUsed: false
                grantType: AUTHORIZATION_CODE
                refreshToken: 60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo
                refreshTokenDuration: 3600
                refreshTokenExpiresAt: 1640252942736
                responseContent: '{\"access_token\":\"C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ\",\"refresh_token\":\"60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo\",\"scope\":\"history.read timeline.read\",\"token_type\":\"Bearer\",\"expires_in\":3600}'
                scopes:
                  - history.read
                  - timeline.read
                serviceAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                subject: john
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "parameters": "grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk", "clientId": "57297408867", "clientSecret": "J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenRequest req = new TokenRequest();
            req.setParameters(...);
            req.setClientId("57297408867");
            req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

            api.token(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenRequest()
            req.parameters = ...
            req.clientId = '57297408867'
            req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

            api.token(req)
      tags:
        - Token Endpoint
  '/api/{serviceId}/auth/token/fail':
    post:
      summary: Fail Token Request
      description: |
        This API generates a content of an error token response that the authorization server implementation
        returns to the client application.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the token endpoint of the service
        in order to generate an error response to the client application.

        The description of the `/auth/token` API describes the timing when this API should be called. See
        the description for the case of `action=PASSWORD`.

        The response from `/auth/token/fail` API has some parameters. Among them, it is `action` parameter
        that the authorization server implementation should check first because it denotes the next action
        that the authorization server implementation should take. According to the value of `action`, the
        authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error".

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that Authlete's `/auth/token/fail` API successfully
        generated an error response for the client application.

        The HTTP status of the response returned to the client application must be "400 Bad Request" and
        the content type must be `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - reason
              properties:
                ticket:
                  type: string
                  description: |
                    The ticket issued from Authlete `/auth/token` API.
                reason:
                  type: string
                  enum:
                    - UNKNOWN
                    - INVALID_RESOURCE_OWNER_CREDENTIALS
                    - INVALID_TARGET
                  description: |
                    The reason of the failure of the token request.
            example:
              ticket: 83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c
              reason: INVALID_RESOURCE_OWNER_CREDENTIALS
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token~1fail/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter. See description for details.
              example:
                resultCode: A067301
                resultMessage: '[A067301] The credentials (username & password) passed to the token endpoint are invalid.'
                action: BAD_REQUEST
                responseContent: '{\"error_description\":\"[A067301] The credentials (username & password) passed to the token endpoint are invalid.\",\"error\":\"invalid_request\",\"error_uri\":\"https://docs.authlete.com/#A067301\"}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_fail_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/fail \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "ticket": "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c", "reason": "INVALID_RESOURCE_OWNER_CREDENTIALS" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenFailRequest req = new TokenFailRequest();
            req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");
            req.setReason(TokenFailRequest.Reason.INVALID_RESOURCE_OWNER_CREDENTIALS);

            api.tokenFail(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenFailRequest()
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'
            req.reason = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS

            api.tokenFail(req)
      tags:
        - Token Endpoint
  '/api/{serviceId}/auth/token/issue':
    post:
      summary: Issue Token Response
      description: |
        This API generates a content of a successful token response that the authorization server implementation
        returns to the client application.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the token endpoint of the service
        in order to generate a successful response to the client application.

        The description of the `/auth/token` API describes the timing when this API should be called. See
        the description for the case of `action=PASSWORD`.

        The response from `/auth/token/issue` API has some parameters. Among them, it is `action` parameter
        that the authorization server implementation should check first because it denotes the next action
        that the authorization server implementation should take. According to the value of `action`, the
        authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error".

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.

        **OK**

        When the value of `action` is `OK`, it means that Authlete's `/auth/token/issue` API successfully
        generated an access token.

        The HTTP status of the response returned to the client application must be "200 OK" and the content
        type must be`application/json`.

        The value of `responseContent` is a JSON string which contains an access token, so it can be used
        as the entity body of the response.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - subject
              properties:
                ticket:
                  type: string
                  description: |
                    The ticket issued from Authlete `/auth/token` API.
                subject:
                  type: string
                  description: |
                    The subject (= unique identifier) of the authenticated user.
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Property'
                  description: |
                    Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
                    when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
                    if you want to specify properties.
                jwtAtClaims:
                  type: string
                  description: |
                    Additional claims that are added to the payload part of the JWT access token.
                accessToken:
                  type: string
                  description: |
                    The representation of an access token that may be issued as a result of the Authlete API call.
            example:
              ticket: p7SXQ9JFjng7KFOZdCMBKcoR3ift7B54l1LGIgQXqEM
              subject: john
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token~1issue/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - OK
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format is JSON.
                  accessToken:
                    type: string
                    description: The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
                  accessTokenExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      The datetime at which the newly issued access token will expire.
                      The value is represented in milliseconds since the Unix epoch (1970-01-01).
                  accessTokenDuration:
                    type: integer
                    format: int64
                    description: The duration of the newly issued access token in seconds.
                  refreshToken:
                    type: string
                    description: |
                      The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
                      If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
                      is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
                  refreshTokenExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      The datetime at which the newly issued refresh token will expire.
                      The value is represented in milliseconds since the Unix epoch (1970-01-01).
                  refreshTokenDuration:
                    type: integer
                    format: int64
                    description: The duration of the newly issued refresh token in seconds.
                  clientId:
                    type: integer
                    format: int64
                    description: The client ID.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias. If the client did not have an alias, this parameter is `null`.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      The flag which indicates whether the client ID alias was used when the token request was made.
                      `true` if the client ID alias was used when the token request was made.
                  subject:
                    type: string
                    description: |
                      The subject (= resource owner's ID) of the access token.
                      Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
                      [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
                      the access token is not associated with any specific end-user.
                  scopes:
                    type: array
                    items:
                      type: string
                    description: The scopes covered by the access token.
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: |
                      The extra properties associated with the access token.
                      This parameter is `null` when no extra property is associated with the issued access token.
                  jwtAccessToken:
                    type: string
                    description: |
                      The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
                      (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
                      original random-string one.
                  accessTokenResources:
                    type: array
                    items:
                      type: string
                    description: |
                      The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
                  refreshTokenScopes:
                    type: array
                    items:
                      type: string
                    description: |
                      The scopes associated with the refresh token. May be null.
              example:
                resultCode: A054001
                resultMessage: '[A054001] The token request (grant_type=password) was processed successfully.'
                accessToken: OthV6TlZ2pPUtlBBvBSGFYzSdgVy87SSIPz2Zjwi-m0
                accessTokenDuration: 3600
                accessTokenExpiresAt: 1640331371876
                action: OK
                clientAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasUsed: false
                refreshToken: ICPN0-sG3BH4szqiNqaFHZrWUGt7e0zaPuhys3ejQow
                refreshTokenDuration: 3600
                refreshTokenExpiresAt: 1640331371876
                responseContent: '{\"access_token\":\"OthV6TlZ2pPUtlBBvBSGFYzSdgVy87SSIPz2Zjwi-m0\",\"refresh_token\":\"ICPN0-sG3BH4szqiNqaFHZrWUGt7e0zaPuhys3ejQow\",\"scope\":null,\"token_type\":\"Bearer\",\"expires_in\":3600}'
                serviceAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                subject: john
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_issue_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/issue \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "ticket": "p7SXQ9JFjng7KFOZdCMBKcoR3ift7B54l1LGIgQXqEM", "subject": "john" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenIssueRequest req = new TokenIssueRequest()
            req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");

            api.tokenIssue(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenIssueRequest()
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'

            api.tokenIssue(req)
      tags:
        - Token Endpoint
  '/api/{serviceId}/auth/introspection':
    post:
      summary: Process Introspection Request
      description: |
        This API gathers information about an access token.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementations of protected resource endpoints
        of the authorization server implementation in order to get information about the access token which
        was presented by the client application.

        In general, a client application accesses a protected resource endpoint of a service with an access
        token, and the implementation of the endpoint checks whether the presented access token has enough
        privileges (= scopes) to access the protected resource before returning the protected resource to
        the client application. To achieve this flow, the endpoint implementation has to know detailed
        information about the access token. Authlete `/auth/introspection` API can be used to get such information.

        The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
        that the authorization server implementation should check first because it denotes the next action
        that the authorization server implementation should take. According to the value of `action`, the
        authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content
        type although OAuth 2.0 specification does not mention the format of the error response when the
        redirect URI is not usable.

        The value of `responseContent` is a string which describes the error in the format of
        [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if
        the protected resource of the service implementation wants to return an error response to the client
        application in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration
        parameter of the service is Bearer), the value of `responseContent` can be used as the value of
        `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        does not contain an access token (= the request from the authorization server implementation to
        Authlete does not contain `token` request parameter).

        A response with HTTP status of "400 Bad Request" must be returned to the client application and
        the content type must be `application/json`.


        The value of `responseContent` is a string which describes the error in the format of [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if the
        protected resource of the service implementation wants to return an error response to the client
        application in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration
        parameter of the service is `Bearer`), the value of `responseContent` can be used as the value of
        `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist or has
        expired.

        The value of `responseContent` is a string which describes the error in the format of RFC
        6750 (OAuth 2.0 Bearer Token Usage), so if the protected resource of the service implementation
        wants to return an error response to the client application in the way that complies with [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (in other words, if `accessTokenType` configuration
        parameter of the service is `Bearer`), the value of `responseContent` can be used as the value of
        `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORBIDDEN**

        When the value of `action` is `FORBIDDEN`, it means that the access token does not cover the required
        scopes or that the subject associated with the access token is different from the subject contained
        in the request.

        A response with HTTP status of "400 Bad Request" must be returned to the client application and
        the content type must be `application/json`.

        The value of `responseContent` is a string which describes the error in the format of [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if the
        protected resource of the service implementation wants to return an error response to the client
        application in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration
        parameter of the service is Bearer), the value of `responseContent` can be used as the value of
        `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```
        HTTP/1.1 403 Forbidden
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **OK**

        When the value of `action` is `OK`, it means that the access token which the client application
        presented is valid (= exists and has not expired).

        The implementation of the protected resource endpoint is supposed to return the protected resource
        to the client application.

        When action is `OK`, the value of `responseContent` is `"Bearer error=\"invalid_request\""`. This
        is the simplest string which can be used as the value of `WWW-Authenticate` header to indicate
        "400 Bad Request". The implementation of the protected resource endpoint may use this string to
        tell the client application that the request was bad (e.g. in case necessary request parameters
        for the protected resource endpoint are missing). However, in such a case, the implementation
        should generate a more informative error message to help developers of client applications.

        The following is an example error response which complies with RFC 6750.

        ```
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        Basically, The value of `responseContent` is a string which describes the error in the format of
        [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage). So, if
        the service has selected `Bearer` as the value of `accessTokenType` configuration parameter, the
        value of `responseContent` can be used directly as the value of `WWW-Authenticate` header. However,
        if the service has selected another different token type, the service has to generate error messages
        for itself.

        _**JWT-based access token**_

        Since version 2.1, Authlete provides a feature to issue access tokens in JWT format. This feature
        can be enabled by setting a non-null value to the `accessTokenSignAlg` property of the service
        (see the description of the Service class for details). `/api/auth/introspection` API can accept
        access tokens in JWT format. However, note that the API does not return information contained in
        a given JWT-based access token but returns information stored in the database record which corresponds
        to the given JWT-based access token. Because attributes of the database record can be modified
        after the access token is issued (for example, by using `/api/auth/token/update` API), information
        returned by `/api/auth/introspection` API and information the given JWT-based access token holds
        may be different.

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: An access token to introspect.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    A string array listing names of scopes which the caller (= a protected resource endpoint of the
                    service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
                    the format of `scopes` is a space-separated list of scope names.

                    If this parameter is a non-empty array and if it contains a scope which is not covered by the
                    access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
                subject:
                  type: string
                  description: |
                    A subject (= a user account managed by the service) whom the caller (= a protected resource
                    endpoint of the service) requires.

                    If this parameter is not `null` and if the value does not match the subject who is associated
                    with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
                clientCertificate:
                  type: string
                  description: |
                    Client certificate in PEM format, used to validate binding against access tokens using the TLS
                    client certificate confirmation method.
                dpop:
                  type: string
                  description: |
                    `DPoP` header presented by the client during the request to the resource server.

                    The header contains a signed JWT which includes the public key that is paired with the private
                    key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
                    Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
                htm:
                  type: string
                  description: |
                    HTTP method of the request from the client to the protected resource endpoint. This field is
                    used to validate the `DPoP` header.

                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                htu:
                  type: string
                  description: |
                    URL of the protected resource endpoint. This field is used to validate the `DPoP` header.

                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                resources:
                  type: array
                  items:
                    type: string
                  description: |
                    The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
                acrValues:
                  type: array
                  items:
                    type: string
                  description: |
                    Authentication Context Class Reference values one of which the user authentication performed during the course 
                    of issuing the access token must satisfy.
                maxAge:
                  type: integer
                  format: int64
                  description: |
                    The maximum authentication age which is the maximum allowable elapsed time since the user authentication 
                    was performed during the course of issuing the access token.
                requiredComponents:
                  type: array
                  items:
                    type: string
                  description: |
                    HTTP Message Components required to be in the signature. If absent, defaults to [ "@method", "@target-uri", "authorization" ].
                uri:
                  type: string
                  description: |
                    The full URL of the userinfo endpoint.
                message:
                  type: string
                  description: |
                    The HTTP message body of the request, if present.
                headers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Pair'
                  description: |
                    HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
                    Signature and Signature-Input headers, as well as any additional headers covered by the signature.
            example:
              token: VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI
              subject: john
              scopes:
                - history.read
                - timeline.read
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1introspection/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - OK
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
                  clientId:
                    type: integer
                    format: int64
                    description: The client ID.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
                      Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      The flag which indicates whether the client ID alias was used when the token request was made.
                      `true` if the client ID alias was used when the token request was made.
                  expiresAt:
                    type: integer
                    format: int64
                    description: |
                      The time at which the access token expires.
                      The value is represented in milliseconds since the Unix epoch (1970-01-01).
                  subject:
                    type: string
                    description: |
                      The subject who is associated with the access token.
                      The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
                  scopes:
                    type: array
                    items:
                      type: string
                    description: |
                      The scopes covered by the access token.
                  existent:
                    type: boolean
                    description: |
                      `true` if the access token exists.
                  usable:
                    type: boolean
                    description: |
                      true` if the access token is usable (= exists and has not expired).
                  sufficient:
                    type: boolean
                    description: |
                      `true` if the access token exists.
                  refreshable:
                    type: boolean
                    description: |
                      `true` if the access token can be refreshed using the associated refresh token which had been issued
                      along with the access token. `false` if the refresh token for the access token has expired or the access
                      token has no associated refresh token.
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: The extra properties associated with the access token.
                  certificateThumbprint:
                    type: string
                    description: |
                      The client certificate thumbprint used to validate the access token.
                  resources:
                    type: array
                    items:
                      type: string
                    description: |
                      The target resources. This represents the resources specified by the `resource` request parameters
                      or by the `resource` property in the request object.

                      See "Resource Indicators for OAuth 2.0" for details.
                  accessTokenResources:
                    type: array
                    items:
                      type: string
                    description: |
                      The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.

                      In some flows, the initial request and the subsequent token request are sent to different endpoints.
                      Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
                      In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
                      The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
                      set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
                      `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.

                      See "Resource Indicators for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  scopeDetails:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scope'
                    description: |
                      The scopes property of this class is a list of scope names. The property does not hold information
                      about scope attributes. This scopeDetails property was newly created to convey information about
                      scope attributes.
                  grantId:
                    type: string
                    description: |
                      The value of the `grant_id` request parameter of the device authorization request.

                      The `grant_id` request parameter is defined in
                      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                      , which is supported by Authlete 2.3 and newer versions.
                  grant:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization/post/responses/200/content/application~1json/schema/properties/grant'
                  forExternalAttachment:
                    type: boolean
                    description: |
                      the flag which indicates whether the access token is for an external
                      attachment.
                  consentedClaims:
                    type: array
                    items:
                      type: string
                    description: |
                      the claims that the user has consented for the client application
                      to know.
                  grantType:
                    $ref: '#/components/schemas/GrantType'
                  acr:
                    type: string
                    description: |
                      The Authentication Context Class Reference of the user authentication that the authorization server performed 
                      during the course of issuing the access token.
                  authTime:
                    type: integer
                    format: int64
                    description: |
                      The time when the user authentication was performed during the course of issuing the access token.
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
                  forCredentialIssuance:
                    type: boolean
                    description: The flag indicating whether the token is for credential issuance.
                  cnonce:
                    type: string
                    description: The c_nonce
                  cnonceExpiresAt:
                    type: integer
                    format: int64
                    description: The time at which the `c_nonce` expires.
                  issuableCredentials:
                    type: string
                    description: The credentials that can be obtained by presenting the access token.
                  dpopNonce:
                    type: string
                    description: |
                      The expected nonce value for DPoP proof JWT, which should be used
                      as the value of the `DPoP-Nonce` HTTP header.
              example:
                resultCode: A056001
                resultMessage: '[A056001] The access token is valid.'
                action: OK
                clientAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasUsed: false
                existent: true
                expiresAt: 1640416873000
                refreshable: true
                responseContent: Bearer error="invalid_request"
                scopes:
                  - history.read
                  - timeline.read
                serviceAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                subject: john
                sufficient: true
                usable: true
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_introspection_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/introspection \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "token": "VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI", "scopes": [ "history.read", "timeline.read" ] }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            IntrospectionRequest req = new IntrospectionRequest();
            req.setToken("VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI");
            req.setScopes(new String[] { "history.read", "timeline.read" });

            api.introspection(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = IntrospectionRequest()
            req.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI'
            req.scopes = [ 'history.read', 'timeline.read' ]

            api.introspection(req)
      tags:
        - Introspection Endpoint
  '/api/{serviceId}/auth/introspection/standard':
    post:
      summary: Process OAuth 2.0 Introspection Request
      description: |
        This API exists to help your authorization server provide its own introspection API which complies
        with [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementations of the introspection endpoint
        of your service. The authorization server implementation should retrieve the value of `action` from
        the response and take the following steps according to the value.

        In general, a client application accesses a protected resource endpoint of a service with an access
        token, and the implementation of the endpoint checks whether the presented access token has enough
        privileges (= scopes) to access the protected resource before returning the protected resource to
        the client application. To achieve this flow, the endpoint implementation has to know detailed
        information about the access token. Authlete `/auth/introspection` API can be used to get such information.

        The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
        that the authorization server implementation should check first because it denotes the next action
        that the authorization server implementation should take. According to the value of `action`, the
        authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error".

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
        body of error responses.

        The following illustrates an example response which the introspection endpoint of the authorization
        server implementation generates and returns to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        is invalid. This happens when the request from the client did not include the token request parameter.
        See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
        RFC 7662 for details about requirements for introspection requests.

        The HTTP status of the response returned to the client application should be "400 Bad Request".

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)
        does not mention anything about the response body of error responses.

        The following illustrates an example response which the introspection endpoint of the authorization
        server implementation generates and returns to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json

        {responseContent}
        ```

        **OK**

        When the value of `action` is `OK`, the request from the client application is valid.

        The HTTP status of the response returned to the client application must be "200 OK" and its content
        type must be `application/json`.

        The value of `responseContent` is a JSON string which complies with the introspection response
        defined in "2.2. Introspection Response" in RFC7662.

        The following illustrates the response which the introspection endpoint of your authorization server
        implementation should generate and return to the client application.

        ```
        HTTP/1.1 200 OK
        Content-Type: application/json

        {responseContent}
        ```

        Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some
        form of authorization to access this endpoint**"_. This means that you have to protect your introspection
        endpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.
        In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection
        request does not satisfy authorization requirements imposed by your introspection endpoint.

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  description: |
                    Request parameters which comply with the introspection request defined
                    in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
                    RFC 7662.

                    The implementation of the introspection endpoint of your authorization server will receive an
                    HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
                    in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
                    Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
                withHiddenProperties:
                  type: string
                  description: |
                    Flag indicating whether to include hidden properties in the output.

                    Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
                    Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
                    is set to `true` are not embedded in the standard introspection output.

                    If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
                    API includes all the associated key-value pairs into the output regardless of the value of the
                    hidden attribute.
            example:
              parameters: token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1introspection~1standard/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - OK
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client
                      application.
              example:
                resultCode: A145001
                resultMessage: '[A145001] Introspection was performed successfully (type=access_token, active=true).'
                action: OK
                responseContent: '{\"sub\":\"john\",\"scope\":\"history.read timeline.read\",\"iss\":\"https://my-service.example.com\",\"active\":true,\"token_type\":\"Bearer\",\"exp\":1640416873,\"client_id\":\"26478243745571\"}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_introspection_standard_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/introspection/standard \
            -H "Content-Type:application/json" \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "parameters":"token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            StandardIntrospectionRequest req = new StandardIntrospectionRequest();
            req.setParameters(...);

            api.standardIntrospection(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = StandardIntrospectionRequest()
            req.parameters = ...

            api.standardIntrospection(req)
      tags:
        - Introspection Endpoint
  '/api/{serviceId}/auth/revocation':
    post:
      summary: Process Revocation Request
      description: |
        This API revokes access tokens and refresh tokens.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the revocation endpoint ([RFC
        7009](tools.ietf.org/html/rfc7009)) of the authorization server implementation in order to revoke
        access tokens and refresh tokens.

        The response from `/auth/revocation` API has some parameters. Among them, it is `action` parameter
        that the authorization server implementation should check first because it denotes the next action
        that the authorization server implementation should take. According to the value of `action`, the
        authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error".

        The value of `responseContent` is a JSON string which describes the error, so it can be
        used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **INVALID_CLIENT**

        When the value of `action` is `INVALID_CLIENT`, it means that authentication of the client failed.
        In this case, the HTTP status of the response to the client application is either "400 Bad Request"
        or "401 Unauthorized". The description about `invalid_client` shown below is an excerpt from [RFC
        6749](https://datatracker.ietf.org/doc/html/rfc6749).

        `invalid_client`

        > Client authentication failed (e.g., unknown client, no client authentication included, or unsupported
        authentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code
        to indicate which HTTP authentication schemes are supported. If the client attempted to authenticate
        via the `Authorization` request header field, the authorization server MUST respond with an HTTP
        401 (Unauthorized) status code and include the `WWW-Authenticate` response header field matching
        the authentication scheme used by the client.

        In either case, the value of `responseContent` is a JSON string which can be used as the entity
        body of the response to the client application.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        <br>

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {challenge}
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        is invalid.

        The HTTP status of the response returned to the client application must be "400 Bad Request" and
        the content type must be `application/json`. [RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009),
        [2.2.1. Error Respons](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2.1) states "The
        error presentation conforms to the definition in [Section 5.2](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2)
        of [[RFC 6749](https://datatracker.ietf.org/doc/html/rfc6749)]."

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **OK**

        When the value of `action` is `OK`, it means that the request from the client application is valid
        and the presented token has been revoked successfully or if the client submitted an invalid token.
        Note that invalid tokens do not cause an error. See [2.2. Revocation Response](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2) for details.

        The HTTP status of the response returned to the client application must be 200 OK.

        If the original request from the client application contains callback request parameter and its
        value is not empty, the content type should be `application/javascript` and the content should be
        a JavaScript snippet for JSONP.

        The value of `responseContent` is JavaScript snippet if the original request from the client application
        contains callback request parameter and its value is not empty. Otherwise, the value of `responseContent`
        is `null`.

        ```
        HTTP/1.1 200 OK
        Content-Type: application/javascript
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  description: |
                    OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint
                    ([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the
                    client application.

                    The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request
                    from the client application.
                clientId:
                  type: string
                  description: |
                    The client ID extracted from `Authorization` header of the revocation request from the client application.

                    If the revocation endpoint of the authorization server implementation supports Basic Authentication
                    as a means of client authentication, and the request from the client application contains its client ID in
                    `Authorization` header, the value should be extracted and set to this parameter.
                clientSecret:
                  type: string
                  description: |
                    The client secret extracted from `Authorization` header of the revocation request from the client application.

                    If the revocation endpoint of the authorization server implementation supports basic authentication as a means of
                    client authentication, and the request from the client application contained its client secret in `Authorization` header,
                    the value should be extracted and set to this parameter.
                clientCertificate:
                  type: string
                  description: |
                    The client certificate used in the TLS connection between the client application and the revocation endpoint.
                clientCertificatePath:
                  type: string
                  description: |
                    The certificate path presented by the client during client authentication.
            example:
              parameters: VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token
              clientId: '26478243745571'
              clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1revocation/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - INVALID_CLIENT
                      - BAD_REQUEST
                      - OK
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
              example:
                resultCode: A113001
                resultMessage: '[A113001] The token has been revoked successfully.'
                action: OK
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_revocation_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/revocation \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "parameters": "token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token", "clientId": "26478243745571", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            RevocationRequest req = new RevocationRequest();
            request.setParameters(...);

            api.revocation(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = RevocationRequest()
            req.parameters = ...

            api.revocation(req)
      tags:
        - Revocation Endpoint
  '/api/{serviceId}/auth/userinfo':
    post:
      summary: Process UserInfo Request
      description: |
        This API gathers information about a user.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        of the authorization server in order to get information about the user that is associated with
        an access token.

        The response from `/auth/userinfo` API has various parameters. Among them, it is `action` parameter
        that the authorization server implementation should check first because it denotes the next action
        that the authorization server implementation should take. According to the value of `action`, the
        service implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete. In either case, from the
        viewpoint of the client application, it is an error on the server side. Therefore, the service
        implementation should generate a response to the client application with HTTP status of "500 Internal
        Server Error".

        The value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`
        as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 500 Internal Server Error
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        does not contain an access token (= the request from the authorization server implementation to
        Authlete does not contain `token` parameter).

        The value of `responseContent` is a string which describes the error in the format
        of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the
        userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
        header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has
        expired, or is not associated with any subject (= any user account).

        The value of `responseContent` is a string which describes the error in the format of [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
        endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
        header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORBIDDEN**

        When the value of `action` is `FORBIDDEN`, it means that the access token does not include the
        `openid` scope.

        The value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`
        as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 403 Forbidden
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **OK**

        When the value of `action` is `OK`, it means that the access token which the client application
        presented is valid. To be concrete, it means that the access token exists, has not expired, includes
        the openid scope, and is associated with a subject (= a user account).

        What the userinfo endpoint implementation should do next is to collect information about the subject
        (user) from your database. The value of the `subject` is contained in the subject parameter in the
        response from this API and the names of data, i.e., the claims names are contained in the claims
        parameter in the response. For example, if the `subject` parameter is `joe123` and the claims
        parameter is `[ "given_name", "email" ]`, you need to extract information about joe123's given name
        and email from your database.

        Then, call Authlete's `/auth/userinfo/issue` API with the collected information and the access token
        in order to make Authlete generate an ID token.

        If an error occurred during the above steps, generate an error response to the client. The response
        should comply with [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750). For example, if the
        subject associated with the access token does not exist in your database any longer, you may feel
        like generating a response like below.

        ```
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: Bearer error="invalid_token",
         error_description="The subject associated with the access token does not exist."
        Cache-Control: no-store
        Pragma: no-cache
        ```

        Also, an error might occur on database access. If you treat the error as an internal server error,
        then the response would be like the following.

        ```
        HTTP/1.1 500 Internal Server Error
        WWW-Authenticate: Bearer error="server_error",
         error_description="Failed to extract information about the subject from the database."
        Cache-Control: no-store
        Pragma: no-cache
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: |
                    An access token.
                clientCertificate:
                  type: string
                  description: |
                    Client certificate used in the TLS connection established between the client application and the userinfo endpoint.

                    The value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to
                    a client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
                    (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.
                dpop:
                  type: string
                  description: |
                    `DPoP` header presented by the client during the request to the user info endpoint.

                    The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                htm:
                  type: string
                  description: |
                    HTTP method of the user info request. This field is used to validate the DPoP header.
                    In normal cases, the value is either `GET` or `POST`.
                htu:
                  type: string
                  description: |
                    URL of the user info endpoint. This field is used to validate the DPoP header.

                    If this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                uri:
                  type: string
                  description: |
                    The full URL of the userinfo endpoint.
                message:
                  type: string
                  description: |
                    The HTTP message body of the request, if present.
                headers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Pair'
                  description: |
                    HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
                    Signature and Signature-Input headers, as well as any additional headers covered by the signature.
            example:
              token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1userinfo/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - OK
                    description: The next action that the authorization server implementation should take.
                  claims:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of claims that the client application requests to be embedded in the ID token.
                  clientId:
                    type: integer
                    format: int64
                    description: |
                      The ID of the client application which is associated with the access token.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias when the authorization request for the access token was made.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      The flag which indicates whether the client ID alias was used when the authorization
                      request for the access token was made.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation can use as the value of `WWW-Authenticate`
                      header on errors.
                  scopes:
                    type: array
                    items:
                      type: string
                    description: |
                      The scopes covered by the access token.
                  subject:
                    type: string
                    description: |
                      The subject (= resource owner's ID).
                  token:
                    type: string
                    description: |
                      The access token that came along with the userinfo request.
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: |
                      The extra properties associated with the access token.
                  userInfoClaims:
                    type: string
                    description: |
                      The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in an authorization request object.

                      A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                      There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                      In both cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                      Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                      The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.

                      ```json
                      {
                        "userinfo":
                        {
                          "given_name": { "essential": true },
                          "nickname": null,
                          "email": { "essential": true },
                          "email_verified": { "essential": true },
                          "picture": null,
                          "http://example.info/claims/groups": null
                        },
                        "id_token":
                        {
                          "auth_time": { "essential": true },
                          "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                        }
                      }
                      ````

                      The value of this property is the value of the `userinfo` property in JSON format.
                      For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                      ```json
                      {
                        "given_name": { "essential": true },
                        "nickname": null,
                        "email": { "essential": true },
                        "email_verified": { "essential": true },
                        "picture": null,
                        "http://example.info/claims/groups": null
                      }
                      ```

                      Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                      the value of this property holds the former value.
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  consentedClaims:
                    type: array
                    items:
                      type: string
                    description: |
                      the claims that the user has consented for the client application
                      to know.
                  requestedClaimsForTx:
                    type: array
                    items:
                      type: string
                    description: |
                      Get names of claims that are requested indirectly by <i>"transformed
                      claims"</i>.

                      <p>
                      A client application can request <i>"transformed claims"</i> by adding
                      names of transformed claims in the `claims` request parameter.
                      The following is an example of the `claims` request parameter
                      that requests a predefined transformed claim named `18_or_over`
                      and a transformed claim named `nationality_usa` to be embedded
                      in the response from the userinfo endpoint.
                      </p>

                      ```json
                      {
                        "transformed_claims": {
                          "nationality_usa": {
                            "claim": "nationalities",
                            "fn": [
                              [ "eq", "USA" ],
                              "any"
                            ]
                          }
                        },
                        "userinfo": {
                          "::18_or_over": null,
                          ":nationality_usa": null
                        }
                      }
                      ```

                      The example above assumes that a transformed claim named `18_or_over`
                      is predefined by the authorization server like below.

                      ```json
                      {
                        "18_or_over": {
                          "claim": "birthdate",
                          "fn": [
                            "years_ago",
                            [ "gte", 18 ]
                          ]
                        }
                      }
                      ```

                      In the example, the `nationalities` claim is requested indirectly
                      by the `nationality_usa` transformed claim. Likewise, the
                      `birthdate` claim is requested indirectly by the `18_or_over`
                      transformed claim.

                      When the `claims` request parameter of an authorization request is
                      like the example above, this `requestedClaimsForTx` property will
                      hold the following value.

                      ```json
                      [ "birthdate", "nationalities" ]
                      ```

                      It is expected that the authorization server implementation prepares values
                      of the listed claims and passes them as the value of the `claimsForTx`
                      request parameter when it calls the `/api/auth/userinfo/issue` API. The following
                      is an example of the value of the `claimsForTx` request parameter.

                      ```json
                      {
                        "birthdate": "1970-01-23",
                        "nationalities": [ "DEU", "USA" ]
                      }
                      ```
                  requestedVerifiedClaimsForTx:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                    description: |
                      Names of verified claims that will be referenced when transformed claims are computed.
                  transformedClaims:
                    type: string
                    description: |
                      the value of the `transformed_claims` property in the `claims` request
                      parameter of an authorization request or in the `claims` property in a
                      request object.
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
                  dpopNonce:
                    type: string
                    description: |
                      The expected nonce value for DPoP proof JWT, which should be used
                      as the value of the `DPoP-Nonce` HTTP header.
              example:
                resultCode: A091001
                resultMessage: '[A091001] The access token presented at the userinfo endpoint is valid.'
                action: OK
                clientId: '15518267821'
                clientIdAliasUsed: false
                scopes:
                  - openid
                subject: john
                token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_userinfo_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/userinfo \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            UserInfoRequest req = new UserInfoRequest();
            req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

            api.userinfo(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = UserInfoRequest()
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

            api.userinfo(req)
      tags:
        - UserInfo Endpoint
  '/api/{serviceId}/auth/userinfo/issue':
    post:
      summary: Issue UserInfo Response
      description: |
        This API generates an ID token.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        of the authorization server in order to generate an ID token. Before calling this API, a valid
        response from `/auth/userinfo` API must be obtained. Then, call this API with the access token
        contained in the response and the claims values of the user (subject) associated with the access
        token. See **OK** written in the description of `/auth/userinfo` API for details.

        The response from `/auth/userinfo/issue` API has various parameters. Among them, it is `action`
        parameter that the authorization server implementation should check first because it denotes the
        next action that the authorization server implementation should take. According to the value of
        `action`, the service implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete. In either case, from the
        viewpoint of the client application, it is an error on the server side. Therefore, the service
        implementation should generate a response to the client application with HTTP status of "500 Internal
        Server Error".

        The parameter `responseContent` returns a string which describes the error in the format of [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
        endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
        header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 500 Internal Server Error
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        does not contain an access token (= the request from the authorization server implementation to
        Authlete does not contain `token` parameter).

        The parameter `responseContent` returns a string which describes the error in the format of [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
        endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
        header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has
        expired, or is not associated with any subject (= any user account).

        The parameter `responseContent` returns a string which describes the error in the format of [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
        endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
        header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORBIDDEN**

        When the value of `action` is `FORBIDDEN`, it means that the access token does not include the
        `openid` scope.

        The parameter `responseContent` returns a string which describes the error in the format of [RFC
        6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
        endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
        header.

        The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
        1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
        Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```
        HTTP/1.1 403 Forbidden
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **JSON**

        When the value of `action` is `JSON`, it means that the access token which the client application
        presented is valid and an ID token was successfully generated in the format of JSON.

        The userinfo endpoint implementation is expected to generate a response to the client application.
        The content type of the response must be `application/json` and the response body must be an ID
        token in JSON format.

        The value of `responseContent` is the ID token in JSON format when `action` is `JSON`, so
        a response to the client can be built like below.

        ```
        HTTP/1.1 200 OK
        Cache-Control: no-store
        Pragma: no-cache
        Content-Type: application/json;charset=UTF-8

        {responseContent}
        ```

        **JWT**

        When the value of `action` is `JWT`, it means that the access token which the client application
        presented is valid and an ID token was successfully generated in the format of JWT (JSON Web Token)
        ([RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519)).

        The userinfo endpoint implementation is expected to generate a response to the client application.
        The content type of the response must be `application/jwt` and the response body must be an ID
        token in JWT format.

        The value of `responseContent` is the ID token in JSON format when `action` is `JWT`, so a response
        to the client can be built like below.

        ```
        HTTP/1.1 200 OK
        Cache-Control: no-store
        Pragma: no-cache
        Content-Type: application/jwt

        {responseContent}
        ```

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: |
                    The access token that has been passed to the userinfo endpoint by the client application. In other words,
                    the access token which was contained in the userinfo request.
                claims:
                  type: string
                  description: |
                    Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
                sub:
                  type: string
                  description: |
                    The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
                    the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
                claimsForTx:
                  type: string
                  description: |
                    Claim key-value pairs that are used to compute transformed claims.
                requestSignature:
                  type: string
                  description: |
                    The Signature header value from the request.
                headers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Pair'
                  description: |
                    HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
                    Signature and Signature-Input headers, as well as any additional headers covered by the signature.
            example:
              token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1userinfo~1issue/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                description: ''
                content:
                  application/json:
                    schema: null
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - JSON
                      - OK
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation can use as the value of `WWW-Authenticate`
                      header on errors.
                  signature:
                    type: string
                    description: |
                      The signature header of the response message.
                  signatureInput:
                    type: string
                    description: |
                      The signature-input header of the response message
                  contentDigest:
                    type: string
                    description: |
                      The content-digest header of the response message
              example:
                resultCode: A096001
                resultMessage: '[A096001] An ID token was generated successfully.'
                action: JSON
                responseContent: '{\"exp\":1511600971,\"sub\":\"john\",\"aud\":[\"26478243745571\"],\"iss\":\"https://authlete.com\",\"iat\":1511514571}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_userinfo_issue_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/userinfo/issue \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            UserInfoIssueRequest req = new UserInfoIssueRequest();
            req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

            api.userinfoIssue(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = UserInfoIssueRequest()
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

            api.userinfoIssue(req)
      tags:
        - UserInfo Endpoint
  '/api/{serviceId}/idtoken/reissue':
    post:
      summary: Reissue ID Token
      description: |
        The API is expected to be called only when the value of the `action`
        parameter in a response from the `/auth/token` API is [ID_TOKEN_REISSUABLE](https://authlete.github.io/authlete-java-common/com/authlete/common/dto/TokenResponse.Action.html#ID_TOKEN_REISSUABLE). The purpose
        of the `/idtoken/reissue` API is to generate a token response that
        includes a new ID token together with a new access token and a refresh
        token.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
                - refreshToken
              properties:
                accessToken:
                  type: string
                  description: |
                    <p>
                    The value of this parameter should be (a) the value of the
                    "`jwtAccessToken`" parameter in a response from the
                    `/auth/token` API when the value is available, or (b)
                    the value of the "`accessToken`" parameter in the
                    response from the `/auth/token` API when the value of
                    the "`jwtAccessToken`" parameter is not available.
                    </p>
                refreshToken:
                  type: string
                  description: |
                    <p>
                    The value of this parameter should be the value of the
                    "`refreshToken`" parameter in a response from the
                    `/auth/token` API.
                    </p>
                sub:
                  type: string
                  description: |
                    The value that should be used as the value of the "`sub`"
                    claim of the ID token.

                    <p>
                    This parameter is optional. When omitted, the value of the subject
                    associated with the access token is used.
                    </p>
                claims:
                  type: string
                  description: |
                    Additional claims that should be embedded in the payload part of
                    the ID token. The format is a JSON object.

                    <p>
                    This parameter is optional.
                    </p>
                idtHeaderParams:
                  type: string
                  description: |
                    Additional parameters that should be embedded in the JWS header of
                    the ID token. The format is a JSON object.

                    <p>
                    This parameter is optional.
                    </p>
                idTokenAudType:
                  type: string
                  description: |
                    The type of the "`aud`" claim of the ID token being issued.

                    <p>
                    Valid values of this parameter are as follows.
                    </p>

                    <blockquote>
                    <table border="1" cellpadding="5" style="border-collapse: collapse;">
                      <tr bgcolor="orange">
                        <th>Value</th>
                        <th>Description</th>
                      </tr>
                      <tr>
                        <td>"`array`"</td>
                        <td>The type of the `aud` claim becomes an array of strings.</td>
                      </tr>
                      <tr>
                        <td>"`string`"</td>
                        <td>The type of the `aud` claim becomes a single string.</td>
                      </tr>
                    </table>
                    </blockquote>

                    <p>
                    This parameter is optional, and the default value on omission is
                    "`array`".
                    </p>

                    <p>
                    This parameter takes precedence over the `idTokenAudType` property
                    of {@link Service} (cf. {@link Service#getIdTokenAudType()}).
                    </p>
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - INTERNAL_SERVER_ERROR
                      - CALLER_ERROR
                    description: The next action that the implementation of the token endpoint should take.
                  responseContent:
                    type: string
                    description: |
                      The response content that can be used as the message body of the token response that should
                      be returned from the token endpoint.
                  idToken:
                    type: string
                    description: |
                      The reissued ID token
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: idtoken_reissue_api
      tags:
        - Token Endpoint
  '/api/{serviceId}/gm':
    post:
      summary: Process Grant Management Request
      description: |
        The API is for the implementation of the grant management endpoint which is
        defined in "<a href="https://openid.net/specs/fapi-grant-management.html">Grant Management for OAuth 2.0</a>".
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                accessToken:
                  type: string
                  description: An access token to introspect.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    A string array listing names of scopes which the caller (= a protected resource endpoint of the
                    service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
                    the format of `scopes` is a space-separated list of scope names.

                    If this parameter is a non-empty array and if it contains a scope which is not covered by the
                    access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
                subject:
                  type: string
                  description: |
                    A subject (= a user account managed by the service) whom the caller (= a protected resource
                    endpoint of the service) requires.

                    If this parameter is not `null` and if the value does not match the subject who is associated
                    with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
                clientCertificate:
                  type: string
                  description: |
                    Client certificate in PEM format, used to validate binding against access tokens using the TLS
                    client certificate confirmation method.
                dpop:
                  type: string
                  description: |
                    `DPoP` header presented by the client during the request to the resource server.

                    The header contains a signed JWT which includes the public key that is paired with the private
                    key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
                    Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
                htm:
                  type: string
                  description: |
                    HTTP method of the request from the client to the protected resource endpoint. This field is
                    used to validate the `DPoP` header.

                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                htu:
                  type: string
                  description: |
                    URL of the protected resource endpoint. This field is used to validate the `DPoP` header.

                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.
                resources:
                  type: array
                  items:
                    type: string
                  description: |
                    The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
                gmAction:
                  type: string
                  description: |
                    The grant management action of the device authorization request.

                    The `grant_management_action` request parameter is defined in
                    [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
                  enum:
                    - CREATE
                    - QUERY
                    - REPLACE
                    - REVOKE
                    - MERGE
                grantId:
                  type: string
                  description: |
                    The value of the `grant_id` request parameter of the device authorization request.

                    The `grant_id` request parameter is defined in
                    [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                    , which is supported by Authlete 2.3 and newer versions.
            example:
              accessToken: eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA
              subject: '123457884'
              grantId: '57297408867'
              gmAction: REVOKE
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - NO_CONTENT
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - NOT_FOUND
                      - CALLER_ERROR
                      - AUTHLETE_ERROR
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
                  dpopNonce:
                    type: string
                    description: |
                      Get the expected nonce value for DPoP proof JWT, which should be used
                      as the value of the `DPoP-Nonce` HTTP header.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: grant_m_api
      tags:
        - Grant Management Endpoint
  '/api/{serviceId}/service/jwks/get':
    get:
      summary: Get JWK Set
      description: |
        This API gathers JWK Set information for a service so that its client applications can verify
        signatures by the service and encrypt their requests to the service.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the jwk set endpoint of the
        service where the service that supports OpenID Connect must expose its JWK Set information so that
        client applications can verify signatures by the service and encrypt their requests to the service.
        The URI of the endpoint can be found as the value of `jwks_uri` in [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)
        if the service supports [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html).

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: query
          name: includePrivateKeys
          schema:
            type: boolean
          required: false
          description: 'The boolean value that indicates whether the response should include the private keys associated with the service or not. If `true`, the private keys are included in the response. The default value is `false`.'
        - in: query
          name: pretty
          schema:
            type: boolean
          required: false
          description: 'This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      description: |
                        An object representing JWK. See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more details.
                    description: 'An array of [JWK](https://datatracker.ietf.org/doc/html/rfc7517)s.'
              example:
                keys:
                  - e: AQAB
                    'n': kVXi0XB8LGYZfFPXymaszWjBQsO22tasQH3PEiPeLSymBHbp7PtqM8O8xblqhbxV-24lKNs2zDugQaBiVt4zpalyYxL5kqnfY247priZRfmeUatdECh81T-i3VcLpz_M5yfljfVp3sFdaURUQNA3ow9VtUfvPIxN_9YIxXN1zP2nLP5amC2XA8xMt5iubRwbbPbrLyg69zTOzosDVhRTSs5adHK5HNwVn8wCCZPbU7u1cQD8hFNn8xlQcmOmJjSXUQ9slBpLc7G-dUEOI59RxiPd4R44GtSe8gA1WFXvOAdtGjivSm8BAbxuNO8HFtDJmpVl9YsDr9FsxirFl9ZPKs
                    kty: RSA
                    use: sig
                    kid: rsa-sig-001
                  - e: AQAB
                    'n': lQui3_DlrkLs_dyaOQBOclphIIRTTMo0gNlnAgfEM9xjbYQJQzi0CLtO6eseecE3HtvDBWVTw-rMM_NMJTlPTO0_ODWvmJRjXy9DZGEm05LFd_qr6jZ7cdOvjD7zUC3GI9TIokPbjGzueBPJjtAvv_tAazRFCQQfiFy7sQR3u-J4tM8fNo9szo9H09R_eA29llZ3hU39JDKs9nzG60I1mVZtJYPx0_bnO8eYeVDHqoj4SZ4jeru3iX9iDeccH_cDm3M87UomUh-Ri4LlAxXgewDvOaPxAef9ADkDvBVmRo5t60_PJxQ3Tug2EKK-xF1_T7I4TxgS7ga8entMmCxLca
                    kty: RSA
                    use: enc
                    kid: rsa-enc-001
                  - crv: P-256
                    kty: EC
                    use: sig
                    'y': 824At71mYpbGK2oOCKAL1Z2scLPrbVwhM882v3a9gBq
                    x: ZXE3h9BxCyyb_Z9ZJ5qH4Vx650y09qwI1EpZO4o4OmL
                    kid: ec256-sig-001
                  - crv: P-256
                    kty: EC
                    use: enc
                    'y': j80Y3leZHHnxC_gN-Ols_l_VfEBQkfGDFFDG5LNJKMl
                    x: xAdEkaExYWGGAC1xYjwxzvqcaCyDloylZk04yiE9_OF
                    kid: ec256-enc-001
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: service_jwks_get_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/service/jwks/get?pretty=true \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            boolean pretty = true;
            boolean includePrivateKey = false;

            api.getServiceJwks(pretty, includePrivateKey);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            pretty = True
            includePrivateKey = False

            api.getServiceJwks(pretty, includePrivateKey)
      tags:
        - JWK Set Endpoint
  '/api/{serviceId}/service/configuration':
    get:
      summary: Get Service Configuration
      description: |
        This API gathers configuration information about a service.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the configuration endpoint of
        the service where the service that supports OpenID Connect and [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html)
        must expose its configuration information in a JSON format. Details about the format are described
        in "[3. OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)"
        in OpenID Connect Discovery 1.0.

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: query
          name: pretty
          schema:
            type: boolean
          required: false
          description: 'This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.'
        - in: query
          name: patch
          schema:
            type: string
          required: false
          description: 'Get the JSON Patch [RFC 6902 JavaScript Object Notation (JSON) Patch](https://www.rfc-editor.org/rfc/rfc6902) to be applied.'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: |
                  An object representing OpenID Provider configuration information. See [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) and [OpenID Provider Configuration Response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse) for more details.
              example:
                issuer: 'https://my-service.example.com'
                authorization_endpoint: 'https://my-service.example.com/authz'
                token_endpoint: 'https://my-service.example.com/token'
                scopes_supported:
                  - history.read
                  - timeline.read
                response_types_supported:
                  - code
                response_modes_supported:
                  - query
                  - fragment
                  - form_post
                  - query.jwt
                  - fragment.jwt
                  - form_post.jwt
                  - jwt
                grant_types_supported:
                  - authorization_code
                  - password
                  - refresh_token
                subject_types_supported:
                  - public
                  - pairwise
                id_token_signing_alg_values_supported:
                  - HS256
                  - HS384
                  - HS512
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                id_token_encryption_alg_values_supported:
                  - RSA1_5
                  - RSA-OAEP
                  - RSA-OEAP-256
                  - ECDH-ES
                  - ECDH-ES+A128KW
                  - ECDH-ES+A192KW
                  - ECDH-ES+A256KW
                  - A128KW
                  - A192KW
                  - A256KW
                  - dir
                  - A128GCMKW
                  - A192GCMKW
                  - A256GCMKW
                  - PBES2-HS256+A128KW
                  - PBES2-HS384+A192KW
                  - PBES2-HS512+A256KW
                id_token_encryption_enc_values_supported:
                  - A128CBC-HS256
                  - A192CBC-HS384
                  - A256CBC-HS512
                  - A128GCM
                  - A192GCM
                  - A256GCM
                userinfo_signing_alg_values_supported:
                  - HS256
                  - HS384
                  - HS512
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                  - none
                userinfo_encryption_alg_values_supported:
                  - RSA1_5
                  - RSA-OAEP
                  - RSA-OEAP-256
                  - ECDH-ES
                  - ECDH-ES+A128KW
                  - ECDH-ES+A192KW
                  - ECDH-ES+A256KW
                  - A128KW
                  - A192KW
                  - A256KW
                  - dir
                  - A128GCMKW
                  - A192GCMKW
                  - A256GCMKW
                  - PBES2-HS256+A128KW
                  - PBES2-HS384+A192KW
                  - PBES2-HS512+A256KW
                userinfo_encryption_enc_values_supported:
                  - A128CBC-HS256
                  - A192CBC-HS384
                  - A256CBC-HS512
                  - A128GCM
                  - A192GCM
                  - A256GCM
                request_object_signing_alg_values_supported:
                  - HS256
                  - HS384
                  - HS512
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                request_object_encryption_alg_values_supported:
                  - RSA1_5
                  - RSA-OAEP
                  - RSA-OEAP-256
                  - ECDH-ES
                  - ECDH-ES+A128KW
                  - ECDH-ES+A192KW
                  - ECDH-ES+A256KW
                  - A128KW
                  - A192KW
                  - A256KW
                  - dir
                  - A128GCMKW
                  - A192GCMKW
                  - A256GCMKW
                  - PBES2-HS256+A128KW
                  - PBES2-HS384+A192KW
                  - PBES2-HS512+A256KW
                request_object_encryption_enc_values_supported:
                  - A128CBC-HS256
                  - A192CBC-HS384
                  - A256CBC-HS512
                  - A128GCM
                  - A192GCM
                  - A256GCM
                authorization_signing_alg_values_supported:
                  - HS256
                  - HS384
                  - HS512
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                authorization_encryption_alg_values_supported:
                  - RSA1_5
                  - RSA-OAEP
                  - RSA-OEAP-256
                  - ECDH-ES
                  - ECDH-ES+A128KW
                  - ECDH-ES+A192KW
                  - ECDH-ES+A256KW
                  - A128KW
                  - A192KW
                  - A256KW
                  - dir
                  - A128GCMKW
                  - A192GCMKW
                  - A256GCMKW
                  - PBES2-HS256+A128KW
                  - PBES2-HS384+A192KW
                  - PBES2-HS512+A256KW
                authorization_encryption_enc_values_supported:
                  - A128CBC-HS256
                  - A192CBC-HS384
                  - A256CBC-HS512
                  - A128GCM
                  - A192GCM
                  - A256GCM
                token_endpoint_auth_methods_supported:
                  - client_secret_basic
                token_endpoint_auth_signing_alg_values_supported:
                  - HS256
                  - HS384
                  - HS512
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                display_values_supported:
                  - page
                claim_types_supported:
                  - normal
                claims_parameter_supported: true
                request_parameter_supported: true
                request_uri_parameter_supported: true
                require_request_uri_registration: true
                revocation_endpoint: 'https://my-service.example.com/revocation'
                revocation_endpoint_auth_methods_supported: []
                revocation_endpoint_auth_signing_alg_values_supported:
                  - HS256
                  - HS384
                  - HS512
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                introspection_endpoint: 'https://my-service.example.com/introspection'
                introspection_endpoint_auth_methods_supported: []
                introspection_endpoint_auth_signing_alg_values_supported:
                  - HS256
                  - HS384
                  - HS512
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                code_challenge_methods_supported:
                  - plain
                  - S256
                tls_client_certificate_bound_access_tokens: false
                backchannel_token_delivery_modes_supported: []
                backchannel_authentication_request_signing_alg_values_supported:
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                backchannel_user_code_parameter_supported: false
                require_pushed_authorization_requests: false
                authorization_details_supported: true
                verified_claims_supported: false
                dpop_signing_alg_values_supported:
                  - RS256
                  - RS384
                  - RS512
                  - PS256
                  - PS384
                  - PS512
                  - ES256
                  - ES384
                  - ES512
                  - ES256K
                  - EdDSA
                require_signed_request_object: false
                authorization_response_iss_parameter_supported: true
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: service_configuration_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/service/configuration?pretty=true \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            api.getServiceConfiguration(true);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            api.getServiceConfiguration(True)
      tags:
        - Service Management
  '/api/{serviceId}/client/registration':
    post:
      summary: Register Client
      description: |
        Register a client. This API is supposed to be used to implement a client registration endpoint that
        complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591) (OAuth 2.0 Dynamic Client
        Registration Protocol).

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from the within the implementation of the client registration
        endpoint of the authorization server. The authorization server implementation should retrieve
        the value of `action` from the response and take the following steps according to the value.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from a viewpoint of the client or developer, it is an error on the server side.
        Therefore, the authorization server implementation should generate a response with "500 Internal
        Server Error"s and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client or developer since
        "500 Internal Server Error" is not required by the specification.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer
        was wrong.

        The authorization server implementation should generate a response with "400 Bad Request" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **CREATED**

        When the value of `action` is `CREATED`, it means that the request from the client or developer is
        valid.

        The authorization server implementation should generate a response to the client or developer with
        "201 CREATED" and `application/json`.

        The `responseContent` a JSON string which can be used as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 201 CREATED
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - json
              properties:
                json:
                  type: string
                  description: |
                    Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
                    (OAuth 2.0 Dynamic Client Registration Protocol).
                token:
                  type: string
                  description: |
                    The client registration access token. Used only for GET, UPDATE, and DELETE requests.
                clientId:
                  type: string
                  description: |
                    The client's identifier. Used for GET, UPDATE, and DELETE requests
            example:
              json: '{ "client_name": "My Dynamic Client" }'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1registration/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - CREATED
                    description: |
                      The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
                  client:
                    $ref: '#/components/schemas/Client'
              example:
                resultCode: A202001
                resultMessage: '[A202001] The client was created with id 26837717140341.'
                action: CREATED
                client:
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26837717140341
                  clientIdAliasEnabled: false
                  clientName: My Dynamic Client
                  clientSecret: bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw
                  clientType: CONFIDENTIAL
                  createdAt: 1641735467000
                  defaultMaxAge: 0
                  developer: authlete_21653835348762
                  dynamicallyRegistered: true
                  frontChannelRequestObjectEncryptionRequired: false
                  idTokenSignAlg: RS256
                  modifiedAt: 1641735467013
                  number: 6248
                  parRequired: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                responseContent: '{\"default_max_age\":0,\"registration_client_uri\":\"https://my-service.example.com/dcr/register/26837717140341\",\"registration_access_token\":\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\",\"client_id\":\"26837717140341\",\"token_endpoint_auth_method\":\"client_secret_basic\",\"require_pushed_authorization_requests\":false,\"backchannel_user_code_parameter\":false,\"client_secret\":\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\",\"client_id_issued_at\":1641735467,\"tls_client_certificate_bound_access_tokens\":false,\"client_name\":\"My Dynamic Client\",\"id_token_signed_response_alg\":\"RS256\",\"subject_type\":\"public\",\"client_secret_expires_at\":0,\"require_signed_request_object\":false}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_registration_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "json": "{ \"client_name\": \"My Dynamic Client\" }" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            ClientRegistrationRequest req = new ClientRegistrationRequest();
            req.setJson(...);

            api.dynamicClientRegister(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = new ClientRegistrationRequest()
            req.json = '...'

            api.dynamicClientRegister(req)
      tags:
        - Dynamic Client Registration
  '/api/{serviceId}/client/registration/get':
    post:
      summary: Get Client
      description: |
        Get a dynamically registered client. This API is supposed to be used to implement a client registration
        management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)
        (OAuth 2.0 Dynamic Registration Management).

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from the within the implementation of the client registration
        management endpoint of the authorization server. The authorization server implementation should
        retrieve the value of `action` from the response and take the following steps according to the value.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from a viewpoint of the client or developer, it is an error on the server side.
        Therefore, the authorization server implementation should generate a response to the client or developer
        with "500 Internal Server Error"s and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client or developer since
        "500 Internal Server Error" is not required by the specification.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer
        was wrong.

        The authorization server implementation should generate a response to the client or developer with
        "400 Bad Request" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by
        the client configuration request (RFC 7592) is invalid, or the client application which the token
        is tied to does not exist any longer or is invalid.

        The HTTP status of the response returned to the client application must be "401 Unauthorized" and
        the content type must be `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the endpoint implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 401 Unauthorized
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of
        `Service.unauthorizedOnClientConfigSupported` for details.

        **OK**

        When the value of `action` is `OK`, it means that the request from the client or developer is valid.

        The authorization server implementation should generate a response to the client or developer with
        "200 OK" and `application/json`.

        The `responseContent` a JSON string which can be used as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1registration/post/requestBody/content/application~1json/schema'
            example:
              clientId: '26837717140341'
              token: qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1registration/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1registration/post/responses/200/content/application~1json/schema'
              example:
                resultCode: A217001
                resultMessage: '[A217001] The client information has been returned.'
                action: OK
                client:
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26837717140341
                  clientIdAliasEnabled: false
                  clientName: My Dynamic Client
                  clientSecret: bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw
                  clientType: CONFIDENTIAL
                  createdAt: 1641735467000
                  defaultMaxAge: 0
                  developer: authlete_21653835348762
                  dynamicallyRegistered: true
                  frontChannelRequestObjectEncryptionRequired: false
                  idTokenSignAlg: RS256
                  modifiedAt: 1641735467000
                  number: 6248
                  parRequired: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                responseContent: '{\"default_max_age\":0,\"registration_client_uri\":\"https://my-service.example.com/dcr/register/26837717140341\",\"registration_access_token\":\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\",\"client_id\":\"26837717140341\",\"token_endpoint_auth_method\":\"client_secret_basic\",\"require_pushed_authorization_requests\":false,\"backchannel_user_code_parameter\":false,\"client_secret\":\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\",\"client_id_issued_at\":1641735467,\"tls_client_certificate_bound_access_tokens\":false,\"client_name\":\"My Dynamic Client\",\"id_token_signed_response_alg\":\"RS256\",\"subject_type\":\"public\",\"client_secret_expires_at\":0,\"require_signed_request_object\":false}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_registration_get_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration/get \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "clientId": "26837717140341", "token": "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            ClientRegistrationRequest req = new ClientRegistrationRequest();
            req.setClientId("26837717140341");
            req.setToken("qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA");

            api.dynamicClientGet(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = new ClientRegistrationRequest()
            req.clientId = '26837717140341'
            req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'

            api.dynamicClientGet(req)
      tags:
        - Dynamic Client Registration
  '/api/{serviceId}/client/registration/update':
    post:
      summary: Update Client
      description: |
        Update a dynamically registered client. This API is supposed to be used to implement a client
        registration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)
        (OAuth 2.0 Dynamic Registration Management).

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from the within the implementation of the client registration
        management endpoint of the authorization server. The authorization server implementation should
        retrieve the value of `action` from the response and take the following steps according to the value.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from a viewpoint of the client or developer, it is an error on the server side.
        Therefore, the authorization server implementation should generate a response with "500 Internal
        Server Error"s and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client or developer since
        "500 Internal Server Error" is not required by the specification.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer
        was wrong.

        The authorization server implementation should generate a response with "400 Bad Request" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by
        the client configuration request (RFC 7592) is invalid, or the client application which the token
        is tied to does not exist any longer or is invalid.

        The HTTP status of the response returned to the client application must be "401 Unauthorized" and
        the content type must be `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the endpoint implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 401 Unauthorized
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of
        `Service.unauthorizedOnClientConfigSupported` for details.

        **UPDATED**

        When the value of `action` is `UPDATED`, it means that the request from the client or developer is
        valid.

        The authorization server implementation should generate a response to the client or developer with
        "200 OK" and `application/json`.

        The `responseContent` a JSON string which can be used as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - clientId
                - token
                - json
              properties:
                clientId:
                  type: string
                  description: |
                    Client ID.
                token:
                  type: string
                  description: |
                    Client registration access token.
                json:
                  type: string
                  description: |
                    Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
                    (OAuth 2.0 Dynamic Client Registration Protocol).
            example:
              clientId: '26837717140341'
              token: qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA
              json: '{"client_name":"My Updated Dynamic Client","default_max_age":0,"registration_client_uri":"https://my-service.example.com/dcr/register/26837717140341","client_id":"26837717140341","token_endpoint_auth_method":"client_secret_basic","require_pushed_authorization_requests":false,"backchannel_user_code_parameter":false,"client_secret":"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw","tls_client_certificate_bound_access_tokens":false,"id_token_signed_response_alg":"RS256","subject_type":"public","require_signed_request_object":false}'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1registration~1update/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - UPDATED
                      - UNAUTHORIZED
                    description: |
                      The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
                  client:
                    $ref: '#/components/schemas/Client'
              example:
                resultCode: A213001
                resultMessage: '[A213001] The client has been updated.'
                action: UPDATED
                client:
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26837717140341
                  clientIdAliasEnabled: false
                  clientName: My Updated Dynamic Client
                  clientSecret: bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw
                  clientType: CONFIDENTIAL
                  createdAt: 1641735467000
                  defaultMaxAge: 0
                  developer: authlete_21653835348762
                  dynamicallyRegistered: true
                  frontChannelRequestObjectEncryptionRequired: false
                  idTokenSignAlg: RS256
                  modifiedAt: 1641826276936
                  number: 6248
                  parRequired: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                responseContent: '{\"default_max_age\":0,\"registration_client_uri\":\"https://my-service.example.com/dcr/register/26837717140341\",\"registration_access_token\":\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\",\"client_id\":\"26837717140341\",\"token_endpoint_auth_method\":\"client_secret_basic\",\"require_pushed_authorization_requests\":false,\"backchannel_user_code_parameter\":false,\"client_secret\":\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\",\"client_id_issued_at\":1641735467,\"tls_client_certificate_bound_access_tokens\":false,\"client_name\":\"My Updated Dynamic Client\",\"id_token_signed_response_alg\":\"RS256\",\"subject_type\":\"public\",\"client_secret_expires_at\":0,\"require_signed_request_object\":false}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_registration_update_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration/update \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "clientId": "26837717140341", "token": "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA", "json": "..." }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            ClientRegistrationRequest req = new ClientRegistrationRequest();
            req.setClientId("26837717140341");
            req.setToken("qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA");
            req.setJson("...");

            api.dynamicClientUpdate(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = new ClientRegistrationRequest()
            req.clientId = '26837717140341'
            req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'
            req.json = '...'

            api.dynamicClientUpdate(req)
      tags:
        - Dynamic Client Registration
  '/api/{serviceId}/client/registration/delete':
    post:
      summary: Delete Client
      description: |
        Delete a dynamically registered client. This API is supposed to be used to implement a client
        registration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)
        (OAuth 2.0 Dynamic Registration Management).

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from the within the implementation of the client registration
        management endpoint of the authorization server. The authorization server implementation should
        retrieve the value of `action` from the response and take the following steps according to the value.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from a viewpoint of the client or developer, it is an error on the server side.
        Therefore, the authorization server implementation should generate a response with "500 Internal
        Server Error"s and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client or developer since
        "500 Internal Server Error" is not required by the specification.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer
        was wrong.

        The authorization server implementation should generate a response with "400 Bad Request" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by
        the client configuration request (RFC 7592) is invalid, or the client application which the token
        is tied to does not exist any longer or is invalid.

        The HTTP status of the response returned to the client application must be "401 Unauthorized" and
        the content type must be `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the endpoint implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 401 Unauthorized
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of
        `Service.unauthorizedOnClientConfigSupported` for details.

        **DELETED**

        When the value of `action` is `DELETED`, it means that the request from the client or developer is
        valid.

        The authorization server implementation should generate a response to the client or developer with
        "204 No Content".

        The following illustrates the response which the authorization server implementation should generate
        and return to the client or developer.

        ```
        HTTP/1.1 204 No Content
        Cache-Control: no-store
        Pragma: no-cache
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - clientId
                - token
              properties:
                clientId:
                  type: string
                  description: |
                    Client ID.
                token:
                  type: string
                  description: |
                    Client registration access token.
            example:
              clientId: '26837717140341'
              token: qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1client~1registration~1delete/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - DELETED
                      - UNAUTHORIZED
                    description: |
                      The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
                  client:
                    $ref: '#/components/schemas/Client'
              example:
                resultCode: A216001
                resultMessage: '[A216001] The client has been deleted.'
                action: DELETED
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_registration_delete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration/delete \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "clientId": "26837717140341", "token": "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA"}'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            ClientRegistrationRequest req = new ClientRegistrationRequest();
            req.setClientId("26837717140341");
            req.setToken("qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA");

            api.dynamicClientDelete(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = new ClientRegistrationRequest()
            req.clientId = '26837717140341'
            req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'

            api.DynamicClientDelete(req)
      tags:
        - Dynamic Client Registration
  '/api/{serviceId}/backchannel/authentication':
    post:
      summary: Process Backchannel Authentication Request
      description: |
        This API parses request parameters of a [backchannel authentication request](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_request)
        and returns necessary data for the authorization server implementation to process the backchannel
        authentication request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the [backchannel authentication
        endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)
        of the service. The endpoint implementation must extract the request parameters from the
        backchannel authentication request from the client application and pass them as the value of parameters
        request parameter for Authlete's `/backchannel/authentication` API.

        The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
        of the request from the client application.

        The following code snippet is an example in JAX-RS showing how to extract request parameters from
        the backchannel authentication request.

        ```java
        @POST
        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
        public Response post(String parameters)
        {
            // 'parameters' is the entity body of the backchannel authentication request.
            ......
        }
        ```

        The endpoint implementation does not have to parse the request parameters from the client application
        because Authlete's `/backchannel/authentication` API does it.

        The response from `/backchannel/authentication` API has various parameters. Among them, it is `action`
        parameter that the authorization server implementation should check first because it denotes the
        next action that the authorization server implementation should take. According to the value of
        `action`, the service implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used
        as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        is invalid.

        The authorization server implementation should generate a response to the client application with
        "400 Bad Request" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that client authentication of the backchannel
        authentication request failed. Note that client authentication is always required at the backchannel
        authentication endpoint. This implies that public clients are not allowed to use the backchannel
        authentication endpoint.

        The authorization server implementation should generate a response to the client application with
        "401 Unauthorized" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: (challenge)
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **USER_IDENTIFICATION**

        When the value of `action` is `USER_IDENTIFICATION`, it means that the backchannel authentication
        request from the client application is valid. The authorization server implementation has to follow
        the steps below.

        [1] END-USER IDENTIFICATION

        The first step is to determine the subject (= unique identifier) of the end-user from whom the
        client application wants to get authorization.

        According to the CIBA specification, a backchannel authentication request contains one (and only
        one) of the `login_hint_token`, `id_token_hint` and `login_hint` request parameters as a hint
        by which the authorization server identifies the subject of an end-user.<br>
        The authorization server implementation can know which hint is included in the backchannel authentication
        request by the `hintType` parameter. For example, when the value of the parameter `LOGIN_HINT`,
        it means that the backchannel authentication request contains the `login_hint` request parameter
        as a hint.<br>

        The value of the `hint` parameter is the value of the hint. For example, when the value of the
        `hintType` parameter is `LOGIN_HINT`, The value of the `hint` parameter is the value of the `login_hint`
        request parameter.<br>

        It is up to the authorization server implementation how to determine the subject of the end-user
        from the hint. Only when the `id_token_hint` request parameter is used, authorization server
        implementation can use the sub response parameter, which holds the value of the sub claim in the
        `id_token_hint` request parameter.

        [2] END-USER IDENTIFICATION ERROR

        There are some cases where the authorization server implementation encounters an error during
        the user identification process. In any error case, the service implementation has to return an
        HTTP response with the error response parameter to the client application. The following is an
        example of such error responses.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        { "error":"unknown_user_id" }
        ```

        Authlete provides `/backchannel/authentication/fail` API that builds the response body (JSON)
        of an error response. However, because it is easy to build an error response manually, you may
        choose not to call the API. One good thing in using the API is that the API call can trigger
        deletion of the ticket which has been issued from Authlete's `/backchannel/authentication` API.
        If you don't call `/backchannel/authentication/fail` API, the ticket will continue to exist in
        the database until it is cleaned up by the batch program after the ticket expires.<br>

        Possible error cases that the authorization server implementation itself has to handle are as
        follows. Other error cases have already been covered by `/backchannel/authentication` API.

        - <u>`expired_login_hint_token`</u><br>
          The authorization server implementation detected that the hint presented by the `login_hint_token`
          request parameter has expired.

          Note that the format of `login_hint_token` is not described in the CIBA Core spec at all and
          so there is no consensus on how to detect expiration of `login_hint_token`. Interpretation
          of `login_hint_token` is left to each authorization server implementation.

        - <u>`unknown_user_id`</u><br>
          The authorization server implementation could not determine the subject of the end-user by
          the presented hint.

        - <u>`unauthorized_client`</u><br>
          The authorization server implementation has custom rules to reject backchannel authentication
          requests from some particular clients and found that the client which has made the backchannel
          authentication request is one of the particular clients.

          Note that `/backchannel/authentication` API does not return `action=USER_IDENTIFICATION` in
          cases where the client does not exist or client authentication has failed. Therefore, the
          authorization server implementation will never have to use the error code `unauthorized_client`
          unless the server has intentionally implemented custom rules to reject backchannel authentication
          requests based on clients.

        - <u>`missing_user_code`</u><br>
          The authorization server implementation has custom rules to require that a backchannel authentication
          request include a user code for some particular users and found that the user identified by
          the hint is one of the particular users.

          Note that `/backchannel/authentication` API does not return `action=USER_IDENTIFICATION` when
          both the `backchannel_user_code_parameter_supported` metadata of the server and the
          `backchannel_user_code_parameter` metadata of the client are true and the backchannel authentication
          request does not include the user_code request parameter. In this case, `/backchannel/authentication`
          API returns action=BAD_REQUEST with JSON containing `"error":"missing_user_code"`. Therefore,
          the authorization server implementation will never have to use the error code `missing_user_code`
          unless the server has intentionally implemented custom rules to require a user code based
          on users even in the case where the `backchannel_user_code_parameter` metadata of the client
          which has made the backchannel authentication request is `false`.

        - <u>`invalid_user_code`</u><br>
          The authorization server implementation detected that the presented user code is invalid.

          Note that the format of user_code is not described in the CIBA Core spec at all and so there
          is no consensus on how to judge whether a user code is valid or not. It is up to each authorization
          server implementation how to handle user codes.

        - <u>`invalid_binding_message`</u><br>
          The authorization server implementation detected that the presented binding message is invalid.

          Note that the format of binding_message is not described in the CIBA Core spec at all and
          so there is no consensus on how to judge whether a binding message is valid or not. It is
          up to each authorization server implementation how to handle binding messages.

        - <u>`invalid_target`</u><br>
          The authorization server implementation rejects the requested target resources.

          The error code invalid_target is from "Resource Indicators for OAuth 2.0". The specification
          defines the resource request parameter. By using the parameter, client applications can request
          target resources that should be bound to the access token being issued. If the authorization
          server wants to reject the request, call `/backchannel/authentication/fail` API with `INVALID_TARGET`.

        - <u>`access_denined`</u><br>
          The authorization server implementation has custom rules to reject backchannel authentication
          requests without asking the end-user and respond to the client as if the end-user had rejected
          the request in some particular cases and found that the backchannel authentication request
          is one of the particular cases.

          The authorization server implementation will never have to use the error code `access_denied`
          at this timing unless the server has intentionally implemented custom rules to reject backchannel
          authentication requests without asking the end-user and respond to the client as if the end-user
          had rejected the request.

        [3] AUTH_REQ_ID ISSUE

        If the authorization server implementation has successfully determined the subject of the end-user,
        the next action is to return an HTTP response to the client application which contains `auth_req_id`.

        Authlete provides `/backchannel/authentication/issue` API which generates a JSON containing `auth_req_id`,
        so, your next action is (1) call the API, (2) receive the response from the API, (3) build a response
        to the client application using the content of the API response, and (4) return the response to
        the client application. See the description of `/backchannel/authentication/issue` API for details.

        [4] END-USER AUTHENTICATION AND AUTHORIZATION

        After sending a JSON containing `auth_req_id` back to the client application, the service implementation
        starts to communicate with an authentication device of the end-user. It is assumed that end-user
        authentication is performed on the authentication device and the end-user confirms the content of
        the backchannel authentication request and grants authorization to the client application if everything
        is okay. The authorization server implementation must be able to receive the result of the end-user
        authentication and authorization from the authentication device.

        How to communicate with an authentication device and achieve end-user authentication and authorization
        is up to each authorization server implementation, but the following request parameters of the backchannel
        authentication request should be taken into consideration in any implementation.

        - <u>`acr_values`</u><br>
          A backchannel authentication request may contain an array of ACRs (Authentication Context Class
          References) in preference order. If multiple authentication devices are registered for the end-user,
          the authorization server implementation should take the ACRs into consideration when selecting
          the best authentication device.

        - <u>`scope`</u><br>
          A backchannel authentication request always contains a list of scopes. At least, `openid` is
          included in the list (otherwise `/backchannel/authentication` API returns `action=BAD_REQUEST`).
          It would be better to show the requested scopes to the end-user on the authentication device
          or somewhere appropriate.

          If the scope request parameter contains `address`, `email`, `phone` and/or `profile`, they are
          interpreted as defined in "5.4. Requesting Claims using Scope Values of OpenID Connect Core 1.0".
          That is, they are expanded into a list of claim names. The claimNames parameter returns the expanded
          result.

        - <u>`binding_message`</u><br>
          A backchannel authentication request may contain a binding message. It is a human readable identifier
          or message intended to be displayed on both the consumption device (client application) and the
          authentication device.

        - <u>`user_code`</u><br>
          A backchannel authentication request may contain a user code. It is a secret code, such as password
          or pin, known only to the end-user but verifiable by the authorization server. The user code should
          be used to authorize sending a request to the authentication device.

        [5] END-USER AUTHENTICATION AND AUTHORIZATION COMPLETION

        After receiving the result of end-user authentication and authorization, the authorization server
        implementation must call Authlete's `/backchannel/authentication/complete` API to tell Authlete
        the result and pass necessary data so that Authlete can generate an ID token, an access token and
        optionally a refresh token. See the description of the API for details.

        [6] CLIENT NOTIFICATION

        When the backchannel token delivery mode is either `ping` or `push`, the authorization server implementation
        must send a notification to the pre-registered notification endpoint of the client after the end-user
        authentication and authorization. In this case, the `action` parameter in a response from `/backchannel/authentication/complete`
        API is `NOTIFICATION`. See the description of `/backchannel/authentication/complete` API for details.

        [7] TOKEN REQUEST

        When the backchannel token delivery mode is either `ping` or `poll`, the client application will make
        a token request to the token endpoint to get an ID token, an access token and optionally a refresh
        token.

        A token request that corresponds to a backchannel authentication request uses `urn:openid:params:grant-type:ciba`
        as the value of the `grant_type` request parameter. Authlete's `/auth/token` API recognizes the
        grant type automatically and behaves properly, so the existing token endpoint implementation does
        not have to be changed to support CIBA.
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  description: |
                    Parameters of a backchannel authentication request which are the request parameters that the
                    backchannel authentication endpoint of the OpenID provider implementation received from the client
                    application.

                    The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
                    of the request from the client application.
                clientId:
                  type: string
                  description: |
                    The client ID extracted from Authorization header of the backchannel authentication request from
                    the client application.

                    If the backchannel authentication endpoint of the OpenID provider implementation supports Basic
                    Authentication as a means of client authentication, and the request from the client application
                    contained its client ID in Authorization header, the value should be extracted and set to this parameter.
                clientSecret:
                  type: string
                  description: |
                    The client secret extracted from Authorization header of the backchannel authentication request
                    from the client application.

                    If the backchannel authentication endpoint of the OpenID provider implementation supports Basic
                    Authentication as a means of client authentication, and the request from the client application
                    contained its client secret in Authorization header, the value should be extracted and set to
                    this parameter.
                clientCertificate:
                  type: string
                  description: |
                    The client certification used in the TLS connection between the client application and the
                    backchannel authentication endpoint of the OpenID provider.
                clientCertificatePath:
                  type: string
                  description: |
                    The client certificate path presented by the client during client authentication. Each element
                    is a string in PEM format.
            example:
              parameters: login_hint=john&scope=openid&client_notification_token=my-client-notification-token&user_code=my-user-code
              clientId: '26862190133482'
              clientSecret: 8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1backchannel~1authentication/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - USER_IDENTIFICATION
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client
                      application. Its format varies depending on the value of `action` parameter.
                  clientId:
                    type: integer
                    format: int64
                    description: |
                      The client ID of the client application that has made the backchannel authentication
                      request.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias of the client application that has made the backchannel authentication
                      request.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      `true` if the value of the client_id request parameter included in the backchannel
                      authentication request is the client ID alias. `false` if the value is the original
                      numeric client ID.
                  clientName:
                    type: string
                    description: |
                      The name of the client application which has made the backchannel authentication request.
                  scopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scope'
                    description: |
                      The scopes requested by the backchannel authentication request.

                      Basically, this property holds the value of the `scope` request parameter in the backchannel
                      authentication request. However, because unregistered scopes are dropped on Authlete side,
                      if the `scope` request parameter contains unknown scopes, the list returned by this
                      property becomes different from the value of the `scope` request parameter.

                      Note that `description` property and `descriptions` property of each `scope` object
                      in the array contained in this property is always null even if descriptions of the scopes
                      are registered.
                  claimNames:
                    type: array
                    items:
                      type: string
                    description: |
                      The names of the claims which were requested indirectly via some special scopes.
                      See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
                      in OpenID Connect Core 1.0 for details.
                  clientNotificationToken:
                    type: string
                    description: |
                      The client notification token included in the backchannel authentication request.
                  acrs:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of ACR values requested by the backchannel authentication request.

                      Basically, this property holds the value of the `acr_values` request parameter in the
                      backchannel authentication request. However, because unsupported ACR values are dropped
                      on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
                      the list returned by this property becomes different from the value of the `acr_values`
                      request parameter.
                  hintType:
                    type: string
                    description: |
                      The type of the hint for end-user identification which was included in the backchannel authentication request.
                  hint:
                    type: string
                    description: |
                      The value of the hint for end-user identification.
                  sub:
                    type: string
                    description: |
                      The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
                  bindingMessage:
                    type: string
                    description: |
                      The binding message included in the backchannel authentication request.
                  userCode:
                    type: string
                    description: |
                      The binding message included in the backchannel authentication request.
                  userCodeRequired:
                    type: boolean
                    description: |
                      The flag which indicates whether a user code is required.

                      `true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
                      `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
                      metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
                      are `true`.
                  requestedExpiry:
                    type: integer
                    format: int32
                    description: |
                      The requested expiry for the authentication request ID (`auth_req_id`).
                  requestContext:
                    type: string
                    description: |
                      The request context of the backchannel authentication request.

                      It is the value of the request_context claim in the signed authentication request and
                      its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
                  warnings:
                    type: array
                    items:
                      type: string
                    description: |
                      The warnings raised during processing the backchannel authentication request.
                  ticket:
                    type: string
                    description: |
                      The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.

                      This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                  resources:
                    type: array
                    items:
                      type: string
                    description: |
                      The resources specified by the `resource` request parameters or by the `resource` property
                      in the request object. If both are given, the values in the request object should be
                      set. See "Resource Indicators for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  dynamicScopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/DynamicScope'
                    description: |
                      The dynamic scopes which the client application requested by the scope request parameter.
                  deliveryMode:
                    $ref: '#/components/schemas/DeliveryMode'
                  clientAuthMethod:
                    type: string
                    description: |
                      The client authentication method that was performed.
                  gmAction:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1gm/post/requestBody/content/application~1json/schema/properties/gmAction'
                  grantId:
                    type: string
                    description: |
                      the value of the `grant_id` request parameter of the device authorization request.

                      The `grant_id` request parameter is defined in
                      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                      , which is supported by Authlete 2.3 and newer versions.
                  grant:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization/post/responses/200/content/application~1json/schema/properties/grant'
                  grantSubject:
                    type: string
                    description: |
                      The subject identifying the user who has given the grant identified
                      by the `grant_id` request parameter of the device authorization
                      request.

                      Authlete 2.3 and newer versions support <a href=
                      "https://openid.net/specs/fapi-grant-management.html">Grant Management
                      for OAuth 2.0</a>. An authorization request may contain a `grant_id`
                      request parameter which is defined in the specification. If the value of
                      the request parameter is valid, {@link #getGrantSubject()} will return
                      the subject of the user who has given the grant to the client application.
                      Authorization server implementations may use the value returned from
                      {@link #getGrantSubject()} in order to determine the user to authenticate.

                      The user your system will authenticate during the authorization process
                      (or has already authenticated) may be different from the user of the
                      grant. The first implementer's draft of "Grant Management for OAuth 2.0"
                      does not mention anything about the case, so the behavior in the case is
                      left to implementations. Authlete will not perform the grant management
                      action when the `subject` passed to Authlete does not match the
                      user of the grant.
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
              example:
                resultCode: A179001
                resultMessage: '[A179001] The backchannel authentication request was processed successfully.'
                action: USER_IDENTIFICATION
                clientId: 26862190133482
                clientIdAliasUsed: false
                clientName: My CIBA Client
                clientNotificationToken: my-client-notification-token
                deliveryMode: POLL
                hint: john
                hintType: LOGIN_HINT
                requestedExpiry: 0
                scopes:
                  - defaultEntry: false
                    name: openid
                serviceAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                ticket: Y1qeCf0A-JUz6caceaBfd2AaBYNZ-X-WGTP5Qv47cQI
                userCode: my-user-code
                userCodeRequired: false
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: backchannel_authentication_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "parameters": "login_hint=john&scope=openid&client_notification_token=my-client-notification-token&user_code=my-user-code", "clientId": "26862190133482", "clientSecret":"8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            BackchannelAuthenticationRequest req = new BackchannelAuthenticationRequest();
            req.setParameters(...);
            req.setClientId("26862190133482");
            req.setClientSecret("8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A");

            api.backchannelAuthentication(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = BackchannelAuthenticationRequest()
            req.parameters = ...
            req.clientId = '26862190133482'
            req.clientSecret = '8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A'

            api.backchannelAuthentication(req)
      tags:
        - CIBA
  '/api/{serviceId}/backchannel/authentication/issue':
    post:
      summary: Issue Backchannel Authentication Response
      description: |
        This API prepares JSON that contains an `auth_req_id`. The JSON should be used as the response body
        of the response which is returned to the client from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the backchannel authentication
        endpoint of the service in order to generate a successful response to the client application.

        The description of the `/backchannel/authentication` API describes the timing when this API should
        be called and the meaning of request parameters. See [AUTH_REQ_ID ISSUE] in `USER_IDENTIFICATION`.

        The response from `/backchannel/authentication/issue` API has some parameters. Among them, it is
        `action` parameter that the authorization server implementation should check first because it denotes
        the next `action` that the authorization server implementation should take. According to the value
        of `action`, the authorization server implementation must take the steps described below.

        ```java
        @POST
        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
        public Response post(String parameters)
        {
            // 'parameters' is the entity body of the backchannel authentication request.
            ......
        }
        ```

        The endpoint implementation does not have to parse the request parameters from the client application
        because Authlete's `/backchannel/authentication` API does it.

        The response from `/backchannel/authentication` API has various parameters. Among them, it is `action`
        parameter that the authorization server implementation should check first because it denotes the
        next action that the authorization server implementation should take. According to the value of
        `action`, the service implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
        server implementation was wrong or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with
        HTTP status of "500 Internal Server Error" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **INVALID_TICKET**

        When the value of `action` is `INVALID_TICKET`, it means that the ticket included in the API call
        was invalid. For example, it does not exist or has expired.

        From a viewpoint of the client application, this is an error on the server side. Therefore, the
        authorization server implementation should generate a response to the client application with
        "500 Internal Server Error" and `application/json`.

        You can build an error response in the same way as shown in the description for the case of `INTERNAL_SERVER_ERROR`.

        **OK**

        When the value of `action` is `OK`, it means that Authlete has succeeded in preparing JSON that
        contains an `auth_req_id`. The JSON should be used as the response body of the response that is
        returned to the client from the backchannel authentication endpoint. `responseContent` contains
        the JSON.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client application.

        ```
        HTTP/1.1 200 OK
        Content-Type: text/html;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
              properties:
                ticket:
                  type: string
                  description: |
                    The ticket issued from Authlete's `/backchannel/authentication` API.
            example:
              ticket: NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1backchannel~1authentication~1issue/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - INVALID_TICKET
                      - OK
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client
                      application. Its format varies depending on the value of `action` parameter.
                  authReqId:
                    type: string
                    description: |
                      The newly issued authentication request ID.
                  expiresIn:
                    type: integer
                    format: int32
                    description: |
                      The duration of the issued authentication request ID in seconds.
                  interval:
                    type: integer
                    format: int32
                    description: |
                      The minimum amount of time in seconds that the client must wait for between polling
                      requests to the token endpoint.
              example:
                resultCode: A183001
                resultMessage: '[A183001] An auth_req_id was issued successfully.'
                action: OK
                authReqId: _mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE
                expiresIn: 3600
                interval: 0
                responseContent: '{\"auth_req_id\":\"_mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE\",\"interval\":0,\"expires_in\":3600}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: backchannel_authentication_issue_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication/issue \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "ticket": "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            BackchannelAuthenticationIssueRequest req = new BackchannelAuthenticationIssueRequest();
            req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");

            api.backchannelAuthenticationIssue(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = BackchannelAuthenticationIssueRequest()
            req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'

            api.backchannelAuthenticationIssue(req)
      tags:
        - CIBA
  '/api/{serviceId}/backchannel/authentication/fail':
    post:
      summary: Fail Backchannel Authentication Request
      description: |
        The API prepares JSON that contains an error. The JSON should be used as the response body of the
        response which is returned to the client from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint).

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the [backchannel authentication
        endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)
        of the service in order to generate an error response to the client application.

        The response from `/backchannel/authentication/fails` API has some parameters. Among them, it is
        `action` parameter that the authorization server implementation should check first because it denotes
        the next action that the authorization server implementation should take. According to the value
        of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that (1) the `reason` request parameter
        of the API call was `SERVER_ERROR`, (2) an error occurred on Authlete side, or (3) the request parameters
        of the API call were wrong. In this case, the authorization server implementation should return
        a "500 Internal Server Error" response to the client application. However, in most cases, commercial
        implementations prefer to use other HTTP status code than 5xx.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, the authorization server implementation should return a
        "400 Bad Request" response to the client application.

        **FORBIDDEN**

        When the value of `action` is `FORBIDDEN`, it means that the `reason` request parameter of the API call
        was `ACCESS_DENIED`. In this case, the backchannel authentication endpoint of the authorization
        server implementation should return a "403 Forbidden" response to the client application.

        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - reason
              properties:
                ticket:
                  type: string
                  description: |
                    The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.
                    This request parameter is not mandatory but optional. If this request parameter is given and the
                    ticket belongs to the service, the specified ticket is deleted from the database. Giving this
                    parameter is recommended to clean up the storage area for the service.
                reason:
                  type: string
                  enum:
                    - ACCESS_DENIED
                    - EXPIRED_LOGIN_HINT_TOKEN
                    - INVALID_BINDING_MESSAGE
                    - INVALID_TARGET
                    - INVALID_USER_CODE
                    - MISSING_USER_CODE
                    - SERVER_ERROR
                    - UNAUTHORIZED_CLIENT
                    - UNKNOWN_USER_ID
                  description: |
                    The reason of the failure of the backchannel authentication request. This request parameter is
                    not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
                    is used as a reason.
                errorDescription:
                  type: string
                  description: |
                    The description of the error. This corresponds to the `error_description` property in the response
                    to the client.
                errorUri:
                  type: string
                  description: |
                    The URI of a document which describes the error in detail. If this optional request parameter
                    is given, its value is used as the value of the `error_uri` property.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1backchannel~1authentication~1fail/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - FORBIDDEN
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client
                      application. Its format varies depending on the value of `action` parameter.
              example:
                resultCode: A185001
                resultMessage: '[A185001] Successfully generated an error response for the backchannel authentication request.'
                action: FORBIDDEN
                responseContent: '{\"error\":\"access_denied\"}'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: backchannel_authentication_fail_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication/fail \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "ticket": "holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0", "reason": "ACCESS_DENIED" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            BackchannelAuthenticationFailRequest req = new BackchannelAuthenticationFailRequest();
            req.setTicket("holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0");
            req.setReason(BackchannelAuthenticationFailRequest.Reason.ACCESS_DENIED);

            api.backchannelAuthenticationFail(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = BackchannelAuthenticationFailRequest()
            req.ticket = 'holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0'
            req.reason = BackchannelAuthenticationFailReason.ACCESS_DENIED

            api.backchannelAuthenticationFail(req)
      tags:
        - CIBA
  '/api/{serviceId}/backchannel/authentication/complete':
    post:
      summary: Complete Backchannel Authentication
      description: |
        This API returns information about what action the authorization server should take after it receives
        the result of end-user's decision about whether the end-user has approved or rejected a client application's
        request on the authentication device.

        <br>
        <details>
        <summary>Description</summary>

        After the implementation of the backchannel authentication endpoint returns JSON containing an
        `auth_req_id` to the client, the authorization server starts a background process that communicates
        with the authentication device of the end-user. On the authentication device, end-user authentication
        is performed and the end-user is asked whether they give authorization to the client or not. The
        authorization server will receive the result of end-user authentication and authorization from
        the authentication device.

        After the authorization server receives the result from the authentication device, or even in the
        case where the server gave up receiving a response from the authentication device for some reasons,
        the server should call the `/backchannel/authentication/complete` API to tell Authlete the result.

        When the end-user was authenticated and authorization was granted to the client by the end-user,
        the authorization server should call the API with `result=AUTHORIZED`. In this successful case,
        the `subject` request parameter is mandatory. If the token delivery mode is `push`, the API will generate
        an access token, an ID token and optionally a refresh token. On the other hand, if the token delivery
        mode is `poll` or `ping`, the API will just update the database record so that `/auth/token` API
        can generate tokens later.

        When the authorization server received the decision of the end-user from the authentication device
        and it indicates that the end-user has rejected to give authorization to the client, the authorization
        server should call the API with `result=ACCESS_DENIED`. In this case, if the token delivery mode
        is `push`, the API will generate an error response that contains the error response parameter and
        optionally the `error_description` and error_uri response parameters (if the `errorDescription`
        and `errorUri` request parameters have been given). On the other hand, if the token delivery mode
        is `poll` or `ping`, the API will just update the database record so that `/auth/token` API can
        generate an error response later. In any token delivery mode, the value of the error parameter will
        become `access_denied`.

        When the authorization server could not get the result of end-user authentication and authorization
        from the authentication device for some reasons, the authorization server should call the API with
        `result=TRANSACTION_FAILED`. In this error case, the API will behave in the same way as in the case
        of `ACCESS_DENIED`. The only difference is that `expired_token` is used as the value of the `error`
        parameter.

        The response from `/backchannel/authentication/complete` API has various parameters. Among them,
        it is `action` parameter that the authorization server implementation should check first because
        it denotes the next action that the authorization server implementation should take. According to
        the value of `action`, the service implementation must take the steps described below.

        **SERVER_ERROR**

        When the value of `action` is `SERVER_ERROR`, it means either (1) that the request from the authorization
        server to Authlete was wrong, or (2) that an error occurred on Authlete side.

        When the backchannel token delivery mode is `ping` or `push`, `SERVER_ERROR` is used only when
        an error is detected before the record of the ticket (which is included in the API call to `/backchannel/authentication/complete`)
        is retrieved from the database successfully. If an error is detected after the record of the ticket
        is retrieved from the database, `NOTIFICATION` is used instead of `SERVER_ERROR`.

        When the backchannel token delivery mode is `poll`, `SERVER_ERROR` is used regardless of whether
        it is before or after the record of the ticket is retrieved from the database.

        **NO_ACTION**

        When the value of `action` is `NO_ACTION`, it means that the authorization server does not have
        to take any immediate action.

        `NO_ACTION` is returned when the backchannel token delivery mode is `poll`. In this case, the client
        will receive the final result at the token endpoint.

        **NOTIFICATION**

        When the value of `action` is `NOTIFICATION`, it means that the authorization server must send a
        notification to the client notification endpoint.

        According to the CIBA Core specification, the notification is an HTTP POST request whose request
        body is JSON and whose `Authorization` header contains the client notification token, which was
        included in the backchannel authentication request as the value of the `client_notification_token`
        request parameter, as a bearer token.

        When the backchannel token delivery mode is `ping`, the request body of the notification is JSON
        which contains the `auth_req_id` property only. When the backchannel token delivery mode is `push`,
        the request body will additionally contain an access token, an ID token and other properties. Note
        that when the backchannel token delivery mode is `poll`, a notification does not have to be sent
        to the client notification endpoint.

        In error cases, in the ping mode, however, the content of a notification is not different from the
        content in successful cases. That is, the notification contains the `auth_req_id` property only.
        The client will know the error when it accesses the token endpoint. On the other hand, in the
        `push` mode, in error cases, the content of a notification will include the `error` property instead
        of an access token and an ID token. The client will know the error by detecting that error is included
        in the notification.

        In any case, the value of `responseContent` is JSON which can be used as the request body of the
        notification.

        The client notification endpoint that the notification should be sent to the value of the `clientNotificationEndpoint`
        parameter. Likewise, the client notification token that the notification should include as a bearer
        token is the `clientNotificationToken` parameter. With these methods, the notification can be built
        like the following.

        ```
        POST {clientNotificationEndpoint} HTTP/1.1
        HOST: {The host of clientNotificationEndpoint}
        Authorization: Bearer {notificationToken}
        Content-Type: application/json

        {responseContent}
        ```
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - result
                - subject
              properties:
                ticket:
                  type: string
                  description: |
                    The ticket issued by Authlete's `/backchannel/authentication` API.
                result:
                  type: string
                  enum:
                    - TRANSACTION_FAILED
                    - ACCESS_DENIED
                    - AUTHORIZED
                  description: |
                    The result of the end-user authentication and authorization. One of the following. Details are
                    described in the description.
                subject:
                  type: string
                  description: |
                    The subject (= unique identifier) of the end-user.
                sub:
                  type: string
                  description: |
                    The value of the sub claim that should be used in the ID token.
                authTime:
                  type: integer
                  format: int64
                  description: |
                    The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
                acr:
                  type: string
                  description: |
                    The reference of the authentication context class which the end-user authentication satisfied.
                claims:
                  type: string
                  description: |
                    Additional claims which will be embedded in the ID token.
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Property'
                  description: |
                    The extra properties associated with the access token.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    Scopes to replace the scopes specified in the original backchannel authentication request with.
                    When nothing is specified for this parameter, replacement is not performed.
                idtHeaderParams:
                  type: string
                  description: |
                    JSON that represents additional JWS header parameters for ID tokens.
                errorDescription:
                  type: string
                  description: |
                    The description of the error. If this optional request parameter is given, its value is used as
                    the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
                    To comply with the specification strictly, the description must not include characters outside
                    the set `%x20-21 / %x23-5B / %x5D-7E`.
                errorUri:
                  type: string
                  description: |
                    The URI of a document which describes the error in detail. This corresponds to the `error_uri`
                    property in the response to the client.
                consentedClaims:
                  type: array
                  items:
                    type: string
                  description: |
                    the claims that the user has consented for the client application
                    to know.
                jwtAtClaims:
                  type: string
                  description: |
                    Additional claims that are added to the payload part of the JWT access token.
                accessToken:
                  type: string
                  description: |
                    The representation of an access token that may be issued as a result of the Authlete API call.
            example:
              ticket: NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q
              result: AUTHORIZED
              subject: john
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1backchannel~1authentication~1complete/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - SERVER_ERROR
                      - NO_ACTION
                      - NOTIFICATION
                    description: |
                      The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client
                      application. Its format varies depending on the value of `action` parameter.
                  clientId:
                    type: integer
                    format: int64
                    description: |
                      The client ID of the client application that has made the backchannel authentication
                      request.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias of the client application that has made the backchannel authentication
                      request.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      `true` if the value of the client_id request parameter included in the backchannel
                      authentication request is the client ID alias. `false` if the value is the original
                      numeric client ID.
                  clientName:
                    type: string
                    description: |
                      The name of the client application which has made the backchannel authentication request.
                  deliveryMode:
                    $ref: '#/components/schemas/DeliveryMode'
                  clientNotificationEndpoint:
                    type: string
                    description: |
                      The client notification endpoint to which a notification needs to be sent. This corresponds
                      to the `client_notification_endpoint` metadata of the client application.
                  clientNotificationToken:
                    type: string
                    description: |
                      The client notification token which needs to be embedded as a Bearer token in the Authorization
                      header in the notification. This is the value of the `client_notification_token` request
                      parameter included in the backchannel authentication request.
                  authReqId:
                    type: string
                    description: |
                      The newly issued authentication request ID.
                  accessToken:
                    type: string
                    description: |
                      The issued access token.
                  refreshToken:
                    type: string
                    description: |
                      The issued refresh token.
                  idToken:
                    type: string
                    description: |
                      The issued ID token.
                  accessTokenDuration:
                    type: integer
                    format: int64
                    description: |
                      The duration of the access token in seconds.
                  refreshTokenDuration:
                    type: integer
                    format: int64
                    description: |
                      The duration of the refresh token in seconds.
                  idTokenDuration:
                    type: integer
                    format: int64
                    description: |
                      The duration of the ID token in seconds.
                  jwtAccessToken:
                    type: string
                    description: |
                      The issued access token in JWT format.
                  resources:
                    type: array
                    items:
                      type: string
                    description: |
                      The resources specified by the `resource` request parameters or by the `resource` property
                      in the request object. If both are given, the values in the request object should be
                      set. See "Resource Indicators for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  grantId:
                    type: string
                    description: |
                      the value of the `grant_id` request parameter of the device authorization request.

                      The `grant_id` request parameter is defined in
                      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                      , which is supported by Authlete 2.3 and newer versions.
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
              example:
                resultCode: A198001
                resultMessage: '[A198001] Successfully updated the database so that the token endpoint can generate tokens (mode = poll, result = AUTHORIZED).'
                accessTokenDuration: 0
                action: NO_ACTION
                authReqId: _mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE
                clientId: 26862190133482
                clientIdAliasUsed: false
                clientName: My CIBA Client
                deliveryMode: POLL
                idTokenDuration: 0
                refreshTokenDuration: 0
                serviceAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: backchannel_authentication_complete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication/complete \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "ticket": "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q", "result": "AUTHORIZED", "subject": "john" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            BackchannelAuthenticationCompleteRequest req = new BackchannelAuthenticationCompleteRequest();
            req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");
            req.setResult(BackchannelAuthenticationCompleteRequest.Result.AUTHORIZED);
            req.setSubject("john");

            api.backchannelAuthenticationComplete(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = BackchannelAuthenticationCompleteRequest()
            req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'
            req.result = BackchannelAuthenticationCompleteResult.AUTHORIZED
            req.subject = 'john'

            api.backchannelAuthenticationComplete(req)
      tags:
        - CIBA
  '/api/{serviceId}/device/authorization':
    post:
      summary: Process Device Authorization Request
      description: |
        This API parses request parameters of a [device authorization request](https://datatracker.ietf.org/doc/html/rfc8628#section-3.1)
        and returns necessary data for the authorization server implementation to process the device authorization
        request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from the within the implementation of the device authorization
        endpoint of the service. The service implementation should retrieve the value of `action` from the
        response and take the following steps according to the value.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
        server implementation was wrong or that an error occurred in Authlete.

        In either case, from a viewpoint of the client application, it is an error on the server side.
        Therefore, the authorization server implementation should generate a response to the client application
        with "500 Internal Server Error"s and `application/json`.

        The value of `responseContent` is a JSON string which describes t he error, so it can be
        used as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client application.

        ```
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
        is wrong.

        The authorization server implementation should generate a response to the client application with
        "400 Bad Request" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation should generate and return
        to the client application.

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that client authentication of the device authorization
        request failed.

        The authorization server implementation should generate a response to the client application with
        "401 Unauthorized" and `application/json`.

        The value of `responseContent` is a JSON string which describes the error, so it can be used as
        the entity body of the response.

        The following illustrates the response which the service implementation must generate and return
        to the client application.

        ```
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: (challenge)
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **OK**

        When the value of `action` is `OK`, it means that the device authorization request from the client
        application is valid.

        The authorization server implementation should generate a response to the client application with
        "200 OK" and `application/json`.

        The `responseContent` is a JSON string which can be used as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate
        and return to the client application.
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  description: |
                    Parameters of a device authorization request which are the request parameters that the device
                    authorization endpoint of the authorization server implementation received from the client application.

                    The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
                    of the request from the client application.
                clientId:
                  type: string
                  description: |
                    The client ID extracted from Authorization header of the device authorization request from the
                    client application.

                    If the device authorization endpoint of the authorization server implementation supports Basic
                    `Authentication` as a means of client authentication, and the request from the client application
                    contained its client ID in `Authorization` header, the value should be extracted and set to this
                    parameter.
                clientSecret:
                  type: string
                  description: |
                    The client secret extracted from `Authorization` header of the device authorization request from
                    the client application.

                    If the device authorization endpoint of the authorization server implementation supports Basic
                    Authentication as a means of client authentication, and the request from the client application
                    contained its client secret in `Authorization` header, the value should be extracted and set to
                    this parameter.
                clientCertificate:
                  type: string
                  description: |
                    The client certificate used in the TLS connection between the client application and the device
                    authorization endpoint of the authorization server.
                clientCertificatePath:
                  type: string
                  description: |
                    The client certificate path presented by the client during client authentication. Each element
                    is a string in PEM format.
            example:
              parameters: client_id=26888344961664&scope=history.read
              clientId: '26888344961664'
              clientSecret: SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1device~1authorization/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - OK
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client
                      application. Its format varies depending on the value of `action` parameter.
                  clientId:
                    type: integer
                    format: int64
                    description: |
                      The client ID of the client application that has made the device authorization request.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias of the client application that has made the device authorization
                      request.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      `true` if the value of the client_id request parameter included in the device authorization
                      request is the client ID alias. `false` if the value is the original numeric client ID.
                  clientName:
                    type: string
                    description: |
                      The name of the client application which has made the device authorization request.
                  clientAuthMethod:
                    type: string
                    description: |
                      The client authentication method that should be performed at the device authorization
                      endpoint.
                  scopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scope'
                    description: |
                      The scopes requested by the device authorization request.

                      Basically, this property holds the value of the scope request parameter in the device
                      authorization request. However, because unregistered scopes are dropped on Authlete
                      side, if the `scope` request parameter contains unknown scopes, the list returned by
                      this property becomes different from the value of the `scope` request parameter.

                      Note that `description` property and `descriptions` property of each scope object in the
                      array contained in this property is always `null` even if descriptions of the scopes
                      are registered.
                  claimNames:
                    type: array
                    items:
                      type: string
                    description: |
                      The names of the claims which were requested indirectly via some special scopes.
                      See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
                      in OpenID Connect Core 1.0 for details.
                  acrs:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of ACR values requested by the device authorization request.

                      Basically, this property holds the value of the `acr_values` request parameter in the
                      device authorization request. However, because unsupported ACR values are dropped
                      on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
                      the list returned by this property becomes different from the value of the `acr_values`
                      request parameter.
                  deviceCode:
                    type: string
                    description: |
                      The device verification code. This corresponds to the `device_code` property in the
                      response to the client.
                  userCode:
                    type: string
                    description: |
                      The end-user verification code. This corresponds to the `user_code` property in the
                      response to the client.
                  verificationUri:
                    type: string
                    description: |
                      The end-user verification URI. This corresponds to the `verification_uri` property in
                      the response to the client.
                  verificationUriComplete:
                    type: string
                    description: |
                      The end-user verification URI that includes the end-user verification code. This corresponds
                      to the `verification_uri_complete` property in the response to the client.
                  expiresIn:
                    type: integer
                    format: int32
                    description: |
                      The duration of the device verification code in seconds. This corresponds to the `expires_in`
                      property in the response to the client.
                  interval:
                    type: integer
                    format: int32
                    description: |
                      The minimum amount of time in seconds that the client must wait for between polling
                      requests to the token endpoint. This corresponds to the `interval` property in the response
                      to the client.
                  warnings:
                    type: array
                    items:
                      type: string
                    description: |
                      The warnings raised during processing the backchannel authentication request.
                  resources:
                    type: array
                    items:
                      type: string
                    description: |
                      The resources specified by the `resource` request parameters. See "Resource Indicators
                      for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  dynamicScopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/DynamicScope'
                    description: |
                      The dynamic scopes which the client application requested by the scope request parameter.
                  gmAction:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1gm/post/requestBody/content/application~1json/schema/properties/gmAction'
                  grantId:
                    type: string
                    description: |
                      the value of the `grant_id` request parameter of the device authorization request.

                      The `grant_id` request parameter is defined in
                      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                      , which is supported by Authlete 2.3 and newer versions.
                  grant:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization/post/responses/200/content/application~1json/schema/properties/grant'
                  grantSubject:
                    type: string
                    description: |
                      The subject identifying the user who has given the grant identified
                      by the `grant_id` request parameter of the device authorization
                      request.

                      Authlete 2.3 and newer versions support <a href=
                      "https://openid.net/specs/fapi-grant-management.html">Grant Management
                      for OAuth 2.0</a>. An authorization request may contain a `grant_id`
                      request parameter which is defined in the specification. If the value of
                      the request parameter is valid, {@link #getGrantSubject()} will return
                      the subject of the user who has given the grant to the client application.
                      Authorization server implementations may use the value returned from
                      {@link #getGrantSubject()} in order to determine the user to authenticate.

                      The user your system will authenticate during the authorization process
                      (or has already authenticated) may be different from the user of the
                      grant. The first implementer's draft of "Grant Management for OAuth 2.0"
                      does not mention anything about the case, so the behavior in the case is
                      left to implementations. Authlete will not perform the grant management
                      action when the `subject` passed to Authlete does not match the
                      user of the grant.
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
              example:
                resultCode: A220001
                resultMessage: '[A220001] The device authorization request was processed successfully.'
                action: OK
                clientId: 26888344961664
                clientIdAliasUsed: false
                clientName: My Device Flow Client
                deviceCode: p0qzXeRav8u6lJY9omjzR47KK58VwYN7j8xGUD7sq5I
                expiresIn: 3600
                interval: 0
                responseContent: '{"user_code":"XWWKPBWVXQ","device_code":"p0qzXeRav8u6lJY9omjzR47KK58VwYN7j8xGUD7sq5I","verification_uri_complete":"https://my-service.com/df/verification?XWWKPBWVXQ","verification_uri":"https://my-service.com/df/verification","expires_in":3600}'
                scopes:
                  - defaultEntry: false
                    name: history.read
                serviceAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                userCode: XWWKPBWVXQ
                verificationUri: 'https://my-service.com/df/verification'
                verificationUriComplete: 'https://my-service.com/df/verification?XWWKPBWVXQ'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: device_authorization_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/device/authorization \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "parameters": "client_id=26888344961664&scope=history.read", "clientId": "26888344961664", "clientSecret":"SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            DeviceAuthorizationRequest req = new DeviceAuthorizationRequest();
            req.setParameters(...);
            req.setClientId("26888344961664");
            req.setClientSecret("SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog");

            api.deviceAuthorization(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = DeviceAuthorizationRequest()
            req.parameters = ...
            req.clientId = '26888344961664'
            req.clientSecret = 'SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog'

            api.deviceAuthorization(req)
      tags:
        - Device Flow
  '/api/{serviceId}/device/verification':
    post:
      summary: Process Device Verification Request
      description: |
        The API returns information associated with a user code.

        <br>
        <details>
        <summary>Description</summary>

        After receiving a response from the device authorization endpoint of the authorization server,
        the client application shows the end-user the user code and the verification URI which are included
        in the device authorization response. Then, the end-user will access the verification URI using
        a web browser on another device (typically, a smart phone). In normal implementations, the verification
        endpoint will return an HTML page with an input form where the end-user inputs a user code. The
        authorization server will receive a user code from the form.

        After receiving a user code, the authorization server should call Authlete's `/device/verification`
        API with the user code. And then, the authorization server implementation should retrieve the value
        of `action` parameter from the API response and take the following steps according to the value.

        **SERVER_ERROR**

        When the value of `action` is `SERVER_ERROR`, it means that an error occurred on Authlete side. The
        authorization server implementation should tell the end-user that something wrong happened and
        urge her to re-initiate a device flow.

        **NOT_EXIST**

        When the value of `action` is `NOT_EXIST`, it means that the user code does not exist. The authorization
        server implementation should tell the end-user that the user code is invalid and urge her to retry
        to input a valid user code.

        **EXPIRED**

        When the value of `action` is `EXPIRED`, it means that the user code has expired. The authorization
        server implementation should tell the end-user that the user code has expired and urge her to
        re-initiate a device flow.

        **VALID**

        When the value of `action` is `VALID`, it means that the user code exists, has not expired, and
        belongs to the service. The authorization server implementation should interact with the end-user
        to ask whether she approves or rejects the authorization request from the device.
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userCode
              properties:
                userCode:
                  type: string
                  description: |
                    A user code.
            example:
              userCode: XWWKPBWVXQ
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1device~1verification/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - NOT_EXIST
                      - EXPIRED
                      - VALID
                    description: The next action that the authorization server implementation should take.
                  clientId:
                    type: integer
                    format: int64
                    description: |
                      The client ID of the client application to which the user code has been issued.
                  clientIdAlias:
                    type: string
                    description: |
                      The client ID alias of the client application to which the user code has been issued.
                  clientIdAliasUsed:
                    type: boolean
                    description: |
                      `true` if the value of the `client_id` request parameter included in the device authorization
                      request is the client ID alias. `false` if the value is the original numeric client ID.
                  clientName:
                    type: string
                    description: |
                      The name of the client application to which the user code has been issued.
                  scopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scope'
                    description: |
                      The scopes requested by the device authorization request.

                      Note that `description` property and `descriptions` property of each scope object in
                      the array contained in this property is always null even if descriptions of the scopes
                      are registered.
                  claimNames:
                    type: array
                    items:
                      type: string
                    description: |
                      The names of the claims which were requested indirectly via some special scopes.
                      See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
                      in OpenID Connect Core 1.0 for details.

                      This property is always `null` if the `scope` request parameter of the device authorization
                      request does not include the `openid` scope even if special scopes (such as `profile`)
                      are included in the request (unless the openid scope is included in the default set
                      of scopes which is used when the `scope` request parameter is omitted).
                  acrs:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of ACR values requested by the device authorization request.
                  resources:
                    type: array
                    items:
                      type: string
                    description: |
                      The resources specified by the `resource` request parameters or by the `resource` property
                      in the request object. If both are given, the values in the request object should be
                      set. See "Resource Indicators for OAuth 2.0" for details.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  serviceAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of this service that the client application belongs to.
                  clientAttributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pair'
                    description: |
                      The attributes of the client.
                  dynamicScopes:
                    type: array
                    items:
                      $ref: '#/components/schemas/DynamicScope'
                    description: |
                      The dynamic scopes which the client application requested by the scope request parameter.
                  expiresAt:
                    type: integer
                    format: int64
                    description: |
                      Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
                  gmAction:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1gm/post/requestBody/content/application~1json/schema/properties/gmAction'
                  grantId:
                    type: string
                    description: |
                      the value of the `grant_id` request parameter of the device authorization request.

                      The `grant_id` request parameter is defined in
                      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
                      , which is supported by Authlete 2.3 and newer versions.
                  grant:
                    $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization/post/responses/200/content/application~1json/schema/properties/grant'
                  grantSubject:
                    type: string
                    description: |
                      The subject identifying the user who has given the grant identified
                      by the `grant_id` request parameter of the device authorization
                      request.

                      Authlete 2.3 and newer versions support <a href=
                      "https://openid.net/specs/fapi-grant-management.html">Grant Management
                      for OAuth 2.0</a>. An authorization request may contain a `grant_id`
                      request parameter which is defined in the specification. If the value of
                      the request parameter is valid, {@link #getGrantSubject()} will return
                      the subject of the user who has given the grant to the client application.
                      Authorization server implementations may use the value returned from
                      {@link #getGrantSubject()} in order to determine the user to authenticate.

                      The user your system will authenticate during the authorization process
                      (or has already authenticated) may be different from the user of the
                      grant. The first implementer's draft of "Grant Management for OAuth 2.0"
                      does not mention anything about the case, so the behavior in the case is
                      left to implementations. Authlete will not perform the grant management
                      action when the `subject` passed to Authlete does not match the
                      user of the grant.
                  clientEntityId:
                    type: string
                    description: |
                      The entity ID of the client.
                  clientEntityIdUsed:
                    type: boolean
                    description: |
                      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
              example:
                resultCode: A224001
                resultMessage: '[A224001] The user code is valid.'
                action: VALID
                clientId: 26888344961664
                clientIdAliasUsed: false
                clientName: My Device Flow Client
                expiresAt: 1642001978000
                scopes:
                  - defaultEntry: false
                    name: history.read
                serviceAttributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: device_verification_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/device/verification \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "userCode": "XWWKPBWVXQ" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            DeviceVerificationRequest req = new DeviceVerificationRequest();
            req.setUserCode("XWWKPBWVXQ");

            api.deviceVerification(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = DeviceVerificationRequest()
            req.setUserCode('XWWKPBWVXQ')

            api.deviceVerification(req)
      tags:
        - Device Flow
  '/api/{serviceId}/device/complete':
    post:
      summary: Complete Device Authorization
      description: |
        This API returns information about what action the authorization server should take after it receives
        the result of end-user's decision about whether the end-user has approved or rejected a client
        application's request.

        <br>
        <details>
        <summary>Description</summary>

        In the device flow, an end-user accesses the verification endpoint of the authorization server where
        she interacts with the verification endpoint and inputs a user code. The verification endpoint checks
        if the user code is valid and then asks the end-user whether she approves or rejects the authorization
        request which the user code represents.

        After the authorization server receives the decision of the end-user, it should call Authlete's
        `/device/complete` API to tell Authlete the decision.

        When the end-user was authenticated and authorization was granted to the client by the end-user,
        the authorization server should call the API with `result=AUTHORIZED`. In this successful case,
        the subject request parameter is mandatory. The API will update the database record so that `/auth/token`
        API can generate an access token later.

        If the `scope` parameter of the device authorization request included the openid scope, an ID token
        is generated. In this case, `sub`, `authTime`, `acr` and `claims` request parameters in the API
        call to `/device/complete` affect the ID token.

        When the authorization server receives the decision of the end-user and it indicates that she has
        rejected to give authorization to the client, the authorization server should call the API with
        `result=ACCESS_DENIED`. In this case, the API will update the database record so that the `/auth/token`
        API can generate an error response later. If `errorDescription` and `errorUri` request parameters
        are given to the `/device/complete` API, they will be used as the values of `error_description`
        and `error_uri` response parameters in the error response from the token endpoint.

        When the authorization server could not get decision from the end-user for some reasons, the authorization
        server should call the API with `result=TRANSACTION_FAILED`. In this error case, the API will behave
        in the same way as in the case of `ACCESS_DENIED`. The only difference is that `expired_token` is
        used as the value of the `error` response parameter instead of `access_denied`.

        After receiving a response from the `/device/complete` API, the implementation of the authorization
        server should retrieve the value of `action` from the response and take the following steps according
        to the value.

        **SERVER_ERROR**

        When the value of `action` is `SERVER_ERROR`, it means that an error occurred on Authlete side. The
        authorization server implementation should tell the end-user that something wrong happened and
        urge her to re-initiate a device flow.

        **USER_CODE_NOT_EXIST**

        When the value of `action` is `USER_CODE_NOT_EXIST`, it means that the user code included in the API
        call does not exist. The authorization server implementation should tell the end-user that the user
        code has been invalidated and urge her to re-initiate a device flow.

        **USER_CODE_EXPIRED**

        When the value of `action` is `USER_CODE_EXPIRED`,  it means that the user code included in the API
        call has expired. The authorization server implementation should tell the end-user that the user
        code has expired and urge her to re-initiate a device flow.

        **INVALID_REQUEST**

        When the value of `action` is `INVALID_REQUEST`, it means that the API call is invalid. Probably,
        the authorization server implementation has some bugs.

        **SUCCESS**

        When the value of `action` is `SUCCESS`, it means that the API call has been processed successfully.
        The authorization server should return a successful response to the web browser the end-user is
        using.
        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userCode
                - result
                - subject
              properties:
                userCode:
                  type: string
                  description: |
                    A user code.
                result:
                  type: string
                  enum:
                    - TRANSACTION_FAILED
                    - ACCESS_DENIED
                    - AUTHORIZED
                  description: |
                    The result of the end-user authentication and authorization. One of the following. Details are
                    described in the description.
                subject:
                  type: string
                  description: |
                    The subject (= unique identifier) of the end-user.
                sub:
                  type: string
                  description: |
                    The value of the sub claim that should be used in the ID token.
                authTime:
                  type: integer
                  format: int64
                  description: |
                    The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
                acr:
                  type: string
                  description: |
                    The reference of the authentication context class which the end-user authentication satisfied.
                claims:
                  type: string
                  description: |
                    Additional claims which will be embedded in the ID token.
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Property'
                  description: |
                    The extra properties associated with the access token.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    Scopes to replace the scopes specified in the original device authorization request with.
                    When nothing is specified for this parameter, replacement is not performed.
                errorDescription:
                  type: string
                  description: |
                    The description of the error. If this optional request parameter is given, its value is used as
                    the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
                    To comply with the specification strictly, the description must not include characters outside
                    the set `%x20-21 / %x23-5B / %x5D-7E`.
                errorUri:
                  type: string
                  description: |
                    The URI of a document which describes the error in detail. This corresponds to the `error_uri`
                    property in the response to the client.
                idtHeaderParams:
                  type: string
                  description: |
                    JSON that represents additional JWS header parameters for ID tokens.
                consentedClaims:
                  type: array
                  items:
                    type: string
                  description: |
                    the claims that the user has consented for the client application
                    to know.
                jwtAtClaims:
                  type: string
                  description: |
                    Additional claims that are added to the payload part of the JWT access token.
            example:
              userCode: XWWKPBWVXQ
              result: AUTHORIZED
              subject: john
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1device~1complete/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - SERVER_ERROR
                      - USER_CODE_NOT_EXIST
                      - USER_CODE_EXPIRED
                      - INVALID_REQUEST
                      - SUCCESS
                    description: |
                      The next action that the authorization server implementation should take.
              example:
                resultCode: A241001
                resultMessage: '[A241001] The API call was processed successfully.'
                action: SUCCESS
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: device_complete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/device/complete \
            -H 'Content-Type: application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "userCode": "XWWKPBWVXQ", "result": "AUTHORIZED", "subject": "john" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            DeviceCompleteRequest req = new DeviceCompleteRequest();
            req.setUserCode("XWWKPBWVXQ");
            req.setResult(DeviceCompleteRequest.Result.AUTHORIZED);
            req.setSubject("john");

            api.deviceComplete(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = DeviceCompleteRequest()
            req.setUserCode('XWWKPBWVXQ')
            req.setResult(DeviceCompleteResult.AUTHORIZED)
            req.setSubject('john')

            api.deviceComplete(req)
      tags:
        - Device Flow
  '/api/{serviceId}/auth/token/get/list':
    get:
      summary: List Issued Tokens
      description: |
        Get the list of access tokens that are associated with the service.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: query
          name: clientIdentifier
          schema:
            type: string
          required: false
          description: |
            Client Identifier (client ID or client ID alias).
        - in: query
          name: subject
          schema:
            type: string
          required: false
          description: |
            Unique user ID.
        - in: query
          name: start
          schema:
            type: integer
            format: int32
          required: false
          description: Start index of search results (inclusive). The default value is 0.
        - in: query
          name: end
          schema:
            type: integer
            format: int32
          required: false
          description: |
            End index of search results (exclusive). The default value is 5.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  start:
                    type: integer
                    format: int32
                    description: |
                      Start index of search results (inclusive).
                  end:
                    type: integer
                    format: int32
                    description: |
                      End index of search results (exclusive).
                  totalCount:
                    type: integer
                    format: int32
                    description: |
                      Unique ID of a client developer.
                  client:
                    type: object
                    properties:
                      number:
                        type: integer
                        format: int32
                        readOnly: true
                        description: |
                          The sequential number of the client. The value of this property is assigned by Authlete.
                      clientName:
                        type: string
                        description: |
                          The name of the client application. This property corresponds to `client_name` in
                          [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                      clientNames:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaggedValue'
                        description: |
                          Client names with language tags. If the client application has different names for different
                          languages, this property can be used to register the names.
                      description:
                        type: string
                        description: The description about the client application.
                      descriptions:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaggedValue'
                        description: |
                          Descriptions about the client application with language tags. If the client application has different
                          descriptions for different languages, this property can be used to register the descriptions.
                      clientId:
                        type: integer
                        format: int64
                        readOnly: true
                        description: The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
                      clientIdAlias:
                        type: string
                        description: |
                          The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
                          default, this is a string version of the `clientId` property.
                      clientIdAliasEnabled:
                        type: boolean
                        description: Deprecated. Always set to `true`.
                      clientType:
                        $ref: '#/components/schemas/Client/properties/clientType'
                  subject:
                    type: string
                    description: |
                      Unique user ID of an end-user.
                  accessTokens:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessToken'
                    description: |
                      An array of access tokens.
              example:
                accessTokens:
                  - accessTokenExpiresAt: 1642048149000
                    accessTokenHash: tC5hpjGylLiiw-vsd5_tqVHtYSUHblAGimEJ-5xqAco
                    clientId: 26888344961664
                    createdAt: 1642044549000
                    grantType: AUTHORIZATION_CODE
                    lastRefreshedAt: 0
                    refreshTokenExpiresAt: 1642048149000
                    refreshTokenHash: jv4B_7_kpY-Rez_E7bYIxGYnZk43w18uigkaeUe6tc4
                    scopes:
                      - history.read
                    subject: john
                  - accessTokenExpiresAt: 1642051604000
                    accessTokenHash: Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg
                    clientId: 26888344961664
                    createdAt: 1642048004000
                    grantType: AUTHORIZATION_CODE
                    lastRefreshedAt: 0
                    refreshTokenExpiresAt: 1642051604000
                    refreshTokenHash: YHmwk4xETvoIJ_maWCpJDlpvmcFLkxmaaSS-v9KPng4
                    scopes:
                      - history.read
                      - openid
                      - timeline.read
                    subject: john
                  - accessTokenExpiresAt: 1642052094000
                    accessTokenHash: UUatYXjkqYFbRQlnItjq03DtUYA2MRRtuL88GCbQpbw
                    clientId: 26888344961664
                    createdAt: 1642048494000
                    grantType: AUTHORIZATION_CODE
                    lastRefreshedAt: 0
                    refreshTokenExpiresAt: 1642052094000
                    refreshTokenHash: wjc-IXoScxDiVyBmRrB92I-B0zMXSSKw_qwP_WK1lFM
                    scopes:
                      - history.read
                    subject: john
                client:
                  clientId: 26888344961664
                  clientIdAliasEnabled: false
                  clientName: My Device Flow Client
                  clientType: CONFIDENTIAL
                  number: 6260
                end: 3
                start: 0
                subject: john
                totalCount: 3
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_get_list_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/auth/token/get/list/?clientIdentifier=26888344961664\&subject=john\&start=0\&end=3 \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            String clientIdentifier = "26888344961664";
            String subject = "john";
            int start = 0;
            int end = 3;

            api.getTokenList(clientIdentifier, subject, start, end);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            clientIdentifier = '26888344961664'
            subject = 'john'
            start = 0
            end = 3

            api.getTokenList(clientIdentifier, subject, start, end)
      tags:
        - Token Operations
  '/api/{serviceId}/auth/token/create':
    post:
      summary: Create Access Token
      description: |
        Create an access token.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - grantType
                - clientId
              properties:
                grantType:
                  $ref: '#/components/schemas/GrantType'
                clientId:
                  type: integer
                  format: int64
                  description: |
                    The ID of the client application which will be associated with a newly created access token.
                subject:
                  type: string
                  description: |
                    The subject (= unique identifier) of the user who will be associated with a newly created access
                    token. This parameter is required unless the grant type is `CLIENT_CREDENTIALS`. The value must
                    consist of only ASCII characters and its length must not exceed 100.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    The scopes which will be associated with a newly created access token. Scopes that are not supported
                    by the service cannot be specified and requesting them will cause an error.
                accessTokenDuration:
                  type: integer
                  format: int64
                  description: |
                    The duration of a newly created access token in seconds. If the value is 0, the duration is determined
                    according to the settings of the service.
                refreshTokenDuration:
                  type: integer
                  format: int64
                  description: |
                    The duration of a newly created refresh token in seconds. If the value is 0, the duration is
                    determined according to the settings of the service.

                    A refresh token is not created (1) if the service does not support `REFRESH_TOKEN`, or (2) if the
                    specified grant type is either `IMPLICIT`or `CLIENT_CREDENTIALS`.
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Property'
                  description: |
                    Extra properties to associate with a newly created access token. Note that properties parameter
                    is accepted only when the HTTP method of the request is POST and Content-Type of the request is
                    `application/json`, so don't use `GET` method or `application/x-www-form-urlencoded` if you want
                    to specify properties.
                clientIdAliasUsed:
                  type: boolean
                  description: |
                    A boolean request parameter which indicates whether to emulate that the client ID alias is used
                    instead of the original numeric client ID when a new access token is created.

                    This has an effect only on the value of the aud claim in a response from [UserInfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
                    When you access the UserInfo endpoint (which is expected to be implemented using Authlete's
                    `/api/auth/userinfo` API and `/api/auth/userinfo/issue` API) with an access token which has been
                    created using Authlete's `/api/auth/token/create` API with this property (`clientIdAliasUsed`)
                    `true`, the client ID alias is used as the value of the aud claim in a response from the UserInfo
                    endpoint.

                    Note that if a client ID alias is not assigned to the client when Authlete's `/api/auth/token/create`
                    API is called, this property (`clientIdAliasUsed`) has no effect (it is always regarded as `false`).
                accessToken:
                  type: string
                  description: |
                    The value of the new access token.

                    The `/api/auth/token/create` API generates an access token. Therefore, callers of the API do not
                    have to specify values of newly created access tokens. However, in some cases, for example, if
                    you want to migrate existing access tokens from an old system to Authlete, you may want to specify
                    values of access tokens. In such a case, you can specify the value of a newly created access token
                    by passing a non-null value as the value of accessToken request parameter. The implementation
                    of the `/api/auth/token/create` uses the value of the accessToken request parameter instead of
                    generating a new value when the request parameter holds a non-null value.

                    Note that if the hash value of the specified access token already exists in Authlete's database,
                    the access token cannot be inserted and the `/api/auth/token/create` API will report an error.
                refreshToken:
                  type: string
                  description: |
                    The value of the new refresh token.

                    The `/api/auth/token/create` API may generate a refresh token. Therefore, callers of the API do
                    not have to specify values of newly created refresh tokens. However, in some cases, for example,
                    if you want to migrate existing refresh tokens from an old system to Authlete, you may want to
                    specify values of refresh tokens. In such a case, you can specify the value of a newly created
                    refresh token by passing a non-null value as the value of refreshToken request parameter. The
                    implementation of the `/api/auth/token/create` uses the value of the refreshToken request parameter
                    instead of generating a new value when the request parameter holds a non-null value.

                    Note that if the hash value of the specified refresh token already exists in Authlete's database,
                    the refresh token cannot be inserted and the `/api/auth/token/create` API will report an error.
                accessTokenPersistent:
                  type: boolean
                  description: |
                    Get whether the access token expires or not. By default, all access tokens expire after a period
                    of time determined by their service.

                    If this request parameter is `true`, then the access token will not automatically expire and must
                    be revoked or deleted manually at the service. If this request parameter is true, the `accessTokenDuration`
                    request parameter is ignored.
                certificateThumbprint:
                  type: string
                  description: |
                    The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
                    with the corresponding value MUST be presented with the access token when it is used by a client.
                    The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
                dpopKeyThumbprint:
                  type: string
                  description: |
                    The thumbprint of the public key used for DPoP presentation of this token. If this property is
                    set, a DPoP proof signed with the corresponding private key MUST be presented with the access
                    token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
                authorizationDetails:
                  $ref: '#/components/schemas/AuthorizationDetails'
                resources:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: |
                    The value of the resources to associate with the token. This property represents the value of
                    one or more `resource` request parameters which is defined in "RFC8707 Resource Indicators for
                    OAuth 2.0".
                forExternalAttachment:
                  type: boolean
                  description: |
                    the flag which indicates whether the access token is for an external
                    attachment.
                jwtAtClaims:
                  type: string
                  description: |
                    Additional claims that are added to the payload part of the JWT access token.
                acr:
                  type: string
                  description: |
                    The Authentication Context Class Reference of the user authentication that the authorization server performed 
                    during the course of issuing the access token.
                authTime:
                  type: integer
                  format: int64
                  description: |
                    The time when the user authentication was performed during the course of issuing the access token.
                clientEntityIdUsed:
                  type: boolean
                  description: |
                    Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
            example:
              grantType: AUTHORIZATION_CODE
              clientId: 26888344961664
              subject: john
              scopes:
                - history.read
                - timeline.read
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token~1create/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - FORBIDDEN
                      - OK
                    description: The next action that the authorization server implementation should take.
                  accessToken:
                    type: string
                    description: The newly issued access token.
                  clientId:
                    type: integer
                    format: int64
                    description: |
                      The ID of the client application associated with the access token.
                  expiresAt:
                    type: integer
                    format: int64
                    description: |
                      The time at which the access token expires.
                  expiresIn:
                    type: integer
                    format: int64
                    description: |
                      The duration of the newly issued access token in seconds.
                  grantType:
                    type: string
                    description: |
                      The grant type for the newly issued access token.
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: |
                      The extra properties associated with the access token.
                  refreshToken:
                    type: string
                    description: |
                      The newly issued refresh token.
                  scopes:
                    type: array
                    items:
                      type: string
                    description: |
                      Scopes which are associated with the access token.
                  subject:
                    type: string
                    description: |
                      The subject (= unique identifier) of the user associated with the newly issued access
                      token.
                  tokenType:
                    type: string
                    description: |
                      The token type of the access token.
                  jwtAccessToken:
                    type: string
                    description: |
                      If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
                      is set to a `non-null` value), a JWT-based access token is issued along with the original
                      random-string one.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  forExternalAttachment:
                    type: boolean
                    description: |
                      the flag which indicates whether the access token is for an external
                      attachment.
                  tokenId:
                    type: string
                    description: |
                      Set the unique token identifier.
                  refreshTokenScopes:
                    type: array
                    items:
                      type: string
                    description: |
                      The scopes associated with the refresh token. May be null.
              example:
                resultCode: A109001
                resultMessage: '[A109001] An access token was created successfully: authorization_code, client = 26888344961664'
                accessToken: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
                action: OK
                clientId: 26888344961664
                expiresAt: 1642048148973
                expiresIn: 3600
                grantType: AUTHORIZATION_CODE
                refreshToken: 9beh15GWkGLseBBO1tPobnsGpKLHV3mTkm0EWnNBa4g
                scopes:
                  - history.read
                  - timeline.read
                subject: john
                tokenType: Bearer
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_create_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/create \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "grantType": "AUTHORIZATION_CODE", "clientId": 26888344961664, "subject": "john", "scopes": [ "history.read", "timeline.read" ] }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenCreateRequest req = new TokenCreateRequest();
            req.setGrantType(GrantType.AUTHORIZATION_CODE)
            req.setClientId(26888344961664)
            req.setSubject("john")
            req.setScopes({ "history.read", "timeline.read" });

            api.tokenCreate(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenCreateRequest()
            req.grantType = GrantType.AUTHORIZATION_CODE
            req.clientId = 26888344961664
            req.subject = 'john'
            req.scopes = [ 'history.read', 'timeline.read' ]

            api.tokenCreate(req)
      tags:
        - Token Operations
  '/api/{serviceId}/auth/token/update':
    post:
      summary: Update Access Token
      description: |
        Update an access token.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
              properties:
                accessToken:
                  type: string
                  description: |
                    An access token.
                accessTokenExpiresAt:
                  type: integer
                  format: int64
                  description: |
                    A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).
                    If the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0
                    (or negative), the expiration date of the access token is not changed.
                scopes:
                  type: array
                  items:
                    type: string
                  description: |
                    A new set of scopes assigned to the access token. Scopes that are not supported by the service
                    and those that the client application associated with the access token is not allowed to request
                    are ignored on the server side. If the `scopes` request parameter is not included in a request or
                    its value is `null`, the scopes of the access token are not changed. Note that `properties` parameter
                    is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
                    if you want to specify `properties`.
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Property'
                  description: |
                    A new set of properties assigned to the access token. If the `properties` request parameter is
                    not included in a request or its value is null, the properties of the access token are not changed.
                accessTokenExpiresAtUpdatedOnScopeUpdate:
                  type: boolean
                  description: |
                    A boolean request parameter which indicates whether the API attempts to update the expiration
                    date of the access token when the scopes linked to the access token are changed by this request.
                accessTokenHash:
                  type: string
                  description: |
                    The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
                    but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
                accessTokenValueUpdated:
                  type: boolean
                  description: |
                    A boolean request parameter which indicates whether to update the value of the access token in
                    the data store. If this parameter is set to `true` then a new access token value is generated
                    by the server and returned in the response.
                accessTokenPersistent:
                  type: boolean
                  description: |
                    The flag which indicates whether the access token expires or not. By default, all access tokens
                    expire after a period of time determined by their service. If this request parameter is `true`
                    then the access token will not automatically expire and must be revoked or deleted manually at
                    the service.

                    If this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.
                    If this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed
                    normally.
                certificateThumbprint:
                  type: string
                  description: |
                    The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
                    with the corresponding value MUST be presented with the access token when it is used by a client.
                    The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
                dpopKeyThumbprint:
                  type: string
                  description: |
                    The thumbprint of the public key used for DPoP presentation of this token. If this property is
                    set, a DPoP proof signed with the corresponding private key MUST be presented with the access
                    token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
                authorizationDetails:
                  $ref: '#/components/schemas/AuthorizationDetails'
                forExternalAttachment:
                  type: boolean
                  description: |
                    the flag which indicates whether the access token is for an external
                    attachment.
            example:
              accessToken: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
              scopes:
                - history.read
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token~1update/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - BAD_REQUEST
                      - FORBIDDEN
                      - NOT_FOUND
                      - OK
                    description: The next action that the authorization server implementation should take.
                  accessToken:
                    type: string
                    description: The access token which has been specified by the request.
                  accessTokenExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      The date at which the access token will expire.
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                    description: |
                      The extra properties associated with the access token.
                  scopes:
                    type: array
                    items:
                      type: string
                    description: |
                      The scopes associated with the access token.
                  authorizationDetails:
                    $ref: '#/components/schemas/AuthorizationDetails'
                  tokenType:
                    type: string
                    description: |
                      The token type associated with the access token.
                  forExternalAttachment:
                    type: boolean
                    description: |
                      the flag which indicates whether the access token is for an external
                      attachment.
                  tokenId:
                    type: string
                    description: |
                      Set the unique token identifier.
                  refreshTokenExpiresAt:
                    type: integer
                    format: int64
                    description: |
                      The datetime at which the newly issued refresh token will expire.
                      The value is represented in milliseconds since the Unix epoch (1970-01-01).
              example:
                resultCode: A135001
                resultMessage: '[A135001] Updated the access token successfully.'
                accessToken: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
                accessTokenExpiresAt: 1642048149000
                action: OK
                scopes:
                  - history.read
                tokenType: Bearer
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_update_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/update \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "accessToken": "Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q", "scopes": [ "history.read" ] }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenUpdateRequest req = new TokenUpdateRequest();
            req.setAccessToken("JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs");
            req.setScopes({ "history.read" });

            api.tokenUpdate(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenUpdateRequest()
            req.accessToken = 'JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs'
            req.scopes = [ 'history.read' ]

            api.tokenUpdate(req)
      tags:
        - Token Operations
  '/api/{serviceId}/auth/token/delete/{accessTokenIdentifier}':
    delete:
      summary: Delete Access Token
      description: |
        Delete an access token.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: accessTokenIdentifier
          schema:
            type: string
          required: true
          description: |
            The identifier of an existing access token. The identifier is the value of the access token
            or the value of the hash of the access token.
      responses:
        '204':
          description: |
            The access token was successfully deleted.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_delete_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X DELETE https://us.authlete.com/api/21653835348762/auth/token/delete/Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            String accessTokenIdentifier = "Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg";

            api.tokenDelete(accessToken);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            accessTokenIdentifier = 'Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg'

            api.tokenDelete(accessToken)
      tags:
        - Token Operations
  '/api/{serviceId}/auth/token/revoke':
    post:
      summary: Revoke Access Token
      description: |
        Revoke an access token.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessTokenIdentifier:
                  type: string
                  description: |
                    The identifier of an access token to revoke

                    The hash of an access token is recognized as an identifier as well as the access token itself.
                refreshTokenIdentifier:
                  type: string
                  description: |
                    The identifier of a refresh token to revoke.

                    The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
                clientIdentifier:
                  type: string
                  description: |
                    The client ID of the access token to be revoked.

                    Both the numeric client ID and the alias are recognized as an identifier
                    of a client.
                subject:
                  type: string
                  description: |
                    The subject of a resource owner.
            example:
              accessTokenIdentifier: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1token~1revoke/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  count:
                    type: integer
                    description: The number of tokens revoked
              example:
                resultCode: A135001
                resultMessage: '[A135001] Updated the access token successfully.'
                accessToken: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
                accessTokenExpiresAt: 1642048149000
                action: OK
                scopes:
                  - history.read
                tokenType: Bearer
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: auth_token_revoke_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/revoke \
            -H 'Content-Type:application/json' \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d '{ "accessTokenIdentifier": "Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenUpdateRequest req = new TokenUpdateRequest();
            req.setAccessToken("JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs");
            req.setScopes({ "history.read" });

            api.tokenUpdate(req);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenUpdateRequest()
            req.accessToken = 'JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs'
            req.scopes = [ 'history.read' ]

            api.tokenUpdate(req)
      tags:
        - Token Operations
  '/api/{serviceId}/jose/verify':
    post:
      summary: Verify JOSE
      description: |
        This API verifies a JOSE object.
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required:
                - jose
              properties:
                jose:
                  type: string
                  description: |
                    A JOSE object.
                mandatoryClaims:
                  type: string
                  description: |
                    Mandatory claims that are required to be included in the JOSE object.
                clockSkew:
                  type: integer
                  format: int32
                  description: |
                    Allowable clock skew in seconds.
                clientIdentifier:
                  type: string
                  description: |
                    The identifier of the client application whose keys are required for verification of the JOSE
                    object.
                signedByClient:
                  type: boolean
                  description: |
                    The flag which indicates whether the signature of the JOSE object has been signed by a client
                    application with the client's private key or a shared symmetric key.
            example:
              jose: eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA
              clockSkew: 100
              signedByClient: true
              clientIdentifier: '57297408867'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1jose~1verify/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  valid:
                    type: boolean
                    description: |
                      The result of the verification on the JOSE object.
                  signatureValid:
                    type: boolean
                    description: |
                      The result of the signature verification.
                  missingClaims:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of missing claims.
                  invalidClaims:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of invalid claims.
                  errorDescriptions:
                    type: array
                    items:
                      type: string
                    description: |
                      The list of error messages.
              example:
                resultCode: A160001
                resultMessage: '[A160001] The JOSE is valid.'
                signatureValid: true
                valid: true
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: jose_verify_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/jose/verify \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
            -d jose=eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA \
            -d clockSkew=100 \
            -d signedByClient=true \
            -d clientIdentifier=57297408867
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            JoseVerifyRequest req = new JoseVerifyRequest();
            req.setJose("eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw");
            req.setClockSkew(100);
            req.setSinedByClient(true);
            req.setClientIdentifier("57297408867");

            api.verifyJose(request);
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = JoseVerifyRequest()
            req.jose = 'eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw'
            req.clockSkew = 100
            req.sinedByClient = True
            req.clientIdentifier = '57297408867'

            api.verifyJose(req)
      tags:
        - Jose Object
  '/api/{serviceId}/federation/configuration':
    post:
      summary: Process Entity Configuration Request
      description: |
        This API gathers the federation configuration about a service.

        The authorization server implementation should
        retrieve the value of the <code>action</code>
        response parameter from the API response and take the following steps
        according to the value.

        <h3><code>OK</code></h3>

        When the value of the <code> action</code> response
        parameter is <code>OK</code>, it means that Authlete
        could prepare an entity configuration successfully.

        In this case, the implementation of the entity configuration endpoint of the
        authorization server should return an HTTP response to the client application
        with the HTTP status code "`200 OK`" and the content type
        "`application/entity-statement+jwt`". The message body (= an entity
        configuration in the JWT format) of the response has been prepared by
        Authlete's `/federation/configuration` API and it is available as the
        <code>responseContent</code> response parameter.

        The implementation of the entity configuration endpoint can construct an
        HTTP response by doing like below.

        <pre style="border: solid 1px black; padding: 0.5em;">
        200 OK
        Content-Type: application/entity-statement+jwt
        (Other HTTP headers)

        <i>(the value of the responseContent response parameter)</i></pre>

        <h3><code>NOT_FOUND</code></h3>

        When the value of the <code> action</code> response
        parameter is <code>NOT_FOUND</code>, it means that
        the service configuration has not enabled the feature of <a href=
        "https://openid.net/specs/openid-connect-federation-1_0.html">OpenID Connect
        Federation 1.0</a> and so the client application should have not access the
        entity configuration endpoint.

        In this case, the implementation of the entity configuration endpoint of the
        authorization server should return an HTTP response to the client application
        with the HTTP status code "`404 Not Found`" and the content type
        "`application/json`". The message body (= error information in the JSON
        format) of the response has been prepared by Authlete's
        `/federation/configuration` API and it is available as the
        <code>responseContent</code> response parameter.

        The implementation of the entity configuration endpoint can construct an
        HTTP response by doing like below.

        <pre style="border: solid 1px black; padding: 0.5em;">
        404 Not Found
        Content-Type: application/json
        (Other HTTP headers)

        <i>(the value of the responseContent response parameter)</i></pre>

        <h3><code>INTERNAL_SERVER_ERROR</code></h3>

        could prepare an entity configuration successfully.

        In this case, the implementation of the entity configuration endpoint of the
        authorization server should return an HTTP response to the client application
        with the HTTP status code "`200 OK`" and the content type
        "`application/entity-statement+jwt`". The message body (= an entity
        configuration in the JWT format) of the response has been prepared by
        Authlete's `/federation/configuration` API and it is available as the
        <code>responseContent</code> response parameter.

        The implementation of the entity configuration endpoint can construct an
        HTTP response by doing like below.

        <pre style="border: solid 1px black; padding: 0.5em;">
        200 OK
        Content-Type: application/entity-statement+jwt
        (Other HTTP headers)

        <i>(the value of the responseContent response parameter)</i></pre>


        </details>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - NOT_FOUND
                      - INTERNAL_SERVER_ERROR
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation is to return to the client application.
                      Its format varies depending on the value of `action` parameter.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: federation_configuration_api
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v https://us.authlete.com/api/21653835348762/federation/configuration \
            -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            api.getFederationConfiguration();
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            api.getFederationConfiguration(True)
      tags:
        - Federation Endpoint
  '/api/{serviceId}/federation/registration':
    post:
      summary: Process Federation Registration Request
      description: |
        The Authlete API is for implementations of the <b>federation registration
        endpoint</b> that accepts "explicit client registration". Its details are
        defined in <a href="https://openid.net/specs/openid-connect-federation-1_0.html"
        >OpenID Connect Federation 1.0</a>.
        </p>

        <p>
        The endpoint accepts `POST` requests whose `Content-Type`
        is either of the following.
        </p>

        <ol>
          <li>`application/entity-statement+jwt`
          <li>`application/trust-chain+json`
        </ol>

        <p>
        When the `Content-Type` of a request is
        `application/entity-statement+jwt`, the content of the request is
        the entity configuration of a relying party that is to be registered.
        In this case, the implementation of the federation registration endpoint
        should call Authlete's `/federation/registration` API with the
        entity configuration set to the `entityConfiguration` request
        parameter.
        </p>

        <p>
        On the other hand, when the `Content-Type` of a request is
        `application/trust-chain+json`, the content of the request is a
        JSON array that contains entity statements in JWT format. The sequence
        of the entity statements composes the trust chain of a relying party
        that is to be registered. In this case, the implementation of the
        federation registration endpoint should call Authlete's
        `/federation/registration` API with the trust chain set to the
        `trustChain` request parameter.
        </p>
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityConfiguration:
                  type: string
                  description: |
                    The entity configuration of a relying party.
                trustChain:
                  type: string
                  description: |
                    The trust chain of a relying party.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1federation~1registration/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - BAD_REQUEST
                      - NOT_FOUND
                      - INTERNAL_SERVER_ERROR
                    description: The next action that the authorization server implementation should take.
                  responseContent:
                    type: string
                    description: |
                      The content that the authorization server implementation can use as the value of `WWW-Authenticate`
                      header on errors.
                  client:
                    $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: federation_registration_api
      tags:
        - Federation Endpoint
  /api/info:
    get:
      summary: Get Server Metadata
      description: |
        get the server version and enabled features
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                required:
                  - version
                  - features
                properties:
                  version:
                    type: string
                    description: The server version.
                  features:
                    type: array
                    items:
                      type: string
                    description: the features that the server supports.
              example:
                version: 2.3.0
                features:
                  - ciba
                  - dcr
                  - deviceflow
                  - fapi
                  - openbanking
                  - hsm
                  - gm
                  - tc
                  - oidc_federation
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
              example:
                resultCode: A001201
                resultMessage: '[A001201] /auth/authorization, TLS must be used.'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1info/get/responses/400/content/application~1json/schema'
              example:
                resultCode: A001202
                resultMessage: '[A001202] /auth/authorization, Authorization header is missing.'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1info/get/responses/400/content/application~1json/schema'
              example:
                resultCode: A001215
                resultMessage: '[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1info/get/responses/400/content/application~1json/schema'
              example:
                resultCode: A001101
                resultMessage: '[A001101] /auth/authorization, Authlete Server error.'
      operationId: info_api
      tags:
        - Utility Endpoints
  '/api/{serviceId}/client/extension/requestable_scopes/get/{clientId}':
    get:
      summary: Get Requestable Scopes
      description: |
        Get the requestable scopes per client
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: |
            A client ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestableScopes:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_extension_requestables_scopes_get_api
      tags:
        - Client Management
  '/api/{serviceId}/client/extension/requestable_scopes/update/{clientId}':
    put:
      summary: Update Requestable Scopes
      description: |
        Update requestable scopes of a client
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: |
            A client ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestableScopes:
                  type: array
                  items:
                    type: string
                  description: |
                    The set of scopes that the client application is allowed to request.
                    This parameter will be one of the following. Details are described in the description.


                    - an empty set
                    - a set with at least one element

                    If this parameter contains scopes that the service does not support, those scopes are just
                    ignored. Also, if this parameter is `null` or is not included in the request, it is equivalent
                    to calling `/client/extension/requestable_scopes/delete` API.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestableScopes:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_extension_requestables_scopes_update_api
      tags:
        - Client Management
  '/api/{serviceId}/client/extension/requestable_scopes/delete/{clientId}':
    delete:
      summary: Delete Requestable Scopes
      description: |
        Delete requestable scopes of a client
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: |
            A client ID.
      responses:
        '204':
          description: Requestable scopes was successfully deleted.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: client_extension_requestables_scopes_delete_api
      tags:
        - Client Management
  '/api/{serviceId}/hsk/create':
    post:
      summary: Create Security Key
      x-badges:
        - color: primary-color
          label: "\U0001F3E2 Dedicated Cloud Required"
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                kty:
                  type: string
                  description: |
                    The key type (EC or RSA)
                use:
                  type: string
                  description: |
                    The key on the HSM. 
                    When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
                    When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
                kid:
                  type: string
                  description: |
                    Key ID for the key on the HSM.
                hsmName:
                  type: string
                  description: |
                    The name of the HSM.
                    The identifier for the HSM that sits behind the Authlete server. For example, "google".
                handle:
                  type: string
                  description: |
                    The handle for the key on the HSM.
                    A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
                publicKey:
                  type: string
                  description: |
                    The public key that corresponds to the key on the HSM.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1hsk~1create/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - SUCCESS
                      - INVALID_REQUEST
                      - NOT_FOUND
                      - SERVER_ERROR
                    description: Result of the API call
                  hsk:
                    $ref: '#/components/schemas/Hsk'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: hsk_create_api
      tags:
        - Hardware Security Key
  '/api/{serviceId}/hsk/delete/{handle}':
    delete:
      summary: Delete Security Key
      x-badges:
        - color: primary-color
          label: "\U0001F3E2 Dedicated Cloud Required"
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: handle
          schema:
            type: string
          required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - SUCCESS
                      - INVALID_REQUEST
                      - NOT_FOUND
                      - SERVER_ERROR
                    description: Result of the API call
                  hsk:
                    $ref: '#/components/schemas/Hsk'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: hsk_delete_api
      tags:
        - Hardware Security Key
  '/api/{serviceId}/hsk/get/{handle}':
    get:
      summary: Get Security Key
      x-badges:
        - color: primary-color
          label: "\U0001F3E2 Dedicated Cloud Required"
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
        - in: path
          name: handle
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - SUCCESS
                      - INVALID_REQUEST
                      - NOT_FOUND
                      - SERVER_ERROR
                    description: Result of the API call
                  hsk:
                    $ref: '#/components/schemas/Hsk'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: hsk_get_api
      tags:
        - Hardware Security Key
  '/api/{serviceId}/hsk/get/list':
    get:
      summary: List Security Keys
      x-badges:
        - color: primary-color
          label: "\U0001F3E2 Dedicated Cloud Required"
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - SUCCESS
                      - INVALID_REQUEST
                      - SERVER_ERROR
                    description: Result of the API call
                  hsks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hsk'
                    description: List of HSK
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: hsk_get_list_api
      tags:
        - Hardware Security Key
  /api/misc/echo:
    get:
      summary: Echo
      description: |
        Echo test endpoint. Will return all path parameters in the request
      responses:
        '200':
          description: |
            Successfully echoed the request parameters
      operationId: misc_echo_api
      tags:
        - Utility Endpoints
  '/api/{serviceId}/vci/metadata':
    post:
      summary: '/api/{serviceId}/vci/metadata API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pretty
              properties:
                pretty:
                  type: boolean
                  description: |
                    The flag indicating whether the metadata is written in the pretty
                    format or not.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1metadata/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - NOT_FOUND
                      - INTERNAL_SERVER_ERROR
                    description: |
                      The next action that the implementation of the credential issuer
                      metadata endpoint (`/.well-known/openid-credential-issuer`)
                      should take after getting a response from Authlete's
                      `/vci/metadata` API.
                  responseContent:
                    type: string
                    description: |
                      Get the content that the implementation of the credential issuer
                      metadata endpoint should use when it constructs a response.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_metadata_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/jwtissuer':
    post:
      summary: '/api/{serviceId}/vci/jwtissuer API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pretty
              properties:
                pretty:
                  type: boolean
                  description: |
                    The flag indicating whether the metadata is written in the pretty
                    format or not.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1jwtissuer/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - NOT_FOUND
                      - INTERNAL_SERVER_ERROR
                    description: |
                      The next action that the implementation of the JWT issuer metadata
                      endpoint (`/.well-known/jwt-issuer`) should take after getting
                      a response from Authlete's `/vci/jwtissuer` API.
                  responseContent:
                    type: string
                    description: |
                      Get the content that the implementation of the credential issuer
                      metadata endpoint should use when it constructs a response.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_jwtissuer_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/jwks':
    post:
      summary: '/api/{serviceId}/vci/jwks API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pretty
              properties:
                pretty:
                  type: boolean
                  description: |
                    The flag indicating whether the metadata is written in the pretty
                    format or not.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1jwks/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - NOT_FOUND
                      - INTERNAL_SERVER_ERROR
                    description: |
                      The next action that the implementation of the JWK Set document
                      endpoint of the credential issuer should take after getting a
                      response from Authlete's `/vci/jwks` API.
                  responseContent:
                    type: string
                    description: |
                      Get the content that the implementation of the credential issuer
                      metadata endpoint should use when it constructs a response.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_jwks_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/offer/create':
    post:
      summary: '/api/{serviceId}/vci/offer/create API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credentials:
                  type: string
                  description: The value of the `credentials` object in the JSON format.
                authorizationCodeGrantIncluded:
                  type: boolean
                  description: |
                    The flag indicating whether the `authorization_code` object is
                    included in the `grants` object.
                issuerStateIncluded:
                  type: boolean
                  description: |
                    The flag indicating whether the `issuer_state` property is
                    included in the `authorization_code` object in the `grants`
                    object.
                preAuthorizedCodeGrantIncluded:
                  type: boolean
                  description: |
                    The flag to include the
                    `urn:ietf:params:oauth:grant-type:pre-authorized_code` object
                    in the `grants` object.
                userPinRequired:
                  type: boolean
                  description: |
                    The value of the `user_pin_required` property in the
                    `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
                    the `grants` object.
                userPinLength:
                  type: integer
                  format: int32
                  description: The length of the user PIN to generate.
                subject:
                  type: string
                  description: The subject associated with the credential offer.
                duration:
                  type: integer
                  format: int64
                  description: The duration of the credential offer.
                context:
                  type: string
                  description: The general-purpose arbitrary string.
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Property'
                  description: Extra properties to associate with the credential offer.
                jwtAtClaims:
                  type: string
                  description: |
                    Additional claims that are added to the payload part of the JWT
                    access token.
                authTime:
                  type: integer
                  format: int64
                  description: |
                    The time at which the user authentication was performed during
                    the course of issuing the credential offer.
                acr:
                  type: string
                  description: |
                    The Authentication Context Class Reference of the user authentication
                    performed during the course of issuing the credential offer.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1offer~1create/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - CREATED
                      - FORBIDDEN
                      - CALLER_ERROR
                      - AUTHLETE_ERROR
                    description: The result of the `/vci/offer/create` API call.
                  info:
                    $ref: '#/components/schemas/CredentialOfferInfo'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_offer_create_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/offer/info':
    post:
      summary: '/api/{serviceId}/vci/offer/info API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: The identifier of the credential offer.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1offer~1info/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - FORBIDDEN
                      - NOT_FOUND
                      - CALLER_ERROR
                      - AUTHLETE_ERROR
                    description: The result of the `/vci/offer/info` API call.
                  info:
                    $ref: '#/components/schemas/CredentialOfferInfo'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_offer_info_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/single/parse':
    post:
      summary: '/api/{serviceId}/vci/single/parse API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  description: The access token that came along with the credential request.
                requestContent:
                  type: string
                  description: The message body of the credential request.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1single~1parse/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - INTERNAL_SERVER_ERROR
                    description: The next action that the credential endpoint should take.
                  responseContent:
                    type: string
                    description: The content of the response to the request sender.
                  info:
                    $ref: '#/components/schemas/CredentialRequestInfo'
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_single_parse_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/single/issue':
    post:
      summary: '/api/{serviceId}/vci/single/issue API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  description: The access token that came along with the credential request.
                order:
                  $ref: '#/components/schemas/CredentialIssuanceOrder'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - ACCEPTED
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - INTERNAL_SERVER_ERROR
                      - CALLER_ERROR
                    description: |
                      The next action that the implementation of the credential endpoint
                      should take.
                  responseContent:
                    type: string
                    description: |
                      The content of the response that the implementation of the credential
                      endpoint should return.
                  transactionId:
                    type: string
                    description: |
                      The issued transaction ID.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_single_issue_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/batch/parse':
    post:
      summary: '/api/{serviceId}/vci/batch/parse API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  description: The access token that came along with the credential request.
                requestContent:
                  type: string
                  description: The message body of the batch credential request.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1batch~1parse/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - INTERNAL_SERVER_ERROR
                    description: The next action that the batch credential endpoint should take.
                  responseContent:
                    type: string
                    description: The content of the response to the request sender.
                  info:
                    type: array
                    items:
                      $ref: '#/components/schemas/CredentialRequestInfo'
                    description: |
                      Information about the credential requests in the batch credential
                      request.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_batch_parse_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/batch/issue':
    post:
      summary: '/api/{serviceId}/vci/batch/issue API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  description: The access token that came along with the credential request.
                orders:
                  type: array
                  items:
                    $ref: '#/components/schemas/CredentialIssuanceOrder'
                  description: The instructions for issuance of credentials and/or transaction IDs.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - INTERNAL_SERVER_ERROR
                      - CALLER_ERROR
                    description: |
                      The next action that the implementation of the batch credential
                      endpoint should take.
                  responseContent:
                    type: string
                    description: |
                      The content of the response that the implementation of the batch
                      credential endpoint should return.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_batch_issue_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/deferred/parse':
    post:
      summary: '/api/{serviceId}/vci/deferred/parse API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  description: The access token that came along with the deferred credential request.
                requestContent:
                  type: string
                  description: The message body of the deferred credential request.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1vci~1deferred~1parse/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - BAD_REQUEST
                      - UNAUTHORIZED
                      - FORBIDDEN
                      - INTERNAL_SERVER_ERROR
                    description: The next action that the deferred credential endpoint should take.
                  responseContent:
                    type: string
                    description: The content of the response to the request sender.
                  info:
                    $ref: '#/components/schemas/CredentialRequestInfo'
                    description: Information about the credential request bound to the transaction ID.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_deferred_parse_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/vci/deferred/issue':
    post:
      summary: '/api/{serviceId}/vci/deferred/issue API'
      description: null
      parameters:
        - in: path
          name: serviceId
          description: A service ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  $ref: '#/components/schemas/CredentialIssuanceOrder'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
                  action:
                    type: string
                    enum:
                      - OK
                      - FORBIDDEN
                      - INTERNAL_SERVER_ERROR
                      - CALLER_ERROR
                    description: |
                      The next action that the implementation of the deferred credential
                      endpoint should take.
                  responseContent:
                    type: string
                    description: |
                      The content of the response that the implementation of the deferred
                      credential endpoint should return.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      operationId: vci_deferred_issue_api
      tags:
        - Verifiable Credential Issuer
  '/api/{serviceId}/auth/authorization/ticket/info':
    get:
      summary: Get Ticket Information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
              properties:
                ticket:
                  type: string
                  description: The ticket that has been issued from the `/auth/authorization` API.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization~1ticket~1info/get/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    description: Information about the ticket.
                  action:
                    type: string
                    enum:
                      - OK
                      - NOT_FOUND
                      - CALLER_ERROR
                      - AUTHLETE_ERROR
                    description: The result of the `/auth/authorization/ticket/info` API call.
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      tags:
        - Authorization Endpoint
  '/api/{serviceId}/auth/authorization/ticket/update':
    post:
      summary: Update Ticket Information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - info
              properties:
                ticket:
                  type: string
                  description: The ticket.
                info:
                  type: string
                  description: The information about the ticket.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1api~1%7BserviceId%7D~1auth~1authorization~1ticket~1update/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    description: Information about the ticket.
                  action:
                    type: string
                    enum:
                      - OK
                      - NOT_FOUND
                      - CALLER_ERROR
                      - AUTHLETE_ERROR
                    description: The result of the /auth/authorization/ticket/info API call.
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
        '400':
          $ref: '#/paths/~1api~1info/get/responses/400'
        '401':
          $ref: '#/paths/~1api~1info/get/responses/401'
        '403':
          $ref: '#/paths/~1api~1info/get/responses/403'
        '500':
          $ref: '#/paths/~1api~1info/get/responses/500'
      tags:
        - Authorization Endpoint
components:
  securitySchemes:
    authlete:
      type: oauth2
      description: Click the <strong>Get Token</strong> button below to log in with your Authlete account and retrieve an access token for API access.
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.authlete.com/authorize'
          tokenUrl: 'https://login.authlete.com/token'
          scopes:
            authlete: Inherit Authlete Account Permissions
          x-client-id: 1466450095
          x-default-scopes: authlete
          x-pkce-only: true
    bearer:
      type: http
      scheme: bearer
      description: Obtain an **access token** and set it in the following textbox.
  schemas:
    AccessToken:
      type: object
      properties:
        accessTokenHash:
          type: string
          description: The hash of the access token.
        accessTokenExpiresAt:
          type: integer
          format: int64
          description: The timestamp at which the access token will expire.
        refreshTokenHash:
          type: string
          description: The hash of the refresh token.
        refreshTokenExpiresAt:
          type: integer
          format: int64
          description: The timestamp at which the refresh token will expire.
        createdAt:
          type: integer
          format: int64
          description: |
            The timestamp at which the access token was first created.
        lastRefreshedAt:
          type: integer
          format: int64
          description: |
            The timestamp at which the access token was last refreshed using the refresh token.
        clientId:
          type: integer
          format: int64
          description: |
            The ID of the client associated with the access token.
        subject:
          type: string
          description: |
            The subject (= unique user ID) associated with the access token.
        grantType:
          $ref: '#/components/schemas/GrantType'
        scopes:
          type: array
          items:
            type: string
          description: |
            The scopes associated with the access token.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
          description: |
            The properties associated with the access token.
    ApplicationType:
      type: string
      description: |
        The application type. The value of this property affects the validation steps for a redirect URI.
        See the description about `redirectUris` property for more details.
      enum:
        - WEB
        - NATIVE
    AuthorizationDetails:
      type: object
      description: |
        The authorization details. This represents the value of the `authorization_details`
        request parameter in the preceding device authorization request which is defined in
        "OAuth 2.0 Rich Authorization Requests".
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationDetailsElement'
          description: |
            Elements of this authorization details.
    AuthorizationDetailsElement:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: |
            The type of this element.

            From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
            This field MAY define which other elements are allowed in the request. This element is REQUIRED."_

            This property is always NOT `null`.
        locations:
          type: array
          items:
            type: string
          description: |
            The resources and/or resource servers. This property may be `null`.

            From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
            the resource or resource server. This is typically composed of URIs."_

            This property may be `null`.
        actions:
          type: array
          items:
            type: string
          description: |
            The actions.

            From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
            to be taken at the resource. The values of the strings are determined by the API being protected."_

            This property may be `null`.
        dataTypes:
          type: array
          items:
            type: string
          description: |
            From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
            from the resource."_

            This property may be `null`.
        identifier:
          type: string
          description: |
            The identifier of a specific resource.
            From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_

            This property may be `null`.
        privileges:
          type: array
          items:
            type: string
          description: |
            The types or levels of privilege.
            From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
            levels of privilege being requested at the resource."_

            This property may be `null`.
        otherFields:
          type: string
          description: |
            The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
            The content and semantics are specific to the deployment and the use case implemented.
    ClaimType:
      type: string
      enum:
        - NORMAL
        - AGGREGATED
        - DISTRIBUTED
    ClientAuthenticationMethod:
      type: string
      description: |
        The client authentication method that the client application declares that it uses at the token
        endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
        Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
      enum:
        - NONE
        - CLIENT_SECRET_BASIC
        - CLIENT_SECRET_POST
        - CLIENT_SECRET_JWT
        - PRIVATE_KEY_JWT
        - TLS_CLIENT_AUTH
        - SELF_SIGNED_TLS_CLIENT_AUTH
    ClientExtension:
      type: object
      properties:
        requestableScopes:
          type: array
          items:
            type: string
          description: |
            The set of scopes that the client application is allowed to request. This paramter will be one
            of the following.

              - `null`
              - an empty set
              - a set with at least one element

            When the value of this parameter is `null`, it means that the set of scopes that the client
            application is allowed to request is the set of the scopes that the service supports. When the
            value of this parameter is an empty set, it means that the client application is not allowed to
            request any scopes. When the value of this parameter is a set with at least one element, it means
            that the set is the set of scopes that the client application is allowed to request.
        requestableScopesEnabled:
          type: boolean
          description: |
            The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
            can define the set of scopes which this client application can request. If `false`, this client
            application can request any scope which is supported by the authorization server.
        accessTokenDuration:
          type: integer
          format: int64
          description: |
            The value of the duration of access tokens per client in seconds. In normal cases, the value of
            the service's `accessTokenDuration` property is used as the duration of access tokens issued by
            the service. However, if this `accessTokenDuration` property holds a non-zero positive number
            and its value is less than the duration configured by the service, the value is used as the duration
            of access tokens issued to the client application.

            Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
            too. Authlete chooses the minimum value among the candidates.
        refreshTokenDuration:
          type: integer
          format: int64
          description: |
            The value of the duration of refresh tokens per client in seconds. In normal cases, the value
            of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
            by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
            and its value is less than the duration configured by the service, the value is used as the duration
            of refresh tokens issued to the client application.

            Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
            too. Authlete chooses the minimum value among the candidates.
        tokenExchangePermitted:
          type: boolean
          description: |
            Get the flag indicating whether the client is explicitly given a
            permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
    Client:
      type: object
      properties:
        number:
          type: integer
          format: int32
          readOnly: true
          description: |
            The sequential number of the client. The value of this property is assigned by Authlete.
        serviceNumber:
          type: integer
          format: int32
          readOnly: true
          description: |
            The sequential number of the service of the client application. The value of this property is
            assigned by Authlete.
        clientName:
          type: string
          description: |
            The name of the client application. This property corresponds to `client_name` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        clientNames:
          type: array
          items:
            $ref: '#/components/schemas/TaggedValue'
          description: |
            Client names with language tags. If the client application has different names for different
            languages, this property can be used to register the names.
        description:
          type: string
          description: The description about the client application.
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/TaggedValue'
          description: |
            Descriptions about the client application with language tags. If the client application has different
            descriptions for different languages, this property can be used to register the descriptions.
        clientId:
          type: integer
          format: int64
          readOnly: true
          description: The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
        clientSecret:
          type: string
          readOnly: true
          description: |
            The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
            property is assigned by Authlete.

            Note that Authlete issues a client secret even to a "public" client application, but the client
            application should not use the client secret unless it changes its client type to "confidential".
            That is, a public client application should behave as if it had not been issued a client secret.
            To be specific, a token request from a public client of Authlete should not come along with a
            client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
            says as follows.

            > Confidential clients or other clients issued client credentials MUST authenticate with the
            authorization server as described in Section 2.3 when making requests to the token endpoint.
        clientIdAlias:
          type: string
          description: |
            The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
            default, this is a string version of the `clientId` property.
        clientIdAliasEnabled:
          type: boolean
          description: Deprecated. Always set to `true`.
        clientType:
          type: string
          description: |
            The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
            for details.
          enum:
            - PUBLIC
            - CONFIDENTIAL
        applicationType:
          $ref: '#/components/schemas/ApplicationType'
        logoUri:
          type: string
          description: |
            The URL pointing to the logo image of the client application.

            This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        logoUris:
          type: array
          items:
            $ref: '#/components/schemas/TaggedValue'
          description: |
            Logo image URLs with language tags. If the client application has different logo images for
            different languages, this property can be used to register URLs of the images.
        contacts:
          type: array
          items:
            type: string
          description: |
            An array of email addresses of people responsible for the client application.

            This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
            Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        tlsClientCertificateBoundAccessTokens:
          type: boolean
          description: |
            The flag to indicate whether this client use TLS client certificate bound access tokens.
        dynamicallyRegistered:
          type: boolean
          readOnly: true
          description: |
            The flag to indicate whether this client has been registered dynamically.
            For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
        softwareId:
          type: string
          description: |
            The unique identifier string assigned by the client developer or software publisher used by
            registration endpoints to identify the client software to be dynamically registered.

            This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
            of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
        softwareVersion:
          type: string
          description: |
            The version identifier string for the client software identified by the software ID.

            This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
            of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
        registrationAccessTokenHash:
          type: string
          description: |
            The hash of the registration access token for this client.
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
        modifiedAt:
          type: integer
          format: int64
          readOnly: true
          description: The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
        grantTypes:
          type: array
          items:
            $ref: '#/components/schemas/GrantType'
          description: |
            A string array of grant types which the client application declares that it will restrict itself to using.
            This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
            2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        responseTypes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseType'
          description: |
            A string array of response types which the client application declares that it will restrict itself to using.
            This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
            2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        redirectUris:
          type: array
          items:
            type: string
          description: |
            Redirect URIs that the client application uses to receive a response from the authorization endpoint.
            Requirements for a redirect URI are as follows.

            **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))

            - Must be an absolute URI.
            - Must not have a fragment component.

            **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
            application_type")

            - The scheme of the redirect URI used for Implicit Grant by a client application whose application
            is `web` must be `https`. This is checked at runtime by Authlete.
            - The hostname of the redirect URI used for Implicit Grant by a client application whose application
            type is `web` must not be `localhost`. This is checked at runtime by Authlete.
            - The scheme of the redirect URI used by a client application whose application type is `native`
            must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
            is `localhost`. This is checked at runtime by Authlete.

            **Requirements by Authlete**

            - Must consist of printable ASCII letters only.
            - Must not exceed 200 letters.

            Note that Authlete allows the application type to be `null`. In other words, a client application
            does not have to choose `web` or `native` as its application type.
            If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.

            An authorization request from a client application which has not registered any redirect URI
            fails unless at least all the following conditions are satisfied.

            - The client type of the client application is `confidential`.
            - The value of `response_type` request parameter is `code`.
            - The authorization request has the `redirect_uri` request parameter.
            - The value of `scope` request parameter does not contain `openid`.

            RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
            Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
            details), but OpenID Connect requires exact match.
        authorizationSignAlg:
          $ref: '#/components/schemas/JwsAlg'
        authorizationEncryptionAlg:
          $ref: '#/components/schemas/JweAlg'
        authorizationEncryptionEnc:
          $ref: '#/components/schemas/JweEnc'
        tokenAuthMethod:
          $ref: '#/components/schemas/ClientAuthenticationMethod'
        tokenAuthSignAlg:
          $ref: '#/components/schemas/JwsAlg'
        selfSignedCertificateKeyId:
          type: string
          description: |
            The key ID of a JWK containing a self-signed certificate of this client.
        tlsClientAuthSubjectDn:
          type: string
          description: |
            The string representation of the expected subject distinguished name of the certificate this
            client will use in mutual TLS authentication.

            See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
        tlsClientAuthSanDns:
          type: string
          description: |
            The string representation of the expected DNS subject alternative name of the certificate this
            client will use in mutual TLS authentication.

            See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
        tlsClientAuthSanUri:
          type: string
          description: |
            The string representation of the expected URI subject alternative name of the certificate this
            client will use in mutual TLS authentication.

            See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
        tlsClientAuthSanIp:
          type: string
          description: |
            The string representation of the expected IP address subject alternative name of the certificate
            this client will use in mutual TLS authentication.

            See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
        tlsClientAuthSanEmail:
          type: string
          description: |
            The string representation of the expected email address subject alternative name of the certificate
            this client will use in mutual TLS authentication.

            See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
        parRequired:
          type: boolean
          description: |
            The flag to indicate whether this client is required to use the pushed authorization request endpoint.
            This property corresponds to the `require_pushed_authorization_requests` client metadata defined
            in "OAuth 2.0 Pushed Authorization Requests".
        requestObjectRequired:
          type: boolean
          description: |
            The flag to indicate whether authorization requests from this client are always required to
            utilize a request object by using either `request` or `request_uri` request parameter.

            If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
            set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
            client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
        requestSignAlg:
          $ref: '#/components/schemas/JwsAlg'
        requestEncryptionAlg:
          $ref: '#/components/schemas/JweAlg'
        requestEncryptionEnc:
          $ref: '#/components/schemas/JweEnc'
        requestUris:
          type: array
          items:
            type: string
          description: |
            An array of URLs each of which points to a request object.

            Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
            This property is used for the pre-registration.
            See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
        defaultMaxAge:
          type: integer
          format: int32
          description: |
            The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.

            This property corresponds to `default_max_age` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        defaultAcrs:
          type: array
          items:
            type: string
          description: |
            The default ACRs (Authentication Context Class References). This value is used when an authorization
            request from the client application has neither `acr_values` request parameter nor `acr` claim
            in claims request parameter.
        idTokenSignAlg:
          $ref: '#/components/schemas/JwsAlg'
        idTokenEncryptionAlg:
          $ref: '#/components/schemas/JweAlg'
        idTokenEncryptionEnc:
          $ref: '#/components/schemas/JweEnc'
        authTimeRequired:
          type: boolean
          description: |
            The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.

            This property corresponds to `require_auth_time` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        subjectType:
          $ref: '#/components/schemas/SubjectType'
        sectorIdentifierUri:
          type: string
          description: |
            The value of the sector identifier URI.
            This represents the `sector_identifier_uri` client metadata which is defined in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
        derivedSectorIdentifier:
          type: string
          readOnly: true
          description: |
            The sector identifier host component as derived from either the `sector_identifier_uri` or the
            registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
            are also registered, the value of this property is `null`.
        jwksUri:
          type: string
          description: |
            The URL pointing to the JWK Set of the client application.
            The content pointed to by the URL is JSON which complies with the format described in
            [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
            The JWK Set must not include private keys of the client application.

            If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
            and/or signs request objects, it must make available its JWK Set containing public keys for the
            encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
            Set from the URL as necessary.

            [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
            properties to be registered at the same time. However, Authlete does not use the content of `jwks`
            when `jwksUri` is registered.

            This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        jwks:
          type: string
          description: |
            The content of the JWK Set of the client application.
            The format is described in
            [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
            The JWK Set must not include private keys of the client application.

            [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
            properties to be registered at the same time. However, Authlete does not use the content of `jwks`
            when `jwksUri` is registered.

            This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        userInfoSignAlg:
          $ref: '#/components/schemas/JwsAlg'
        userInfoEncryptionAlg:
          $ref: '#/components/schemas/JweAlg'
        userInfoEncryptionEnc:
          $ref: '#/components/schemas/JweEnc'
        loginUri:
          type: string
          description: |
            The URL which a third party can use to initiate a login by the client application.

            This property corresponds to `initiate_login_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        tosUri:
          type: string
          description: |
            The URL pointing to the "Terms Of Service" page.

            This property corresponds to `tos_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        tosUris:
          type: array
          items:
            $ref: '#/components/schemas/TaggedValue'
          description: |
            URLs of "Terms Of Service" pages with language tags.

            If the client application has different "Terms Of Service" pages for different languages,
            this property can be used to register the URLs.
        policyUri:
          type: string
          description: |
            The URL pointing to the page which describes the policy as to how end-user's profile data is used.

            This property corresponds to `policy_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        policyUris:
          type: array
          items:
            $ref: '#/components/schemas/TaggedValue'
          description: |
            URLs of policy pages with language tags.
            If the client application has different policy pages for different languages, this property can be used to register the URLs.
        clientUri:
          type: string
          description: |
            The URL pointing to the home page of the client application.

            This property corresponds to `client_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
        clientUris:
          type: array
          items:
            $ref: '#/components/schemas/TaggedValue'
          description: |
            Home page URLs with language tags.
            If the client application has different home pages for different languages, this property can
            be used to register the URLs.
        bcDeliveryMode:
          type: string
          description: |
            The backchannel token delivery mode.

            This property corresponds to the `backchannel_token_delivery_mode` metadata.
            The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
            Backchannel Authentication)".
        bcNotificationEndpoint:
          type: string
          description: |
            The backchannel client notification endpoint.

            This property corresponds to the `backchannel_client_notification_endpoint` metadata.
            The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
            Backchannel Authentication)".
        bcRequestSignAlg:
          $ref: '#/components/schemas/JwsAlg'
        bcUserCodeRequired:
          type: boolean
          description: |
            The boolean flag to indicate whether a user code is required when this client makes a backchannel
            authentication request.

            This property corresponds to the `backchannel_user_code_parameter` metadata.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Pair'
          description: |
            The attributes of this client.
        extension:
          $ref: '#/components/schemas/ClientExtension'
        authorizationDetailsTypes:
          type: array
          items:
            type: string
          description: |
            The authorization details types that this client may use as values of the `type` field in
            `authorization_details`.

            This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
            Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.

            Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
            to align with the change made by the 5th draft of the RAR specification.
        customMetadata:
          type: string
          description: |
            The custom client metadata in JSON format.

            Standard specifications define client metadata as necessary. The following are such examples.

            * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
            * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
            * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
            * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
            * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
            * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)

            Standard client metadata included in Client Registration Request and Client Update Request (cf.
            [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
            and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
            to corresponding properties of the client application. For example, the value of the `client_name`
            client metadata in Client Registration/Update Request is set to the clientName property. On the
            other hand, unrecognized client metadata are discarded.

            By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
            of Service, Authlete can recognize them and stores their values into the database. The stored
            custom client metadata values can be referenced by this property.
        frontChannelRequestObjectEncryptionRequired:
          type: boolean
          description: |
            The flag indicating whether encryption of request object is required when the request object
            is passed through the front channel.

            This flag does not affect the processing of request objects at the Pushed Authorization Request
            Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
            Unecrypted request objects are accepted at the endpoint even if this flag is `true`.

            This flag does not indicate whether a request object is always required. There is a different
            flag, `requestObjectRequired`, for the purpose.

            Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
            flag of the service is `true`.
        requestObjectEncryptionAlgMatchRequired:
          type: boolean
          description: |
            The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
            client metadata.

            The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_alg
            >
            > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
              Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
              since this signals to the OP that a client_secret value needs to be returned from which the
              symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
              supported encryption algorithms or send unencrypted Request Objects, even when this parameter
              is present. If both signing and encryption are requested, the Request Object will be signed
              then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
              is that the RP is not declaring whether it might encrypt any Request Objects.

            The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
            Request Objects, even when this parameter is present."

            The property that represents the client metadata is `requestEncryptionAlg`. See the description
            of `requestEncryptionAlg` for details.

            Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
            flag of the service is `true`.
        requestObjectEncryptionEncMatchRequired:
          type: boolean
          description: |
            The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
            client metadata.

            The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_enc
            >
            > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
              Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
              value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
              MUST also be provided.

            The property that represents the client metadata is `requestEncryptionEnc`. See the description
            of `requestEncryptionEnc`  for details.

            Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
            flag of the service is `true`.
        digestAlgorithm:
          type: string
          description: |
            The digest algorithm that this client requests the server to use
            when it computes digest values of <a href=
            "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
            >external attachments</a>, which may be referenced from within ID tokens
            or userinfo responses (or any place that can have the `verified_claims` claim).

            Possible values are listed in the <a href=
            "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
            >Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),
            but the server does not necessarily support all the values there. When
            this property is omitted, `sha-256` is used as the default algorithm.

            This property corresponds to the `digest_algorithm` client metadata
            which was defined by the third implementer's draft of
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
        singleAccessTokenPerSubject:
          type: boolean
          description: |
            If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.

            Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.

            Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
        pkceRequired:
          type: boolean
          description: |
            The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.

            If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.

            See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
        pkceS256Required:
          type: boolean
          description: |
            The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.

            If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
            whenever it includes the `code_challenge` request parameter.
            Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
        dpopRequired:
          type: boolean
          description: |
            If the DPoP is required for this client
        automaticallyRegistered:
          type: boolean
          description: |
            The flag indicating whether this client was registered by the
            "automatic" client registration of OIDC Federation.
        explicitlyRegistered:
          type: boolean
          description: |
            The flag indicating whether this client was registered by the
            "explicit" client registration of OIDC Federation.
        rsRequestSigned:
          type: boolean
          description: |
            The flag indicating whether this service signs responses from the resource server.
        rsSignedRequestKeyId:
          type: string
          description: |
            The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
        clientRegistrationTypes:
          type: array
          items:
            type: string
            description: |
              Values for the `client_registration_types` RP metadata and the
               `client_registration_types_supported` OP metadata that are defined in
               [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
            enum:
              - AUTOMATIC
              - EXPLICIT
          description: |
            The client registration types that the client has declared it may use.
        organizationName:
          type: string
          description: |
            The human-readable name representing the organization that manages this client. This property corresponds
            to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
        signedJwksUri:
          type: string
          description: |
            The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
            corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
        entityId:
          type: string
          description: |
            the entity ID of this client.
        trustAnchorId:
          type: string
          description: |
            The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
            the mechanism defined in OpenID Connect Federation 1.0
        trustChain:
          type: array
          items:
            type: string
          description: |
            The trust chain that was used when this client was registered or updated by the mechanism defined in
            OpenID Connect Federation 1.0
        trustChainExpiresAt:
          type: integer
          format: int64
          description: |
            the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
            defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
        trustChainUpdatedAt:
          type: integer
          format: int64
          description: |
            the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
        locked:
          type: boolean
          description: |
            The flag which indicates whether this client is locked.
        credentialOfferEndpoint:
          type: string
          description: |
            The URL of the credential offer endpoint at which this client
            (wallet) receives a credential offer from the credential issuer.
        fapiModes:
          type: array
          items:
            type: string
            enum:
              - FAPI1_ADVANCED
              - FAPI1_BASELINE
              - FAPI2_MESSAGE_SIGNING_AUTH_REQ
              - FAPI2_MESSAGE_SIGNING_AUTH_RES
              - FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES
              - FAPI2_SECURITY
          description: |
            The FAPI modes for this client.

            When the value of this property is not `null`, Authlete always processes requests from this client
            based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
            is supported by the service, and the FAPI modes for the service are set to `null`.

            For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
            always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
            Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
            the service, and the FAPI modes for the service are set to `null`.
        responseModes:
          type: array
          items:
            type: string
            enum:
              - QUERY
              - FRAGMENT
              - FORM_POST
              - JWT
              - QUERY_JWT
              - FRAGMENT_JWT
              - FORM_POST_JWT
          description: The response modes that this client may use.
        credentialResponseEncryptionRequired:
          type: boolean
          description: True if credential responses to this client must be always encrypted.
    DeliveryMode:
      type: string
      enum:
        - PING
        - POLL
        - PUSH
    Display:
      type: string
      description: |
        The display mode which the client application requests by `display` request parameter.
        When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.

        It is ensured that the value of `display` is one of the supported display modes which are specified
        by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
        authorization request is not supported, an error is raised.

        Values for this property correspond to the values listed in
        "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
      enum:
        - PAGE
        - POPUP
        - TOUCH
        - WAP
    DynamicScope:
      type: object
      properties:
        name:
          type: string
          description: The scope name.
        value:
          type: string
          description: The scope value.
    GrantType:
      type: string
      description: |
        The grant type of the access token when the access token was created.
      enum:
        - AUTHORIZATION_CODE
        - IMPLICIT
        - PASSWORD
        - CLIENT_CREDENTIALS
        - REFRESH_TOKEN
        - CIBA
        - DEVICE_CODE
        - TOKEN_EXCHANGE
        - JWT_BEARER
    JweAlg:
      type: string
      description: |
        this is the 'alg' header value for encrypted JWT tokens.
        Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
        - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
        - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
        - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens

        **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
      enum:
        - RSA1_5
        - RSA_OAEP
        - RSA_OAEP_256
        - A128KW
        - A192KW
        - A256KW
        - DIR
        - ECDH_ES
        - ECDH_ES_A128KW
        - ECDH_ES_A192KW
        - ECDH_ES_A256KW
        - A128GCMKW
        - A192GCMKW
        - A256GCMKW
        - PBES2_HS256_A128KW
        - PBES2_HS384_A192KW
        - PBES2_HS512_A256KW
    JweEnc:
      type: string
      description: |
        This is the encryption algorithm to be used when encrypting a JWT on client or server side.
        Depending upon the context, this refers to encryption done by the client or by the server. For instance:
          - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
          - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
          - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
      enum:
        - A128CBC_HS256
        - A192CBC_HS384
        - A256CBC_HS512
        - A128GCM
        - A192GCM
        - A256GCM
    JwsAlg:
      type: string
      description: |
        The signature algorithm for JWT. This value is represented on 'alg' attribute
        of the header of JWT.

        it's semantics depends upon where is this defined, for instance:
          - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
          - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
          - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
      enum:
        - NONE
        - HS256
        - HS384
        - HS512
        - RS256
        - RS384
        - RS512
        - ES256
        - ES384
        - ES512
        - PS256
        - PS384
        - PS512
        - ES256K
        - EdDSA
    NamedUri:
      type: object
      properties:
        name:
          type: string
        uri:
          type: string
          format: uri
    Pair:
      type: object
      properties:
        key:
          type: string
          description: The key part.
        value:
          type: string
          description: The value part.
    Prompt:
      type: string
      description: |
        The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.

        When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.

        See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
      enum:
        - NONE
        - LOGIN
        - CONSENT
        - SELECT_ACCOUNT
    Property:
      type: object
      properties:
        key:
          type: string
          description: The key part.
        value:
          type: string
          description: The value part.
        hidden:
          type: boolean
          description: |
            The flag to indicate whether this property hidden from or visible to client applications.
            If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
    ResponseType:
      type: string
      enum:
        - NONE
        - CODE
        - TOKEN
        - ID_TOKEN
        - CODE_TOKEN
        - CODE_ID_TOKEN
        - ID_TOKEN_TOKEN
        - CODE_ID_TOKEN_TOKEN
    Scope:
      type: object
      properties:
        name:
          type: string
          description: The name of the scope.
        defaultEntry:
          type: boolean
          description: '`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. '
        description:
          type: string
          description: The description about the scope.
        descriptions:
          type: array
          description: The descriptions about this scope in multiple languages.
          items:
            $ref: '#/components/schemas/TaggedValue'
        attributes:
          type: array
          description: The attributes of the scope.
          items:
            $ref: '#/components/schemas/Pair'
    ServiceProfile:
      type: string
      enum:
        - FAPI
        - OPEN_BANKING
    Service:
      type: object
      properties:
        number:
          type: integer
          format: int32
          readOnly: true
          description: The sequential number of the service. The value of this property is assigned by Authlete.
        serviceName:
          type: string
          description: The name of this service.
        issuer:
          type: string
          description: |
            The issuer identifier of the service.

            A URL that starts with  https:// and has no query or fragment component.

            The value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)
            and `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        description:
          type: string
          description: The description about the service.
        apiKey:
          type: integer
          format: int64
          readOnly: true
          description: The service ID used in Authlete API calls. The value of this property is assigned by Authlete.
        clientIdAliasEnabled:
          type: boolean
          description: Deprecated. Always `true`.
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Pair'
          description: |
            The `metadata` of the service. The content of the returned array depends on contexts.
            The predefined service metadata is listed in the following table.

              | Key | Description |
              | --- | --- |
              | `clientCount` | The number of client applications which belong to this service.  |
        createdAt:
          type: integer
          format: int64
          readOnly: true
          description: |
            The time at which this service was created. The value is represented as milliseconds since the
            UNIX epoch (`1970-01-01`).
        modifiedAt:
          type: integer
          format: int64
          readOnly: true
          description: |
            The time at which this service was last modified. The value is represented as milliseconds since
            the UNIX epoch (1970-01-01).
        authenticationCallbackEndpoint:
          type: string
          format: uri
          description: |
            A Web API endpoint for user authentication which is to be prepared on the service side.

            The endpoint must be implemented if you do not implement the UI at the authorization endpoint
            but use the one provided by Authlete.

            The user authentication at the authorization endpoint provided by Authlete is performed by making
            a `POST` request to this endpoint.
        authenticationCallbackApiKey:
          type: string
          description: |
            API key for basic authentication at the authentication callback endpoint.

            If the value is not empty, Authlete generates Authorization header for Basic authentication when
            making a request to the authentication callback endpoint.
        authenticationCallbackApiSecret:
          type: string
          description: API secret for `basic` authentication at the authentication callback endpoint.
        supportedAcrs:
          readOnly: true
          type: array
          items:
            type: string
          description: |
            Values of acrs (authentication context class references) that the service supports.

            The value of this property is used as `acr_values_supported`
            property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        supportedGrantTypes:
          type: array
          items:
            $ref: '#/components/schemas/GrantType'
          description: |
            Values of `grant_type` request parameter that the service supports.

            The value of this property is used as `grant_types_supported property` in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        supportedResponseTypes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseType'
          description: |
            Values of `response_type` request parameter that
            the service supports. Valid values are listed in Response Type.

            The value of this property is used as `response_types_supported` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        supportedAuthorizationDetailsTypes:
          type: array
          items:
            type: string
          description: |
            The supported data types that can be used as values of the type field in `authorization_details`.

            This property corresponds to the `authorization_details_types_supported` metadata. See "OAuth 2.0
            Rich Authorization Requests" (RAR) for details.
        supportedServiceProfiles:
          type: array
          items:
            $ref: '#/components/schemas/ServiceProfile'
          description: |
            The profiles that this service supports.
        errorDescriptionOmitted:
          type: boolean
          description: |
            The flag to indicate whether the `error_description` response parameter is omitted.

            According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include
            the `error_description` response parameter in error responses.

            If `true`, Authlete does not embed the `error_description` response parameter in error responses.
        errorUriOmitted:
          type: boolean
          description: |
            The flag to indicate whether the `error_uri` response parameter is omitted.

            According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.

            If `true`, Authlete does not embed the
            `error_uri` response parameter in error responses.
        authorizationEndpoint:
          type: string
          format: uri
          description: |
            The authorization endpoint of the service.

            A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.

            The value of this property is used as `authorization_endpoint` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        directAuthorizationEndpointEnabled:
          type: boolean
          description: |
            The flag to indicate whether the direct authorization endpoint is enabled or not.

            The path of the endpoint is `/api/auth/authorization/direct/service-api-key`.
        supportedUiLocales:
          type: array
          items:
            type: string
          description: |
            UI locales that the service supports.

            Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.

            The value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        supportedDisplays:
          type: array
          items:
            $ref: '#/components/schemas/Display'
          description: |
            Values of `display` request parameter that service supports.

            The value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        pkceRequired:
          type: boolean
          description: |
            The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.

            If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.

            See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
        pkceS256Required:
          type: boolean
          description: |
            The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.

            If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
            whenever it includes the `code_challenge` request parameter.
            Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
        authorizationResponseDuration:
          type: integer
          format: int64
          description: |
            The duration of authorization response JWTs in seconds.

            [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
            `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
            from the authorization endpoint will be packed into a JWT. This property is used to compute the
            value of the `exp` claim of the JWT.
        tokenEndpoint:
          type: string
          format: uri
          description: |
            The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.

            A URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.

            The value of this property is used as `token_endpoint` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        directTokenEndpointEnabled:
          type: boolean
          description: |
            The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint
            is `/api/auth/token/direct/service-api-key`.
        supportedTokenAuthMethods:
          type: array
          items:
            $ref: '#/components/schemas/ClientAuthenticationMethod'
          description: |
            Client authentication methods supported by the token endpoint of the service.

            The value of this property is used as `token_endpoint_auth_methods_supports` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        missingClientIdAllowed:
          type: boolean
          description: |
            The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.

            This flag should not be set unless you have special reasons.
        revocationEndpoint:
          type: string
          format: uri
          description: |
            The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.

            A URL that starts with `https://`. For example, `https://example.com/auth/revocation`.
        directRevocationEndpointEnabled:
          type: boolean
          description: 'The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. '
        supportedRevocationAuthMethods:
          type: array
          items:
            $ref: '#/components/schemas/ClientAuthenticationMethod'
          description: |
            Client authentication methods supported at the revocation endpoint.
        introspectionEndpoint:
          type: string
          description: The URI of the introspection endpoint.
          format: uri
        directIntrospectionEndpointEnabled:
          type: boolean
          description: 'The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. '
        supportedIntrospectionAuthMethods:
          type: array
          description: |
            Client authentication methods supported at the introspection endpoint.
          items:
            $ref: '#/components/schemas/ClientAuthenticationMethod'
        pushedAuthReqEndpoint:
          type: string
          description: |
            The URI of the pushed authorization request endpoint.

            This property corresponds to the `pushed_authorization_request_endpoint` metadata defined in "[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)" of OAuth 2.0 Pushed Authorization Requests.
          format: uri
        pushedAuthReqDuration:
          type: integer
          format: int64
          description: |
            The duration of pushed authorization requests in seconds.

            [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)
            defines an endpoint (called "pushed authorization request endpoint") which client applications
            can register authorization requests into and get corresponding URIs (called "request URIs") from.
            The issued URIs represent the registered authorization requests. The client applications can use
            the URIs as the value of the `request_uri` request parameter in an authorization request.

            The property represents the duration of registered authorization requests and is used as the value
            of the `expires_in` parameter in responses from the pushed authorization request endpoint.
        parRequired:
          type: boolean
          description: |
            The flag to indicate whether this service requires that clients use the pushed authorization
            request endpoint.

            This property corresponds to the `require_pushed_authorization_requests` server metadata defined
            in [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).
        requestObjectRequired:
          type: boolean
          description: |
            The flag to indicate whether this service requires that authorization requests always utilize
            a request object by using either request or `request_uri` request parameter.

            If this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is
            `false`, the value of `require_signed_request_object` server metadata of this service is reported
            as `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).
            That `require_signed_request_object` is `true` means that authorization requests which don't
            conform to the JAR specification are rejected.
        traditionalRequestObjectProcessingApplied:
          type: boolean
          description: |
            The flag to indicate whether a request object is processed based on rules defined in
            [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT
            Secured Authorization Request).

            Differences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.
              - JAR requires that a request object be always -signed.
              - JAR does not allow request parameters outside a request object to be referred to.
              - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.
              - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an
              - OIDC request even if the request object includes the request parameter.

            If this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of
            `require_signed_request_object` server metadata of this service
            is reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured
            Authorization Request). That `require_signed_request_object` is `true` means that authorization
            requests which don't conform to the JAR specification are rejected.
        mutualTlsValidatePkiCertChain:
          type: boolean
          description: |
            The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.
        trustedRootCertificates:
          type: array
          items:
            type: string
          description: |
            The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.
        mtlsEndpointAliases:
          type: array
          items:
            $ref: '#/components/schemas/NamedUri'
          description: |
            The MTLS endpoint aliases.

            This property corresponds to the mtls_endpoint_aliases metadata defined in "5. Metadata for Mutual TLS Endpoint Aliases" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).

            The aliases will be embedded in the response from the discovery endpoint like the following.

            ```json
            {
              ......,
              "mtls_endpoint_aliases": {
                "token_endpoint":         "https://mtls.example.com/token",
                "revocation_endpoint":    "https://mtls.example.com/revo",
                "introspection_endpoint": "https://mtls.example.com/introspect"
              }
            }
            ```
        accessTokenType:
          type: string
          description: |
            The access token type.

            This value is used as the value of `token_type` property in access token responses. If this service
            complies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should
            be `Bearer`.

            See [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.
        tlsClientCertificateBoundAccessTokens:
          type: boolean
          description: |
            The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.
        accessTokenDuration:
          type: integer
          format: int64
          description: |
            The duration of access tokens in seconds. This value is used as the value of `expires_in` property
            in access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).
        singleAccessTokenPerSubject:
          type: boolean
          description: |
            The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.

            If `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.

            Note that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.
        accessTokenSignAlg:
          $ref: '#/components/schemas/JwsAlg'
        accessTokenSignatureKeyId:
          type: string
          description: |
            The key ID to identify a JWK used for signing access tokens.

            A JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.
            Authlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based
            access token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions
            for access token signature. If the number of JWK candidates which satisfy the conditions is 1,
            there is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed
            to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.
        refreshTokenDuration:
          type: integer
          format: int64
          description: 'The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens.'
        refreshTokenDurationKept:
          type: boolean
          description: |
            The flag to indicate whether the remaining duration of the used refresh token is taken over to
            the newly issued refresh token.
        refreshTokenDurationReset:
          type: boolean
          description: |
            The flag which indicates whether duration of refresh tokens are reset when they are used even
            if the `refreshTokenKept` property of this service set to is `true` (= even if "Refresh Token
            Continuous Use" is "Kept").

            This flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,
            if this service issues a new refresh token on every refresh token request, the refresh token
            will have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this
            `refreshTokenDurationReset` property is not referenced.
        refreshTokenKept:
          type: boolean
          description: |
            The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.

            If `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.

            See [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.
        supportedScopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
          description: |
            Scopes supported by the service.

            Authlete strongly recommends that the service register at least the following scopes.

            | Name | Description |
            | --- | --- |
            | openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |
            | profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
            | email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
            | address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |
            | phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
            | offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |

            The value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        scopeRequired:
          type: boolean
          description: |
            The flag to indicate whether requests that request no scope are rejected or not.

            When a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,
            the authorization server regards the request requests no scope. When this flag is set to `true`,
            requests that request no scope are rejected.

            The requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)
            does not explicitly mention the case where the default scope set is empty.

            > If the client omits the scope parameter when requesting authorization, the authorization server
            MUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.

            However, if you interpret *"the default scope set exists but is empty"* as *"the default scope set does not exist"*
            and want to strictly conform to the requirement above, this flag has to be `true`.
        idTokenDuration:
          type: integer
          format: int64
          description: |
            'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s
            in seconds. This value is used to calculate the value of `exp` claim in an ID token.'
        allowableClockSkew:
          type: integer
          format: int32
          description: |
            The allowable clock skew between the server and clients in seconds.

            The clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.
        supportedClaimTypes:
          type: array
          items:
            $ref: '#/components/schemas/ClaimType'
          description: |
            Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete
            currently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.

            The value of this property is used as `claim_types_supported` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        supportedClaimLocales:
          type: array
          items:
            type: string
          description: |
            Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).
            For example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)
            for details.

            The value of this property is used as `claims_locales_supported` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        supportedClaims:
          type: array
          items:
            type: string
          description: |
            Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,
            5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should
            be supported. The following is the list of standard claims.

            - `sub`
            - `name`
            - `given_name`
            - `family_name`
            - `middle_name`
            - `nickname`
            - `preferred_username`
            - `profile`
            - `picture`
            - `website`
            - `email`
            - `email_verified`
            - `gender`
            - `birthdate`
            - `zoneinfo`
            - `locale`
            - `phone_number`
            - `phone_number_verified`
            - `address`
            - `updated_at`

            The value of this property is used as `claims_supported` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).

            The service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional
            Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).
        claimShortcutRestrictive:
          type: boolean
          description: |
            The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included
            in the issued ID token only when no access token is issued.

            To strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section
            5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.

            > The Claims requested by the profile, email, address, and phone scope values are returned from
            the UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that
            results in an Access Token being issued. However, when no Access Token is issued (which is the
            case for the response_type value id_token), the resulting Claims are returned in the ID Token.
        jwksUri:
          type: string
          format: uri
          description: |
            The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For
            example, `http://example.com/auth/jwks`.

            Client applications accesses this URL (1) to get the public key of the service to validate the
            signature of an ID token issued by the service and (2) to get the public key of the service to
            encrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures
            and Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.

            The value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        directJwksEndpointEnabled:
          type: boolean
          description: |
            'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint
            is `/api/service/jwks/get/direct/service-api-key`. '
        jwks:
          type: string
          description: |
            The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.

            If this property is not `null` in a `/service/create` request or a `/service/update` request,
            Authlete hosts the content in the database. This property must not be `null` and must contain
            pairs of public/private keys if the service wants to support asymmetric signatures for ID tokens
            and asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and
            Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.
        idTokenSignatureKeyId:
          type: string
          description: |
            The key ID to identify a JWK used for ID token signature using an asymmetric key.

            A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
            (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
            to pick up one JWK for signature from the JWK Set when it generates an ID token and signature
            using an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK
            which satisfies conditions for ID token signature. If the number of JWK candidates which satisfy
            the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,
            a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that
            Authlete Server can pick up one JWK from among the JWK candidates.

            This `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation
            (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
            this mechanism is needed.
        userInfoSignatureKeyId:
          type: string
          description: |
            The key ID to identify a JWK used for user info signature using an asymmetric key.

            A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
            (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
            to pick up one JWK for signature from the JWK Set when it is required to sign user info (which
            is returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))
            using an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies
            conditions for user info signature. If the number of JWK candidates which satisfy the conditions
            is 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)
            is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.

            This `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation
            (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
            this mechanism is needed.
        authorizationSignatureKeyId:
          type: string
          description: |
            The key ID to identify a JWK used for signing authorization responses using an asymmetric key.

            [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
            `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
            from the authorization endpoint will be packed into a JWT. This property is used to compute the
            value of the `exp` claim of the JWT.

            Authlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response
            signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.
            On the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that
            Authlete Server can pick up one JWK from among the JWK candidates. This property exists to specify
            the key ID.
        userInfoEndpoint:
          type: string
          description: |
            The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the
            service. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.

            The value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
        directUserInfoEndpointEnabled:
          type: boolean
          description: |
            The flag to indicate whether the direct userinfo endpoint is enabled or not. The path
            of the endpoint is `/api/auth/userinfo/direct/service-api-key`.
        dynamicRegistrationSupported:
          type: boolean
          description: |
            The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)
            is supported.
        registrationEndpoint:
          type: string
          description: |
            The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)
            of the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.

            The value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
        registrationManagementEndpoint:
          type: string
          description: |
            The URI of the registration management endpoint. If dynamic client registration is supported,
            and this is set, this URI will be used as the basis of the client's management endpoint by appending
            `/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will
            be used as the URI base instead.
          format: uri
        policyUri:
          type: string
          description: |
            The URL of the "Policy" of the service.

            The value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
        tosUri:
          type: string
          description: |
            The URL of the "Terms Of Service" of the service.

            The value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
        serviceDocumentation:
          type: string
          description: |
            The URL of a page where documents for developers can be found.

            The value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
        backchannelAuthenticationEndpoint:
          type: string
          description: |
            The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA
            (Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
          format: uri
        supportedBackchannelTokenDeliveryModes:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryMode'
          description: |
            The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`
            metadata.

            Backchannel token delivery modes are defined in the specification of [CIBA (Client Initiated
            Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
        backchannelAuthReqIdDuration:
          type: integer
          format: int32
          description: |
            The duration of backchannel authentication request IDs issued from the backchannel authentication
            endpoint in seconds. This is used as the value of the `expires_in` property in responses from
            the backchannel authentication endpoint.
        backchannelPollingInterval:
          type: integer
          format: int32
          description: |
            The minimum interval between polling requests to the token endpoint from client applications in
            seconds. This is used as the value of the `interval` property in responses from the backchannel
            authentication endpoint.
        backchannelUserCodeParameterSupported:
          type: boolean
          description: |
            The boolean flag which indicates whether the `user_code` request parameter is supported at the
            backchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`
            metadata.
        backchannelBindingMessageRequiredInFapi:
          type: boolean
          description: |
            The flag to indicate whether the `binding_message` request parameter is always required whenever
            a backchannel authentication request is judged as a request for Financial-grade API.

            The FAPI-CIBA profile requires that the authorization server _"shall ensure unique authorization
            context exists in the authorization request or require a `binding_message` in the authorization
            request"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property
            to `true`.

            If this property is set to `false`, the `binding_message` request parameter remains optional
            even in FAPI context, but in exchange, your authorization server must implement a custom mechanism
            that ensures each backchannel authentication request has unique context.
        deviceAuthorizationEndpoint:
          type: string
          format: uri
          description: |
            The URI of the device authorization endpoint.

            Device authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.
        deviceVerificationUri:
          type: string
          format: uri
          description: |
            The verification URI for the device flow. This URI is used as the value of the `verification_uri`
            parameter in responses from the device authorization endpoint.
        deviceVerificationUriComplete:
          type: string
          format: uri
          description: |
            The verification URI for the device flow with a placeholder for a user code. This URI is used
            to build the value of the `verification_uri_complete` parameter in responses from the device
            authorization endpoint.

            It is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for
            a user code. For example, like the following.

            `https://example.com/device?user\_code=USER\_CODE`

            The fixed string is replaced with an actual user code when Authlete builds a verification URI
            with a user code for the `verification_uri_complete` parameter.

            If this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization
            responses.
        deviceFlowCodeDuration:
          type: integer
          format: int32
          description: |
            The duration of device verification codes and end-user verification codes issued from the device
            authorization endpoint in seconds. This is used as the value of the `expires_in` property in responses
            from the device authorization endpoint.
        deviceFlowPollingInterval:
          type: integer
          format: int32
          description: |
            The minimum interval between polling requests to the token endpoint from client applications in
            seconds in device flow. This is used as the value of the `interval` property in responses from
            the device authorization endpoint.
        userCodeCharset:
          $ref: '#/components/schemas/UserCodeCharset'
        userCodeLength:
          type: integer
          format: int32
          description: |
            The length of end-user verification codes (`user_code`) for Device Flow.
        supportedTrustFrameworks:
          type: array
          items:
            type: string
          description: |
            Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
        supportedEvidence:
          type: array
          items:
            type: string
          description: |
            Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
        supportedIdentityDocuments:
          type: array
          items:
            type: string
          description: |
            Identity documents supported by this service. This corresponds to the `id_documents_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
        supportedVerificationMethods:
          type: array
          items:
            type: string
          description: |
            Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
        supportedVerifiedClaims:
          type: array
          items:
            type: string
          description: |
            Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
        verifiedClaimsValidationSchemaSet:
          type: string
          description: |
            OIDC4IDA / verifiedClaimsValidationSchemaSet
          enum:
            - standard
            - standard+id_document
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Pair'
          description: |
            The attributes of this service.
        nbfOptional:
          type: boolean
          description: |
            The flag indicating whether the nbf claim in the request object is optional even when the authorization
            request is regarded as a FAPI-Part2 request.

            The final version of Financial-grade API was approved in January, 2021. The Part 2 of the final
            version has new requirements on lifetime of request objects. They require that request objects
            contain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.

            Therefore, when an authorization request is regarded as a FAPI-Part2 request, the request object
            used in the authorization request must contain an nbf claim. Otherwise, the authorization server
            rejects the authorization request.

            When this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization
            request is regarded as a FAPI-Part2 request. That is, the authorization server does not perform
            the validation on lifetime of the request object.

            Skipping the validation is a violation of the FAPI specification. The reason why this flag has
            been prepared nevertheless is that the new requirements (which do not exist in the Implementer's
            Draft 2 released in October, 2018) have big impacts on deployed implementations of client
            applications and Authlete thinks there should be a mechanism whereby to make the migration
            from ID2 to Final smooth without breaking live systems.
        issSuppressed:
          type: boolean
          description: |
            The flag indicating whether generation of the iss response parameter is suppressed.

            "OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response" has defined a new
            authorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.

            The specification requires that the `iss` response parameter always be included in authorization
            responses unless JARM (JWT Secured Authorization Response Mode) is used.

            When this flag is `true`, the authorization server does not include the `iss` response parameter
            in authorization responses. By turning this flag on and off, developers of client applications
            can experiment the mix-up attack and the effect of the `iss` response parameter.

            Note that this flag should not be `true` in production environment unless there are special
            reasons for it.
        supportedCustomClientMetadata:
          type: array
          items:
            type: string
          description: |
            custom client metadata supported by this service.

            Standard specifications define client metadata as necessary. The following are such examples.

            * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
            * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
            * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
            * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
            * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
            * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)

            Standard client metadata included in Client Registration Request and Client Update Request (cf.
            [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
            and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored
            into Authlete database. On the other hand, unrecognized client metadata are discarded.

            By listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),
            Authlete can recognize them and stores their values into the database. The stored custom client
            metadata values can be referenced by `customMetadata`.
        tokenExpirationLinked:
          type: boolean
          description: |
            The flag indicating whether the expiration date of an access token never exceeds that of the
            corresponding refresh token.

            When a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),
            the expiration date of the access token may exceed the expiration date of the corresponding
            refresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is
            `true` and/or when `refreshTokenDurationKept` is `true`.

            When this flag is `true`, the expiration date of an access token never exceeds that of the corresponding
            refresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,
            `accessTokenDuration` in `extension` and `access_token.duration` scope attribute.

            It is technically possible to set a value which is bigger than the duration of refresh tokens
            as the duration of access tokens although it is strange. In the case, the duration of an access
            token becomes longer than the duration of the refresh token which is issued together with the
            access token. Even if the duration values are configured so, if this flag is `true`, the expiration
            date of the access token does not exceed that of the refresh token. That is, the duration of
            the access token will be shortened, and as a result, the access token and the refresh token
            will have the same expiration date.
        frontChannelRequestObjectEncryptionRequired:
          type: boolean
          description: |
            The flag indicating whether encryption of request object is required when the request object
            is passed through the front channel.

            This flag does not affect the processing of request objects at the Pushed Authorization Request
            Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
            Unecrypted request objects are accepted at the endpoint even if this flag is `true`.

            This flag does not indicate whether a request object is always required. There is a different
            flag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`
            for details.

            Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
            flag of the client is `true`.
        requestObjectEncryptionAlgMatchRequired:
          type: boolean
          description: |
            The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
            client metadata of the client that has sent the request object.

            The request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_alg
            >
            > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting
            Request Objects sent to the OP. This parameter SHOULD be included when symmetric encryption
            will be used, since this signals to the OP that a client_secret value needs to be returned
            from which the symmetric key will be derived, that might not otherwise be returned. The RP
            MAY still use other supported encryption algorithms or send unencrypted Request Objects, even
            when this parameter is present. If both signing and encryption are requested, the Request Object
            will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The
            default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.

            The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
            Request Objects, even when this parameter is present."

            The Client's property that represents the client metadata is `requestEncryptionAlg`. See the
            description of `requestEncryptionAlg` for details.

            Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
            flag of the client is `true`.
        requestObjectEncryptionEncMatchRequired:
          type: boolean
          description: |
            The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`
            client metadata of the client that has sent the request object.

            The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_enc
            >
            > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
            Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
            value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
            MUST also be provided.

            The Client's property that represents the client metadata is `requestEncryptionEnc`. See the
            description of `requestEncryptionEnc` for details.

            Even if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`
            flag is `true`.
        hsmEnabled:
          type: boolean
          description: |
            The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.

            When this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,
            `/api/hsk/*` APIs reject all requests.

            Even if this flag is `true`, HSM-related features do not work if the configuration of the Authlete
            server you are using does not support HSM.
        hsks:
          type: array
          items:
            $ref: '#/components/schemas/Hsk'
          description: |
            The information about keys managed on HSMs (Hardware Security Modules).

            This `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`
            API and `/api/service/update` API do not have any effect. The contents of this property is controlled
            only by `/api/hsk/*` APIs.
        grantManagementEndpoint:
          type: string
          description: |
            The URL of the grant management endpoint.
        grantManagementActionRequired:
          type: boolean
          description: |
            The flag indicating whether every authorization request (and any request serving as an authorization
            request such as CIBA backchannel authentication request and device authorization request) must
            include the `grant_management_action` request parameter.

            This property corresponds to the `grant_management_action_required` server metadata defined
            in [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).

            Note that setting true to this property will result in blocking all public clients because
            the specification requires that grant management be usable only by confidential clients for
            security reasons.
        unauthorizedOnClientConfigSupported:
          type: boolean
          description: |
            The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as
            a value of the `action` response parameter when appropriate.

            The `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`
            parameter in an `/api/client/registration` API response. This means that implementations of
            client `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)
            strictly.

            For backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`
            API does not return the `UNAUTHORIZED` enum value if this flag is not turned on.

            The steps an existing implementation of client configuration endpoint has to do in order to
            conform to the requirement related to "401 Unauthorized" are as follows.

            1. Update the Authlete library (e.g. authlete-java-common) your system is using.
            2. Update your implementation of client configuration endpoint so that it can handle the
            `UNAUTHORIZED` action.
            3. Turn on this `unauthorizedOnClientConfigSupported` flag.
        dcrScopeUsedAsRequestable:
          type: boolean
          description: |
            The flag indicating whether the `scope` request parameter in dynamic client registration and
            update requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.

            Limiting the range of scopes that a client can request is achieved by listing scopes in the
            `client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`
            property to `true`. This feature is called "requestable scopes".

            This property affects behaviors of `/api/client/registration` and other family APIs.
        endSessionEndpoint:
          type: string
          format: uri
          description: |
            The endpoint for clients ending the sessions.

            A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.

            The value of this property is used as `end_session_endpoint` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        loopbackRedirectionUriVariable:
          type: boolean
          description: |
            The flag indicating whether the port number component of redirection URIs can be variable when
            the host component indicates loopback.

            When this flag is `true`, if the host component of a redirection URI specified in an authorization
            request indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`
            or `::1`), the port number component is ignored when the specified redirection URI is compared
            to pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](
            https://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)
            for Native Apps.

            [3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)
            of [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _"If the client registration
            included the full redirection URI, the authorization server MUST compare the two URIs using
            simple string comparison as defined in [RFC3986] Section 6.2.1."_ Also, the description of
            `redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)
            of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states
            _"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
            at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]
            (**Simple String Comparison**)."_ These "Simple String Comparison" requirements are preceded
            by this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0
            are satisfied, the port number component of loopback redirection URIs can be variable when this
            flag is `true`.

            [8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)
            of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.

            > While redirect URIs using localhost (i.e., `"http://localhost:{port}/{path}"`) function
            similarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.
            Specifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently
            listening on network interfaces other than the loopback interface. It is also less susceptible
            to client-side firewalls and misconfigured host name resolution on the user's device.

            However, Authlete allows the port number component to be variable in the case of `localhost`,
            too. It is left to client applications whether they use `localhost` or a literal loopback IP
            address (`127.0.0.1` for IPv4 or `::1` for IPv6).

            Section 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state
            that loopback redirection URIs use the `"http"` scheme, but Authlete allows the port number
            component to be variable in other cases (e.g. in the case of the `"https"` scheme), too.
        requestObjectAudienceChecked:
          type: boolean
          description: |
            The flag indicating whether Authlete checks whether the `aud` claim of request objects matches
            the issuer identifier of this service.

            [Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)
            of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following
            statement.

            > The `aud` value SHOULD be or include the OP's Issuer Identifier URL.

            Likewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of
            [RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:
            JWT-Secured Authorization Request (JAR)) has the following statement.

            > The value of aud should be the value of the authorization server (AS) issuer, as defined in
            [RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).

            As excerpted above, validation on the `aud` claim of request objects is optional. However, if
            this flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer
            identifier of this service and raises an error if they are different.
        accessTokenForExternalAttachmentEmbedded:
          type: boolean
          description: |
            The flag indicating whether Authlete generates access tokens for
            external attachments and embeds them in ID tokens and userinfo
            responses.
        authorityHints:
          type: array
          items:
            type: string
          description: |
            Identifiers of entities that can issue entity statements for this
            service. This property corresponds to the `authority_hints`
            property that appears in a self-signed entity statement that is
            defined in OpenID Connect Federation 1.0.
        federationEnabled:
          type: boolean
          description: |
            flag indicating whether this service supports OpenID Connect Federation 1
        federationJwks:
          type: string
          description: |
            JWK Set document containing keys that are used to sign (1) self-signed
            entity statement of this service and (2) the response from
            `signed_jwks_uri`.
        federationSignatureKeyId:
          type: string
          description: |
            A key ID to identify a JWK used to sign the entity configuration and
            the signed JWK Set.
        federationConfigurationDuration:
          type: integer
          description: |
            The duration of the entity configuration in seconds.
        federationRegistrationEndpoint:
          type: string
          description: |
            The URI of the federation registration endpoint. This property corresponds
            to the `federation_registration_endpoint` server metadata that is
            defined in OpenID Connect Federation 1.0.
        organizationName:
          type: string
          description: |
            The human-readable name representing the organization that operates
            this service. This property corresponds to the `organization_name`
            server metadata that is defined in OpenID Connect Federation 1.0.
        predefinedTransformedClaims:
          type: string
          description: |
            The transformed claims predefined by this service in JSON format.
            This property corresponds to the `transformed_claims_predefined`
            server metadata.
        refreshTokenIdempotent:
          type: boolean
          description: |
            flag indicating whether refresh token requests with the same
            refresh token can be made multiple times in quick succession and
            they can obtain the same renewed refresh token within the short
            period.
        signedJwksUri:
          type: string
          description: |
            The URI of the endpoint that returns this service's JWK Set document in
            the JWT format. This property corresponds to the `signed_jwks_uri`
            server metadata defined in OpenID Connect Federation 1.0.
        supportedAttachments:
          type: array
          items:
            type: string
            description: |
              Supported attachment types. This property corresponds to the `attachments_supported`
               server metadata which was added by the third implementer's draft of OpenID Connect
               for Identity Assurance 1.0.
            enum:
              - EMBEDDED
              - EXTERNAL
          description: |
            Supported attachment types. This property corresponds to the {@code
            attachments_supported} server metadata which was added by the third
            implementer's draft of OpenID Connect for Identity Assurance 1.0.
        supportedDigestAlgorithms:
          type: array
          items:
            type: string
          description: |
            Supported algorithms used to compute digest values of external
            attachments. This property corresponds to the
            `digest_algorithms_supported` server metadata which was added
            by the third implementer's draft of OpenID Connect for Identity
            Assurance 1.0.
        supportedDocuments:
          type: array
          items:
            type: string
          description: |
            Document types supported by this service. This property corresponds
            to the `documents_supported` server metadata.
        supportedDocumentsMethods:
          type: array
          items:
            type: string
          description: |
            validation and verification processes supported by this service.
            This property corresponds to the `documents_methods_supported`
            server metadata.

            The third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
            renamed the
            `id_documents_verification_methods_supported` server metadata to
            `documents_methods_supported`.
        supportedDocumentsValidationMethods:
          type: array
          items:
            type: string
          description: |
            Document validation methods supported by this service. This property
            corresponds to the `documents_validation_methods_supported` server
            metadata which was added by the third implementer's draft of <a href=
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
        supportedDocumentsVerificationMethods:
          type: array
          items:
            type: string
          description: |
            Document verification methods supported by this service. This property
            corresponds to the `documents_verification_methods_supported` server
            metadata which was added by the third implementer's draft of
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
        supportedElectronicRecords:
          type: array
          items:
            type: string
          description: |
            Electronic record types supported by this service. This property
            corresponds to the `electronic_records_supported` server metadata
            which was added by the third implementer's draft of
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
        supportedClientRegistrationTypes:
          type: array
          items:
            $ref: '#/components/schemas/Client/properties/clientRegistrationTypes/items'
        tokenExchangeByIdentifiableClientsOnly:
          type: boolean
          description: |
            The flag indicating whether to prohibit unidentifiable clients from
            making token exchange requests.
        tokenExchangeByConfidentialClientsOnly:
          type: boolean
          description: |
            The flag indicating whether to prohibit public clients from making
            token exchange requests.
        tokenExchangeByPermittedClientsOnly:
          type: boolean
          description: |
            The flag indicating whether to prohibit clients that have no explicit
            permission from making token exchange requests.
        tokenExchangeEncryptedJwtRejected:
          type: boolean
          description: |
            The flag indicating whether to reject token exchange requests which
            use encrypted JWTs as input tokens.
        tokenExchangeUnsignedJwtRejected:
          type: boolean
          description: |
            The flag indicating whether to reject token exchange requests which
            use unsigned JWTs as input tokens.
        jwtGrantByIdentifiableClientsOnly:
          type: boolean
          description: |
            The flag indicating whether to prohibit unidentifiable clients from
            using the grant type "urn:ietf:params:oauth:grant-type:jwt-bearer".
        jwtGrantEncryptedJwtRejected:
          type: boolean
          description: |
            The flag indicating whether to reject token requests that use an
            encrypted JWT as an authorization grant with the grant type
            "urn:ietf:params:oauth:grant-type:jwt-bearer".
        jwtGrantUnsignedJwtRejected:
          type: boolean
          description: |
            The flag indicating whether to reject token requests that use an
            unsigned JWT as an authorization grant with the grant type
            "urn:ietf:params:oauth:grant-type:jwt-bearer".
        dcrDuplicateSoftwareIdBlocked:
          type: boolean
          description: |
            The flag indicating whether to block DCR (Dynamic Client Registration)
            requests whose "software_id" has already been used previously.
        trustAnchors:
          type: array
          items:
            type: object
            properties:
              entityId:
                type: string
                description: |
                  the entity ID of the trust anchor
              jwks:
                type: string
                description: |
                  the JWK Set document containing public keys of the trust anchor
          description: |
            The trust anchors that are referenced when this service resolves
            trust chains of relying parties.

            If this property is empty, client registration fails regardless of
            whether its type is `automatic` or `explicit`. It means
            that OpenID Connect Federation 1.0 does not work.
        openidDroppedOnRefreshWithoutOfflineAccess:
          type: boolean
          description: |
            The flag indicating whether the openid scope should be dropped from
            scopes list assigned to access token issued when a refresh token grant
            is used.
        supportedDocumentsCheckMethods:
          type: array
          items:
            type: string
          description: |
            Supported document check methods. This property corresponds to the `documents_check_methods_supported`
            server metadata which was added by the fourth implementer's draft of OpenID Connect for Identity
            Assurance 1.0.
        rsResponseSigned:
          type: boolean
          description: |
            The flag indicating whether this service signs responses from the resource server.
        cnonceDuration:
          type: integer
          format: int64
          description: |
            The duration of `c_nonce`.
        dpopNonceRequired:
          type: boolean
          description: |
            Whether to require DPoP proof JWTs to include the `nonce` claim
            whenever they are presented.
        verifiableCredentialsEnabled:
          type: boolean
          description: |
            Get the flag indicating whether the feature of Verifiable Credentials
            for this service is enabled or not.
        credentialJwksUri:
          type: string
          description: |
            The URL at which the JWK Set document of the credential issuer is
            exposed.
        credentialOfferDuration:
          type: integer
          format: int64
          description: |
            The default duration of credential offers in seconds.
        dpopNonceDuration:
          type: integer
          format: int64
          description: |
            The duration of nonce values for DPoP proof JWTs in seconds.
        preAuthorizedGrantAnonymousAccessSupported:
          type: boolean
          description: |
            The flag indicating whether token requests using the pre-authorized
            code grant flow by unidentifiable clients are allowed.
        credentialTransactionDuration:
          type: integer
          format: int64
          description: |
            The duration of transaction ID in seconds that may be issued as a
            result of a credential request or a batch credential request.
        introspectionSignatureKeyId:
          type: string
          description: |
            The key ID of the key for signing introspection responses.
        resourceSignatureKeyId:
          type: string
          description: |
            The key ID of the key for signing introspection responses.
        userPinLength:
          type: integer
          format: int32
          description: |
            The default length of user PINs.
        supportedPromptValues:
          type: array
          items:
            $ref: '#/components/schemas/Prompt'
          description: |
            The supported `prompt` values.
        idTokenReissuable:
          type: boolean
          description: |
            The flag indicating whether to enable the feature of ID token
            reissuance in the refresh token flow.
        credentialJwks:
          type: string
          description: |
            The JWK Set document containing private keys that are used to sign
            verifiable credentials.
        fapiModes:
          type: array
          items:
            $ref: '#/components/schemas/Client/properties/fapiModes/items'
          description: |
            FAPI modes for this service.

            When the value of this property is not `null`, Authlete always processes requests to this service based
            on the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported
            by this service.

            For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always
            processes requests to this service based on "Financial-grade API Security Profile 1.0 - Part 2:
            Advanced" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.
        credentialDuration:
          type: integer
          format: int64
          description: |
            The default duration of verifiable credentials in seconds.
        credentialIssuerMetadata:
          $ref: '#/components/schemas/CredentialIssuerMetadata'
        idTokenAudType:
          type: string
          description: |
            The type of the `aud` claim in ID tokens.
    SnsCredentials:
      type: object
      properties:
        sns:
          type: string
          description: SNS.
        apiKey:
          type: string
          description: API key.
        apiSecret:
          type: string
          description: API secret.
    Sns:
      type: string
      enum:
        - FACEBOOK
    SubjectType:
      type: string
      description: |
        The subject type that the client application requests. Details about the subject type are described in
        [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).

        This property corresponds to `subject_type` in
        [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
      enum:
        - PUBLIC
        - PAIRWISE
    TaggedValue:
      type: object
      properties:
        tag:
          type: string
          description: The language tag part.
        value:
          type: string
          description: The value part.
    UserCodeCharset:
      type: string
      description: |
        The character set for end-user verification codes (`user_code`) for Device Flow.
      enum:
        - BASE20
        - NUMERIC
    Hsk:
      type: object
      description: |
        Holds information about a key managed in an HSM (Hardware Security Module)
      properties:
        kty:
          type: string
          description: |
            The key type (EC or RSA)
        use:
          type: string
          description: |
            Get the use of the key on the HSM.
            When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
            When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
        kid:
          type: string
          description: |
            Key ID for the key on the HSM.
        hsmName:
          type: string
          description: |
            The name of the HSM.
            The identifier for the HSM that sits behind the Authlete server. For example, "google".
        handle:
          type: string
          description: |
            The handle for the key on the HSM.
            A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
        publicKey:
          type: string
          description: |
            The public key that corresponds to the key on the HSM.
    CredentialOfferInfo:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the credential offer.
        credentialOffer:
          type: string
          description: The credential offer in the JSON format.
        credentialIssuer:
          type: string
          description: The identifier of the credential issuer.
        credentials:
          type: string
          description: The value of the `credentials` object in the JSON format.
        authorizationCodeGrantIncluded:
          type: boolean
          description: |
            The flag indicating whether the `authorization_code` object is
            included in the `grants` object.
        issuerStateIncluded:
          type: boolean
          description: |
            The flag indicating whether the `issuer_state` property is
            included in the `authorization_code` object in the `grants`
            object.
        issuerState:
          type: string
          description: |
            The value of the `issuer_state` property in the
            `authorization_code` object in the `grants` object.
        preAuthorizedCodeGrantIncluded:
          type: boolean
          description: |
            The flag indicating whether the
            `urn:ietf:params:oauth:grant-type:pre-authorized_code` object is
            included in the `grants` object.
        preAuthorizedCode:
          type: string
          description: |
            The value of the `pre-authorized_code` property in the
            `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
            the `grants` object.
        userPinRequired:
          type: boolean
          description: |
            The value of the `user_pin_required` property in the
            `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
            the `grants` object.
        userPin:
          type: string
          description: The value of the user PIN associated with the credential offer.
        subject:
          type: string
          description: The subject associated with the credential offer.
        expiresAt:
          type: integer
          format: int64
          description: The time at which the credential offer will expire.
        context:
          type: string
          description: The general-purpose arbitrary string.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
          description: Extra properties to associate with the credential offer.
        jwtAtClaims:
          type: string
          description: |
            Additional claims that are added to the payload part of the JWT
            access token.
        authTime:
          type: integer
          format: int64
          description: |
            The time at which the user authentication was performed during
            the course of issuing the credential offer.
        acr:
          type: string
          description: |
            The Authentication Context Class Reference of the user authentication
            performed during the course of issuing the credential offer.
    CredentialRequestInfo:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the credential offer.
        format:
          type: string
          description: The value of the format parameter in the credential request.
        bindingKey:
          type: string
          description: The binding key specified by the proof in the credential request.
        details:
          type: string
          description: The details about the credential request.
    CredentialIssuanceOrder:
      type: object
      properties:
        requestIdentifier:
          type: string
          description: The identifier of a credential request.
        credentialPayload:
          type: string
          description: The additional payload that will be added into a credential to be issued.
        issuanceDeferred:
          type: boolean
          description: The flag indicating whether to defer credential issuance.
        credentialDuration:
          type: integer
          format: int64
          description: The duration of a credential to be issued.
        signingKeyId:
          type: string
          description: |
            The key ID of a private key that should be used for signing a credential
            to be issued.
    CredentialIssuerMetadata:
      type: object
      properties:
        credentialIssuer:
          type: string
          description: The identifier of a credential request.
        authorizationServer:
          type: string
          description: |
            The identifier of the authorization server that the credential issuer
            relies on for authorization.
        credentialEndpoint:
          type: boolean
          description: The URL of the credential endpoint of the credential issuer.
        batchCredentialEndpoint:
          type: integer
          format: int64
          description: The URL of the batch credential endpoint of the credential issuer.
        deferredCredentialEndpoint:
          type: string
          description: The URL of the deferred credential endpoint of the credential issuer.
        credentialsSupported:
          type: boolean
          description: A JSON array describing supported credentials.
    APIResultCode:
      A000101:
        code: A000101
        message: Authlete Server error.
        description: 'Sorry, an unexpected error occurred on Authlete''s side.'
      A000102:
        code: A000102
        message: 'Server Error: {Error Message}'
      A000103:
        code: A000103
        message: Internal Server Error.
      A000104:
        code: A000104
        message: 'Other Web Error: {Error Message}'
      A000201:
        code: A000201
        message: 'Client Error: {Error Message}'
      A000202:
        code: A000202
        message: 'Redirection to {URI}: {Error Message}'
      A001101:
        code: A001101
        message: '{API Path}, Authlete Server error.'
        description: 'Sorry, an unexpected error occurred on Authlete''s side.'
      A001201:
        code: A001201
        message: '{API Path}, TLS must be used.'
        description: 'Check if the API''s URL you specified starts with `https://`, not `http://`.'
      A001202:
        code: A001202
        message: '{API Path}, Authorization header is missing.'
        description: 'This API requires [Basic Authentication](http://tools.ietf.org/html/rfc2617#section-2). Include `Authorization` HTTP header in your API call.'
      A001203:
        code: A001203
        message: '{API Path}, Credentials in Authorization header are malformed: {Header Value}'
        description: 'Check if the format of the value of `Authorization` HTTP header in your API call complies with the specification of [Basic Authentication](http://tools.ietf.org/html/rfc2617#section-2).'
      A001212:
        code: A001212
        message: '{API Path}, The client (ID = {Client ID}) does not exist.'
        description: Check if the client ID you specified is correct.
      A001213:
        code: A001213
        message: '{API Path}, The client (ID = {Client ID}) does not belong to the service.'
      A001214:
        code: A001214
        message: '{API Path}, The client (ID = {Client ID}) has been deleted.'
        description: 'The client application has been logically deleted, so it cannot be used.'
      A001215:
        code: A001215
        message: '{API Path}, The client (ID = {Client ID}) is locked.'
        description: 'The client application is currently locked for some reasons, so it cannot be used.'
      A001216:
        code: A001216
        message: '{API Path}, The client ID is invalid.'
      A001217:
        code: A001217
        message: '{API Path}, This API is not usable under the current configuration.'
        description: Consult our support team if you want to use this API.
      A001218:
        code: A001218
        message: '{API Path}, The client (identifier = {Client Identifier}) does not exist.'
        description: 'Check if the client identifier you specified is correct. If you used a client alias, check if the feature of client ID alias is enabled both in the client configuration and in the service configuration.'
      A001219:
        code: A001219
        message: '{API Path}, The client (identifier = {Client Identifier}) does not belong to the service.'
      A001220:
        code: A001220
        message: '{API Path}, The client (identifier = {Client Identifier}) has been deleted.'
      A001221:
        code: A001221
        message: '{API Path}, The client (identifier = {Client Identifier}) is locked.'
      A001222:
        code: A001222
        message: '{API Path}, The client (identifier = {Client Identifier}) exists but the configuration of the client does not allow ''Client ID Alias''.'
      A001223:
        code: A001223
        message: '{API Path}, The feature ''{Feature}'' must be enabled to use this API.'
      A001300:
        code: A001300
        message: '{API Path}, Unable to load introspected token data from external server (''{Introspection URL}'').'
      A001301:
        code: A001301
        message: '{API Path}, Expected a DPoP header but none was provided.'
      A001302:
        code: A001302
        message: '{API Path}, Thumbprint of the provided DPoP key does not match the expected DPoP thumbprint.'
      A001303:
        code: A001303
        message: '{API Path}, There was an error processing the DPoP header: {Error}'
      A001304:
        code: A001304
        message: '{API Path}, The DPoP signature algorithm ({Algorithm}) must not be symmetric or ''none''.'
      A001305:
        code: A001305
        message: '{API Path}, The DPoP header did not include a public key in JWK format.'
      A001306:
        code: A001306
        message: The DPoP signature algorithm is missing.
      A001307:
        code: A001307
        message: '{API Path}, The token required an MTLS certificate but none was provided.'
      A001308:
        code: A001308
        message: '{API Path}, The certificate thumbprint of the request does not match the certificate thumbprint of the access token.'
      A001309:
        code: A001309
        message: '{API Path}, There was an error processing the presented certificate.'
      A002101:
        code: A002101
        message: '{API Path}, Failed to get service owner information from ''service_owner'' table.'
        description: 'Sorry, an error occurred on the server side in getting the information about the service owner from the database.'
      A002201:
        code: A002201
        message: '{API Path}, No service owner has the API credentials.'
        description: Check if the pair of API key and API secret you specified is correct.
      A002202:
        code: A002202
        message: '{API Path}, The service owner (API Key = {Service Owner''s API Key}) has been deleted.'
        description: 'The service owner has been logically deleted, so services and client applications that belong to the service owner cannot be used.'
      A002203:
        code: A002203
        message: '{API Path}, The service owner (API Key = {Service Owner''s API Key}) is locked.'
        description: 'The service owner is currently locked for some reasons, so services and client applications that belong to the service owner cannot be used.'
      A002204:
        code: A002204
        message: '{API Path}, The service owner (API Key = {Service Owner''s API Key}) has not been verified.'
      A002205:
        code: A002205
        message: '{API Path}, The API credentials do not match those of the service owner (API Key = {Service Owner''s API Key}).'
        description: Check if the pair of API key and API secret you specified is correct.
      A003101:
        code: A003101
        message: '{API Path}, No service owner owns the service (API Key = {Service''s API Key}).'
        description: 'Sorry, there is an inconsistency on Authlete''s side.'
      A003102:
        code: A003102
        message: '{API Path}, The service owner (API Key = {Service Owner''s API Key}) of the service (API Key = {Service''s API Key}) has not been verified.'
        description: 'Sorry, there is an inconsistency on Authlete''s side.'
      A003103:
        code: A003103
        message: '{API Path}, Failed to get service information from ''service'' table.'
        description: 'Sorry, an error occurred on the server side in getting the information about the service from the database.'
      A003104:
        code: A003104
        message: '{API Path}, Failed to get service owner information from ''service_owner'' table.'
        description: 'Sorry, an error occurred on the server side in getting the information about the service owner from the database.'
      A003201:
        code: A003201
        message: '{API Path}, No service has the API credentials.'
        description: Check if the pair of API key and API secret you specified is correct.
      A003202:
        code: A003202
        message: '{API Path}, The service (API Key = {Service''s API Key}) has been deleted.'
        description: 'The service has been logically deleted, so it cannot be used.'
      A003203:
        code: A003203
        message: '{API Path}, The service (API Key = {Service''s API Key}) is locked.'
        description: 'The service is currently locked for some reasons, so it cannot be used.'
      A003204:
        code: A003204
        message: '{API Path}, The API credentials do not match those of the service (API Key = {Service''s API Key}).'
        description: Check if the API secret you specified is correct.
      A003205:
        code: A003205
        message: '{API Path}, The service owner (API Key = {Service Owner''s API Key}) of the service (API Key = {Service''s API Key}) has been deleted.'
        description: 'The service owner of the service has been logically deleted, so the service cannot be used.'
      A003206:
        code: A003206
        message: '{API Path}, The service owner (API Key = {Service Owner''s API Key}) of the service (API Key = {Service''s API Key}) is locked.'
        description: 'The service owner of the service is currently locked for some reasons, so the service cannot be used.'
      A004001:
        code: A004001
        message: 'Authlete has successfully issued a ticket to the service (API Key = {Service''s API Key}) for the authorization request from the client (ID = {Client ID}). [response_type={Response Type}, openid={Boolean}]'
        description: The call of `/api/auth/authorization` API succeeded.
      A004201:
        code: A004201
        message: The authorization request from the service does not contain 'parameters' parameter.
        description: Include the `parameters` request parameter when you call Authlete's `/api/auth/authorization` API.
      A004202:
        code: A004202
        message: The format of the value of 'parameters' request parameter is wrong.
        description: Check if the value of the `parameters` request parameter given to Authlete's `/api/auth/authorization` API complies with `x-www-form-urlencoded`.
      A004301:
        code: A004301
        message: The authorization request does not contain any request parameters.
      A004302:
        code: A004302
        message: 'The value of ''response_type'' ({Response Type}) is not allowed when ''scope'' does not contain ''openid''.'
      A004303:
        code: A004303
        message: '''consent'' must be explicitly included in ''prompt'' parameter when ''offline_access'' is included in ''scope''.'
      A005101:
        code: A005101
        message: 'JOSEObject.parse(String) returned an instance of unknown class: {Class Name}'
      A005102:
        code: A005102
        message: Failed to convert a JWK to a PublicKey.
      A005103:
        code: A005103
        message: 'The key type ''{Key Type}'' cannot have a private key.'
      A005104:
        code: A005104
        message: 'Failed to put the JWK Set of the client (ID = {Client ID}) into ''client_jwks'' table.'
      A005105:
        code: A005105
        message: 'Failed to create a decrypter for the JWE passed by ''request'' parameter. (client_id={Client ID}, alg={Algorithm}, enc={Algorithm})'
      A005106:
        code: A005106
        message: 'Failed to create a decrypter for the JWE pointed to by ''request_uri'' parameter. (client_id={Client ID}, alg={Algorithm}, enc={Algorithm})'
      A005107:
        code: A005107
        message: 'Failed to create a decrypter for the JWE passed by ''request'' parameter due to an unexpected key length. (client_id={Client ID}, alg={Algorithm}, enc={Algorithm}, expected key length={Key Length})'
      A005108:
        code: A005108
        message: The JWK Set of the service is marked as hosted but not found in 'service_jwks' table.
      A005109:
        code: A005109
        message: Failed to convert a JWK to a PrivateKey.
      A005110:
        code: A005110
        message: Failed to store the fetched request object into the local database.
      A005111:
        code: A005111
        message: Failed to get request URI information from 'request_uri' table.
      A005112:
        code: A005112
        message: Failed to get an entity from 'client_jwks' table.
      A005113:
        code: A005113
        message: Failed to get an entity from 'service_jwks' table.
      A005114:
        code: A005114
        message: 'Failed to create a decrypter for the JWE pointed to by ''request_uri'' parameter due to an unexpected key length. (client_id={Client ID}, alg={Algorithm}, enc={Algorithm}, expected key length={Key Length})'
      A005115:
        code: A005115
        message: 'An error occurred while hardware-secured keys were checked to create a JWE decrypter: {Error Message}'
      A005201:
        code: A005201
        message: The request object passed by 'request' parameter cannot be decrypted because this service has not registered its JWK Set.
        description: 'The client application should not encrypt the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests), or the service should register its JWK Set into Authlete.'
      A005202:
        code: A005202
        message: The request object pointed to by 'request_uri' parameter cannot be decrypted because this service has not registered its JWK Set.
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL should not be encrypted (the developer of the client application should fix it), or the service should register its JWK Set into Authlete.'
      A005203:
        code: A005203
        message: The request object passed by 'request' parameter cannot be decrypted because this service has not registered its JWK Set.
        description: 'The client application should not encrypt the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests), or the service should register its JWK Set into Authlete.'
      A005204:
        code: A005204
        message: The request object pointed to by 'request_uri' parameter cannot be decrypted because this service has not registered its JWK Set.
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL should not be encrypted (the developer of the client application should fix it), or the service should register its JWK Set into Authlete.'
      A005301:
        code: A005301
        message: The value of 'request' parameter failed to be parsed as a JOSE.
        description: 'The client application should be fixed to construct a valid [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005302:
        code: A005302
        message: The payload of the JWE passed by 'request' parameter failed to be parsed as a JOSE.
        description: 'The client application should be fixed to construct a valid [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005303:
        code: A005303
        message: The value pointed to by 'request_uri' parameter failed to be parsed as a JOSE.
        description: 'The developer of the client application should fix the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`).'
      A005304:
        code: A005304
        message: The payload of the JWE pointed to by 'request_uri' parameter failed to be parsed as a JOSE.
        description: 'The developer of the client application should fix the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`).'
      A005305:
        code: A005305
        message: The payload of the JWE passed by 'request' parameter must not be a JWE.
        description: 'The client application should be fixed to construct a valid [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005306:
        code: A005306
        message: The payload of the JWE pointed to by 'request_uri' parameter must not be a JWE.
        description: 'The developer of the client application should fix the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`).'
      A005307:
        code: A005307
        message: The JWS header of the request object passed by 'request' parameter does not contain 'alg' parameter.
        description: The client application should be fixed to include the `alg` parameter.
      A005308:
        code: A005308
        message: The JWS header of the payload of the JWE passed by 'request' parameter does not contain 'alg' parameter.
        description: The client application should be fixed to include the `alg` parameter.
      A005309:
        code: A005309
        message: The JWS header of the request object pointed to by 'request_uri' parameter does not contain 'alg' parameter.
        description: 'The developer of the client application should fix the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) to include the `alg` parameter.'
      A005310:
        code: A005310
        message: The JWS header of the payload of the JWE pointed to by 'request_uri' parameter does not contain 'alg' parameter.
        description: 'The developer of the client application should fix the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) to include the `alg` parameter.'
      A005311:
        code: A005311
        message: 'Failed to fetch the JWK Set of the client (ID = {Client ID}) from the location pointed to by ''jwks_uri'' ({URL}): {Error Message}'
        description: Authlete tried to fetch the JWK Set of the client application from the registered URL but in vain. The developer of the client application should check if the URL is valid and it returns a valid JWK Set.
      A005312:
        code: A005312
        message: 'The algorithm in the JWS header of the request object passed by ''request'' parameter does not match the registered one ({Algorithm}).'
        description: 'The client application should be fixed to use the registered algorithm for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests), or the developer of the client application should change the registered value of the `requestSignAlg` property.'
      A005313:
        code: A005313
        message: 'The algorithm in the JWS header of the payload of the JWE passed by ''request'' parameter does not match the registered one ({Algorithm}).'
        description: 'The client application should be fixed to use the registered algorithm for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests), or the developer of the client application should change the registered value of the `requestSignAlg` property.'
      A005314:
        code: A005314
        message: 'The algorithm in the JWS header of the request object pointed to by ''request_uri'' parameter does not match the registered one ({Algorithm}).'
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed with the registered algorithm, or the developer of the client application should change the registered value of the `requestSignAlg` property.'
      A005315:
        code: A005315
        message: 'The algorithm in the JWS header of the payload of the JWE pointed to by ''request'' parameter does not match the registered one ({Algorithm}).'
        description: 'The client application should be signed with the registered algorithm, or the developer of the client application should change the registered value of the `requestSignAlg` property.'
      A005316:
        code: A005316
        message: 'The algorithm in the JWS header of the request object passed by ''request'' parameter is symmetric ({Algorithm}), but the client type is not confidential.'
        description: 'The client application should not use the algorithm for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests). The developer of the client application should either change the client type to confidential (= change the registered value of the `clientType` property to `CONFIDENTIAL`) or change the registered algorithm to one of asymmetric algorithms (= change the registered value of the `requestSignAlg` property) and fix the application code to use the asymmetric algorithm.'
      A005317:
        code: A005317
        message: 'The algorithm in the JWS header of the JWE passed by ''request'' parameter is symmetric ({Algorithm}), but the client type is not confidential.'
        description: 'The client application should not use the algorithm for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests). The developer of the client application should either change the client type to confidential (= change the registered value of the `clientType` property to `CONFIDENTIAL`) or change the registered algorithm to one of asymmetric algorithms (= change the registered value of the `requestSignAlg` property) and fix the application code to use the asymmetric algorithm.'
      A005318:
        code: A005318
        message: 'The algorithm in the JWS header of the request object pointed to by ''request_uri'' parameter is symmetric ({Algorithm}), but the client type is not confidential.'
        description: 'The algorithm should not be used to sign the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`). The developer of the client application should either change the client type to confidential (= change the registered value of the `clientType` property to `CONFIDENTIAL`) or change the registered algorithm to one of asymmetric algorithms (= change the registered value of the `requestSignAlg` property) and sign the request object with the asymmetric algorithm.'
      A005319:
        code: A005319
        message: 'The algorithm in the JWS header of the JWE pointed to by ''request_uri'' parameter is symmetric ({Algorithm}), but the client type is not confidential.'
        description: 'The algorithm should not be used to sign the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`). The developer of the client application should either change the client type to confidential (= change the registered value of the `clientType` property to `CONFIDENTIAL`) or change the registered algorithm to one of asymmetric algorithms (= change the registered value of the `requestSignAlg` property) and sign the request object with the asymmetric algorithm.'
      A005320:
        code: A005320
        message: The algorithm in the JWS header of the request object passed by 'request' parameter is not supported.
        description: 'The client application should be fixed to use one of the supported algorithms for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005321:
        code: A005321
        message: The algorithm in the JWS header of the payload of the JWE passed by 'request' parameter is not supported.
        description: 'The client application should be fixed to use one of the supported algorithms for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005322:
        code: A005322
        message: The algorithm in the JWS header of the request object pointed to by 'request_uri' parameter is not supported.
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed with one of the supported algorithms.'
      A005323:
        code: A005323
        message: The algorithm in the JWS header of the payload of the JWE pointed to by 'request_uri' parameter is not supported.
        description: 'The client application should be fixed to use one of the supported algorithms for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005324:
        code: A005324
        message: 'The signature of the request object passed by ''request'' parameter failed to be verified: {Error Message}'
        description: 'The client application should be fixed to sign the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) correctly.'
      A005325:
        code: A005325
        message: 'The signature of the payload of the JWE passed by ''request'' parameter failed to be verified: {Error Message}'
        description: 'The client application should be fixed to sign the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) correctly.'
      A005326:
        code: A005326
        message: 'The signature of the request object pointed to by ''request_uri'' parameter failed to be verified: {Error Message}'
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed correctly.'
      A005327:
        code: A005327
        message: 'The signature of the payload of the JWE pointed to by ''request_uri'' parameter failed to be verified: {Error Message}'
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed correctly.'
      A005328:
        code: A005328
        message: The signature of the request object passed by 'request' parameter was not verified.
        description: 'The client application should be fixed to use the correct private or shared key for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005329:
        code: A005329
        message: The signature of the payload of the JWE passed by 'request' parameter was not verified.
        description: 'The client application should be fixed to use the correct private or shared key for signing the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests).'
      A005330:
        code: A005330
        message: The signature of the request object pointed to by 'request_uri' parameter was not verified.
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed with the correct private or shared key.'
      A005331:
        code: A005331
        message: The signature of the payload of the JWE pointed to by 'request_uri' parameter was not verified.
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed with the correct private or shared key.'
      A005332:
        code: A005332
        message: 'The request object passed by ''request'' parameter is signed using a private key, but neither ''jwks_uri'' nor ''jwks'' to get its associated public key is registered.'
        description: 'The developer of the client application should register the JWK Set (containing the paired public key) of the client application into the service (as the value of the `jwks` property), or make it accessible somewhere and register its URL into the service (as the value of the `jwksUri` property).'
      A005333:
        code: A005333
        message: 'The payload of the JWE passed by ''request'' parameter is signed using a private key, but neither ''jwks_uri'' nor ''jwks'' to get its associated public key is registered.'
        description: 'The developer of the client application should register the JWK Set (containing the paired public key) of the client application into the service (as the value of the `jwks` property), or make it accessible somewhere and register its URL into the service (as the value of the `jwksUri` property).'
      A005334:
        code: A005334
        message: 'The request object pointed to by ''request_uri'' parameter is signed using a private key, but neither ''jwks_uri'' nor ''jwks'' to get its associated public key is registered.'
        description: 'The developer of the client application should register the JWK Set (containing the paired public key) of the client application into the service (as the value of the `jwks` property), or make it accessible somewhere and register its URL into the service (as the value of the `jwksUri` property).'
      A005335:
        code: A005335
        message: 'The payload of the JWE pointed by ''request_uri'' parameter is signed using a private key, but neither ''jwks_uri'' nor ''jwks'' to get its associated public key is registered.'
        description: 'The developer of the client application should register the JWK Set (containing the paired public key) of the client application into the service (as the value of the `jwks` property), or make it accessible somewhere and register its URL into the service (as the value of the `jwksUri` property).'
      A005336:
        code: A005336
        message: The request object passed by 'request' parameter is not signed but the registered value of 'request_object_signing_alg' is neither 'none' nor null.
        description: 'The client application should be fixed to sign the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) with the registered algorithm (the value of the `requestSignAlg` property), or the developer of the client application should change the value of the registered algorithm to `none` or `null`.'
      A005337:
        code: A005337
        message: The payload of the JWE passed by 'request' parameter is not signed but the registered value of 'request_object_signing_alg' is neither 'none' nor null.
        description: 'The client application should be fixed to sign the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) with the registered algorithm (the value of the `requestSignAlg` property), or the developer of the client application should change the value of the registered algorithm to `none` or `null`.'
      A005338:
        code: A005338
        message: The request object pointed to by 'request_uri' parameter is not signed but the registered value of 'request_object_signing_alg' is neither 'none' nor null.
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed with the registered algorithm (the value of the `requestSignAlg` property), or the developer of the client application should change the value of the registered algorithm to `none` or `null`.'
      A005339:
        code: A005339
        message: The payload of the JWE pointed to by 'request_uri' parameter is not signed but the registered value of 'request_object_signing_alg' is neither 'none' nor null.
        description: 'The [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) should be signed with the registered algorithm (the value of the `requestSignAlg` property), or the developer of the client application should change the value of the registered algorithm to `none` or `null`.'
      A005340:
        code: A005340
        message: 'The JWK Set pointed to by ''jwks_uri'' does not contain the public key to verify the signature of the request object passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should check if the JWK Set pointed to by the registered URL (the value of `jwksUri` property) contains the public key for the combination of the algorithm and the key ID.
      A005341:
        code: A005341
        message: 'The JWK Set pointed to by ''jwks_uri'' does not contain the public key to verify the signature of the payload of the JWE passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should check if the JWK Set pointed to by the registered URL (the value of `jwksUri` property) contains the public key for the combination of the algorithm and the key ID.
      A005342:
        code: A005342
        message: 'The JWK Set pointed to by ''jwks_uri'' does not contain the public key to verify the signature of the request object pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should check if the JWK Set pointed to by the registered URL (the value of `jwksUri` property) contains the public key for the combination of the algorithm and the key ID.
      A005343:
        code: A005343
        message: 'The JWK Set pointed to by ''jwks_uri'' does not contain the public key to verify the signature of the payload of the JWE pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should check if the JWK Set pointed to by the registered URL (the value of `jwksUri` property) contains the public key for the combination of the algorithm and the key ID.
      A005344:
        code: A005344
        message: 'The JWK Set pointed to by ''jwks_uri'' contains multiple candidate public keys to verify the signature of the request object passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: 'Either or both the client application and the JWK Set pointed to by the registered URL (the value of `jwksUri` property) should be fixed so that Authlete can identify the public key to use for signature verification. For example, unique key IDs should be assigned to the candidate public keys and the client application should specify one of the key IDs in the request object as the value of `kid`.'
      A005345:
        code: A005345
        message: 'The JWK Set pointed to by ''jwks_uri'' contains multiple candidate public keys to verify the signature of the payload of the JWE passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: 'Either or both the client application and the JWK Set pointed to by the registered URL (the value of `jwksUri` property) should be fixed so that Authlete can identify the public key to use for signature verification. For example, unique key IDs should be assigned to the candidate public keys and the client application should specify one of the key IDs in the request object as the value of `kid`.'
      A005346:
        code: A005346
        message: 'The JWK Set pointed to by ''jwks_uri'' contains multiple candidate public keys to verify the signature of the request object pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: 'Either or both the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) and the JWK Set pointed to by the registered URL (the value of `jwksUri` property) should be fixed so that Authlete can identify the public key to use for signature verification. For example, unique key IDs should be assigned to the candidate public keys and the request object should include one of the key IDs as the value of `kid`.'
      A005347:
        code: A005347
        message: 'The JWK Set pointed to by ''jwks_uri'' contains multiple candidate public keys to verify the signature of the payload of the JWE pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: 'Either or both the [request object](http://openid.net/specs/openid-connect-core-1_0.html#JWTRequests) pointed to by the URL (`request_uri`) and the JWK Set pointed to by the registered URL (the value of `jwksUri` property) should be fixed so that Authlete can identify the public key to use for signature verification. For example, unique key IDs should be assigned to the candidate public keys and the request object should include one of the key IDs as the value of `kid`.'
      A005348:
        code: A005348
        message: 'Failed to parse the JWK Set of the client (ID = {Client ID}) fetched from the location pointed to by ''jwks_uri'' ({URL}) as JWKSet: {Error Message}'
        description: Check if the JWK Set is formatted correctly.
      A005349:
        code: A005349
        message: 'The JWK Set of the client (ID = {Client ID}) was not found in the database, unexpectedly.'
        description: This may happen while the configuration of the client application is temporarily inconsistent. Try later again.
      A005350:
        code: A005350
        message: 'The client (ID = {Client ID}) was not found in the database, unexpectedly.'
        description: 'Probably, the client application was deleted while the API call was being processed.'
      A005351:
        code: A005351
        message: 'The client (ID = {Client ID}) has not registered its JWK Set.'
        description: The developer of the client application should register the JWK Set of the client application.
      A005352:
        code: A005352
        message: 'The registered JWK Set does not contain the public key to verify the signature of the request object passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should update the JWK Set (= the value of `jwks` property) to include the public key.
      A005353:
        code: A005353
        message: 'The registered JWK Set does not contain the public key to verify the signature of the payload of the JWE passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should update the JWK Set (= the value of `jwks` property) to include the public key.
      A005354:
        code: A005354
        message: 'The registered JWK Set does not contain the public key to verify the signature of the request object pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should update the JWK Set (= the value of `jwks` property) to include the public key.
      A005355:
        code: A005355
        message: 'The registered JWK Set does not contain the public key to verify the signature of the payload of the JWE pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: The developer of the client application should update the JWK Set (= the value of `jwks` property) to include the public key.
      A005356:
        code: A005356
        message: 'The registered JWK Set contains multiple candidate public keys to verify the signature of the request object passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
        description: 'Either or both the client application and the registered JWK Set (the value of `jwks` property) should be fixed so that Authlete can identify the public key to use for signature verification. For example, unique key IDs should be assigned to the candidate public keys and the client application should specify one of the key IDs in the request object as the value of `kid`.'
      A005357:
        code: A005357
        message: 'The registered JWK Set contains multiple candidate public keys to verify the signature of the payload of the JWE passed by ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
      A005358:
        code: A005358
        message: 'The registered JWK Set contains multiple candidate public keys to verify the signature of the request object pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
      A005359:
        code: A005359
        message: 'The registered JWK Set contains multiple candidate public keys to verify the signature of the payload of the JWE pointed to by ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
      A005360:
        code: A005360
        message: The JWE header of the request object passed by 'request' parameter does not contain 'alg' parameter.
      A005361:
        code: A005361
        message: The JWE header of the request object pointed to by 'request_uri' parameter does not contain 'alg' parameter.
      A005362:
        code: A005362
        message: The JWE header of the request object passed by 'request' parameter does not contain 'enc' parameter.
      A005363:
        code: A005363
        message: The JWE header of the request object pointed to by 'request_uri' parameter does not contain 'enc' parameter.
      A005364:
        code: A005364
        message: 'Failed to decrypt the JWE passed by ''request'' parameter (alg={Algorithm}, enc={Algorithm}): {Error Message}'
      A005365:
        code: A005365
        message: 'Failed to decrypt the JWE pointed to by ''request_uri'' parameter (alg={Algorithm}, enc={Algorithm}): {Error Message}'
      A005366:
        code: A005366
        message: The value of 'enc' in the header of the JWE passed by 'request' parameter is not supported.
      A005367:
        code: A005367
        message: The value of 'enc' in the header of the JWE pointed to by 'request_uri' parameter is not supported.
      A005368:
        code: A005368
        message: The value of 'alg' in the header of the JWE passed by 'request' parameter is not supported.
      A005369:
        code: A005369
        message: The value of 'alg' in the header of the JWE pointed to by 'request_uri' parameter is not supported.
      A005370:
        code: A005370
        message: 'The value of ''alg'' in the header of the JWE passed by ''request'' parameter is symmetric ({Algorithm}), but the client type is not confidential.'
      A005371:
        code: A005371
        message: 'The value of ''alg'' in the header of the JWE pointed to by ''request_uri'' parameter is symmetric ({Algorithm}), but the client type is not confidential.'
      A005372:
        code: A005372
        message: 'The request object passed by ''request'' parameter is encrypted, but this service does not accept encrypted request objects.'
      A005373:
        code: A005373
        message: 'The request object pointed to by ''request_uri'' parameter is encrypted, but this service does not accept encrypted request objects.'
      A005374:
        code: A005374
        message: 'The private key to decrypt the request object passed by ''request'' parameter is not found. (alg={Algorithm}, kid={Key ID})'
      A005375:
        code: A005375
        message: 'The private key to decrypt the request object pointed to by ''request_uri'' parameter is not found. (alg={Algorithm}, kid={Key ID})'
      A005376:
        code: A005376
        message: 'There are multiple candidate private keys to decrypt the request object passed ''request'' parameter. (alg={Algorithm}, kid={Key ID})'
      A005377:
        code: A005377
        message: 'There are multiple candidate private keys to decrypt the request object pointed to ''request_uri'' parameter. (alg={Algorithm}, kid={Key ID})'
      A005378:
        code: A005378
        message: Failed to parse the request object passed by 'request' parameter as a JSON.
      A005379:
        code: A005379
        message: 'Failed to parse the payload of the JWE passed by ''request'' parameter as a JSON. '
      A005380:
        code: A005380
        message: Failed to parse the request object pointed to by 'request_uri' parameter as a JSON.
      A005381:
        code: A005381
        message: Failed to parse the payload of the JWE pointed to by 'request_uri' parameter as a JSON.
      A005382:
        code: A005382
        message: 'Failed to fetch the request object of the client (ID = {Client ID}) from the location pointed to by ''request_uri'' ({URL}): {Error Message}'
      A005383:
        code: A005383
        message: The request object pointed to by 'request_uri' parameter is not signed but the scheme of the URI is not https.
      A005384:
        code: A005384
        message: 'The value of ''request_uri'' parameter is not registered: {URL}'
      A005385:
        code: A005385
        message: 'The client (ID = {Client ID}) has not registered the content of the request object for the request URI ({URL}) although the content is marked as hosted.'
      A005386:
        code: A005386
        message: 'The value of ''request_uri'' parameter is not registered: {URL}'
      A005387:
        code: A005387
        message: The request object passed by 'request' parameter contains 'client_id' but its value is not a string.
      A005388:
        code: A005388
        message: The payload of the JWE passed by 'request' parameter contains 'client_id' but its value is not a string.
      A005389:
        code: A005389
        message: 'The request object pointed to by ''request_uri'' parameter contains ''client_id'' but its value is not a string. '
      A005390:
        code: A005390
        message: The payload of the JWE pointed to by 'request_uri' parameter contains 'client_id' but its value is not a string.
      A005391:
        code: A005391
        message: 'The value of ''client_id'' ({Client ID}) in the request object passed by ''request'' parameter is different from the one specified by ''client_id'' parameter ({Client ID}).'
      A005392:
        code: A005392
        message: 'The value of ''client_id'' ({Client ID}) in the payload of the JWE passed by ''request'' parameter is different from the one specified by ''client_id'' parameter ({Client ID}).'
      A005393:
        code: A005393
        message: 'The value of ''client_id'' ({Client ID}) in the request object pointed to by ''request_uri'' parameter is different from the one specified by ''client_id'' parameter ({Client ID}).'
      A005394:
        code: A005394
        message: 'The value of ''client_id'' ({Client ID}) in the payload of the JWE pointed to by ''request_uri'' parameter is different from the one specified by ''client_id'' parameter ({Client ID}).'
      A005395:
        code: A005395
        message: The request object passed by 'request' parameter contains 'response_type' but its value is not a string.
      A005396:
        code: A005396
        message: The payload of the JWE passed by 'request' parameter contains 'response_type' but its value is not a string.
      A005397:
        code: A005397
        message: 'The request object pointed to by ''request_uri'' parameter contains ''response_type'' but its value is not a string. '
      A005398:
        code: A005398
        message: The payload of the JWE pointed to by 'request_uri' parameter contains 'response_type' but its value is not a string.
      A005399:
        code: A005399
        message: 'The value of ''response_type'' ({Response Type}) in the request object passed by ''request'' parameter is invalid.'
      A006301:
        code: A006301
        message: 'The value of ''response_type'' ({Response Type}) in the payload of the JWE passed by ''request'' parameter is invalid.'
      A006302:
        code: A006302
        message: 'The value of ''response_type'' ({Response Type}) in the request object pointed to by ''request_uri'' parameter is invalid.'
      A006303:
        code: A006303
        message: 'The value of ''response_type'' ({Response Type}) in the payload of the JWE pointed to by ''request_uri'' parameter is invalid.'
      A006304:
        code: A006304
        message: 'The value of ''response_type'' ({Response Type}) in the request object passed by ''request'' parameter is different from the one specified by ''response_type'' parameter ({Response Type}).'
      A006305:
        code: A006305
        message: 'The value of ''response_type'' ({Response Type}) in the payload of the JWE passed by ''request'' parameter is different from the one specified by ''response_type'' parameter ({Response Type}).'
      A006306:
        code: A006306
        message: 'The value of ''response_type'' ({Response Type}) in the request object pointed to by ''request_uri'' parameter is different from the one specified by ''response_type'' parameter ({Response Type}).'
      A006307:
        code: A006307
        message: 'The value of ''response_type'' ({Response Type}) in the payload of the JWE pointed to by ''request_uri'' parameter is different from the one specified by ''response_type'' parameter ({Response Type}).'
      A006308:
        code: A006308
        message: 'The request object passed by ''request'' parameter contains ''request'' parameter, which is not allowed.'
      A006309:
        code: A006309
        message: 'The payload of the JWE passed by ''request'' parameter contains ''request'' parameter, which is not allowed.'
      A006310:
        code: A006310
        message: 'The request object pointed to by ''request_uri'' parameter contains ''request'' parameter, which is not allowed. '
      A006311:
        code: A006311
        message: 'The payload of the JWE pointed to by ''request_uri'' parameter contains ''request'' parameter, which is not allowed.'
      A006312:
        code: A006312
        message: 'The request object passed by ''request'' parameter contains ''request_uri'' parameter, which is not allowed.'
      A006313:
        code: A006313
        message: 'The payload of the JWE passed by ''request'' parameter contains ''request_uri'' parameter, which is not allowed.'
      A006314:
        code: A006314
        message: 'The request object pointed to by ''request_uri'' parameter contains ''request_uri'' parameter, which is not allowed. '
      A006315:
        code: A006315
        message: 'The payload of the JWE pointed to by ''request_uri'' parameter contains ''request_uri'' parameter, which is not allowed.'
      A006316:
        code: A006316
        message: 'Failed to create a verifier for the symmetric algorithm ({Algorithm}) specified in the JWS header of the request object passed by ''request'' parameter.'
      A006317:
        code: A006317
        message: 'Failed to create a verifier for the symmetric algorithm ({Algorithm}) specified in the JWS header of the JWE passed by ''request'' parameter.'
      A006318:
        code: A006318
        message: 'Failed to create a verifier for the symmetric algorithm ({Algorithm}) specified in the JWS header of the request object pointed to by ''request_uri'' parameter.'
      A006319:
        code: A006319
        message: 'Failed to create a verifier for the symmetric algorithm ({Algorithm}) specified in the JWS header of the JWE pointed to by ''request_uri'' parameter.'
      A006320:
        code: A006320
        message: 'Failed to create a verifier for the elliptic curve algorithm ({Algorithm}) specified in the JWS header of the request object passed by ''request'' parameter.'
      A006321:
        code: A006321
        message: 'Failed to create a verifier for the elliptic curve algorithm ({Algorithm}) specified in the JWS header of the JWE passed by ''request'' parameter.'
      A006322:
        code: A006322
        message: 'Failed to create a verifier for the elliptic curve algorithm ({Algorithm}) specified in the JWS header of the request object pointed to by ''request_uri'' parameter.'
      A006323:
        code: A006323
        message: 'Failed to create a verifier for the elliptic curve algorithm ({Algorithm}) specified in the JWS header of the JWE pointed to by ''request_uri'' parameter.'
      A006324:
        code: A006324
        message: 'Unable to delete the request URI from the database. Error message: {Error Message}'
      A006325:
        code: A006325
        message: The request URI was locally hosted but was either expired or contained no request object content.
      A006326:
        code: A006326
        message: The request object passed by 'request' parameter does not contain 'response_type' which is required by JAR (JWT Secured Authorization Request).
      A006327:
        code: A006327
        message: The payload of the JWE passed by 'request' parameter does not contain 'response_type' which is required by JAR (JWT Secured Authorization Request).
      A006328:
        code: A006328
        message: The request object pointed to by 'request_uri' parameter does not contain 'response_type' which is required by JAR (JWT Secured Authorization Request).
      A006329:
        code: A006329
        message: The payload of the JWE pointed to by 'request_uri' parameter does not contain 'response_type' which is required by JAR (JWT Secured Authorization Request).
      A006330:
        code: A006330
        message: 'The JWE alg of the request object passed by the ''request'' parameter does not match the ''request_object_encryption_alg'' client metadata: actual={JWE alg}, required={JWE alg}'
      A006331:
        code: A006331
        message: 'The JWE alg of the request object referenced by the ''request_uri'' parameter does not match the ''request_object_encryption_alg'' client metadata: actual={JWE alg}, required={JWE alg}'
      A006332:
        code: A006332
        message: 'The JWE enc of the request object passed by the ''request'' parameter does not match the ''request_object_encryption_enc'' client metadata: actual={JWE enc}, required={JWE enc}'
      A006333:
        code: A006333
        message: 'The JWE enc of the request object referenced by the ''request_uri'' parameter does not match the ''request_object_encryption_enc'' client metadata: actual={JWE enc}, required={JWE enc}'
      A006334:
        code: A006334
        message: The request object passed through the front channel is not encrypted.
      A006335:
        code: A006335
        message: The request object passed by the 'request' parameter contains 'exp' but its value is not a number.
      A006336:
        code: A006336
        message: The payload of the JWE passed by the 'request' parameter contains 'exp' but its value is not a number.
      A006337:
        code: A006337
        message: The request object pointed to by the 'request_uri' parameter contains 'exp' but its value is not a number.
      A006338:
        code: A006338
        message: The payload of the JWE pointed to by the 'request_uri' parameter contains 'exp' but its value is not a number.
      A006339:
        code: A006339
        message: The request object passed by the 'request' parameter has already expired.
      A006340:
        code: A006340
        message: The payload of the JWE passed by the 'request' parameter has already expired.
      A006341:
        code: A006341
        message: The request object pointed to by the 'request_uri' parameter has already expired.
      A006342:
        code: A006342
        message: The payload of the JWE pointed to by the 'request_uri' parameter has already expired.
      A006343:
        code: A006343
        message: The request object passed by the 'request' parameter contains 'nbf' but its value is not a number.
      A006344:
        code: A006344
        message: The payload of the JWE passed by the 'request' parameter contains 'nbf' but its value is not a number.
      A006345:
        code: A006345
        message: The request object pointed to by the 'request_uri' parameter contains 'nbf' but its value is not a number.
      A006346:
        code: A006346
        message: The payload of the JWE pointed to by the 'request_uri' parameter contains 'nbf' but its value is not a number.
      A006347:
        code: A006347
        message: The request object passed by the 'request' parameter has not started its validity period yet.
      A006348:
        code: A006348
        message: The payload of the JWE passed by the 'request' parameter not started its validity period yet.
      A006349:
        code: A006349
        message: The request object pointed to by the 'request_uri' parameter not started its validity period yet.
      A006350:
        code: A006350
        message: The payload of the JWE pointed to by the 'request_uri' parameter not started its validity period yet.
      A006351:
        code: A006351
        message: The request object passed by the 'request' parameter contains no 'aud' claim.
      A006352:
        code: A006352
        message: The payload of the JWE passed by the 'request' parameter contains no 'aud' claim.
      A006353:
        code: A006353
        message: The request object pointed to by the 'request_uri' parameter contains no 'aud' claim.
      A006354:
        code: A006354
        message: The payload of the JWE pointed to by the 'request_uri' parameter contains no 'aud' claim.
      A006355:
        code: A006355
        message: The value of the 'aud' claim in the request object passed by the 'request' parameter is neither a string nor an array.
      A006356:
        code: A006356
        message: The value of the 'aud' claim in the payload of the JWE passed by the 'request' parameter is neither a string nor an array.
      A006357:
        code: A006357
        message: The value of the 'aud' claim in the request object pointed to by the 'request_uri' parameter is neither a string nor an array.
      A006358:
        code: A006358
        message: The value of the 'aud' claim in the payload of the JWE pointed to by the 'request_uri' parameter is neither a string nor an array.
      A006359:
        code: A006359
        message: The value of the 'aud' claim in the request object passed by the 'request' parameter does not match the issuer identifier of this service.
      A006360:
        code: A006360
        message: The value of the 'aud' claim in the payload of the JWE passed by the 'request' parameter does not match the issuer identifier of this service.
      A006361:
        code: A006361
        message: The value of the 'aud' claim in the request object pointed to by the 'request_uri' parameter does not match the issuer identifier of this service.
      A006362:
        code: A006362
        message: The value of the 'aud' claim in the payload of the JWE pointed to by the 'request_uri' parameter does not match the issuer identifier of this service.
      A006363:
        code: A006363
        message: None of the element in the 'aud' claim in the request object passed by the 'request' parameter match the issuer identifier of this service.
      A006364:
        code: A006364
        message: None of the element in the 'aud' claim in the payload of the JWE passed by the 'request' parameter match the issuer identifier of this service.
      A006365:
        code: A006365
        message: None of the element in the 'aud' claim in the request object pointed to by the 'request_uri' parameter match the issuer identifier of this service.
      A006366:
        code: A006366
        message: None of the element in the 'aud' claim in the payload of the JWE pointed to by the 'request_uri' parameter match the issuer identifier of this service.
      A007101:
        code: A007101
        message: Failed to get the list of pre-defined scopes from 'scope' table.
      A007102:
        code: A007102
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A007301:
        code: A007301
        message: The value of 'scope' parameter in the request object is not a string.
      A007302:
        code: A007302
        message: The authorization request contains multiple 'scope' parameters.
      A007303:
        code: A007303
        message: The value of 'scope' in the request object contains 'openid' but the authorization request does not have 'scope' parameter.
      A007304:
        code: A007304
        message: The value of 'scope' in the request object contains 'openid' but the authorization request parameter 'scope' does not contain 'openid'.
      A007305:
        code: A007305
        message: 'The authorization request has no ''scope'' parameter or none of the given scopes is recognized as valid, and the service''s default scope set is empty. The service''s configuration does not allow requests that request no scope.'
      A008101:
        code: A008101
        message: Failed to get the list of registered request URIs from 'request_uri' table.
      A008301:
        code: A008301
        message: The authorization request contains multiple 'request' parameters.
      A008302:
        code: A008302
        message: The authorization request contains multiple 'request_uri' parameters.
      A008303:
        code: A008303
        message: The value of 'request_uri' parameter is not registered.
      A008304:
        code: A008304
        message: The authorization request contains both 'request' parameter and 'request_uri' parameter.
      A008305:
        code: A008305
        message: The 'request_uri' parameter must be given because the 'require_pushed_authorization_requests' client metadata is true.
      A008306:
        code: A008306
        message: The 'request_uri' parameter must be given because the 'require_pushed_authorization_requests' server metadata is true.
      A008307:
        code: A008307
        message: The value of 'request_uri' parameter must be a request URI issued from the pushed authorization request endpoint because the 'require_pushed_authorization_requests' client metadata is true.
      A008308:
        code: A008308
        message: The value of 'request_uri' parameter must be a request URI issued from the pushed authorization request endpoint because the 'require_pushed_authorization_requests' server metadata is true.
      A008309:
        code: A008309
        message: 'The configuration of the client requires that authorization requests from the client always utilize a request object, but the authorization request does not conform to the requirement.'
      A008310:
        code: A008310
        message: 'The configuration of the service requires that authorization requests to the service always utilize a request object, but the authorization request does not conform to the requirement.'
      A008311:
        code: A008311
        message: 'The service is configured to conform to JAR (JWT Secured Authorization Request), so request objects must be always signed.'
      A009301:
        code: A009301
        message: The authorization request does not contain 'response_type' parameter.
      A009302:
        code: A009302
        message: The value of 'response_type' parameter contained in the authorization request is empty.
      A009303:
        code: A009303
        message: The authorization request contains multiple 'response_type' parameters.
      A009304:
        code: A009304
        message: The value of 'response_type' parameter contained in the authorization request is invalid.
      A009305:
        code: A009305
        message: 'The response type ''{Response Type}'' is not supported by this service.'
      A009306:
        code: A009306
        message: 'The client (ID = {Client ID}) does not declare it uses the response type ''{Response Type}''.'
      A009307:
        code: A009307
        message: '''response_type'' in the request object does not match the value of ''response_type'' request parameter outside the request object.'
      A009308:
        code: A009308
        message: The value of 'response_type' (%s) in the request object is different from the one specified by 'response_type' parameter (%s).
      A010101:
        code: A010101
        message: Failed to get the client information from 'client' table.
      A010102:
        code: A010102
        message: Failed to get the client information by a client ID alias.
      A010301:
        code: A010301
        message: The authorization request does not contain 'client_id' parameter.
      A010302:
        code: A010302
        message: The value of 'client_id' parameter contained in the authorization request is empty.
      A010303:
        code: A010303
        message: The authorization request contains multiple 'client_id' parameters.
      A010304:
        code: A010304
        message: 'No client has the client ID ({Client ID}).'
      A010305:
        code: A010305
        message: 'The client (ID = {Client ID}) does not belong to this service.'
      A010306:
        code: A010306
        message: 'The client (ID = {Client ID}) has been deleted.'
      A010307:
        code: A010307
        message: 'The client (ID = {Client ID}) is locked.'
      A010308:
        code: A010308
        message: 'No client has the client ID ({Client ID}) or the client ID alias.'
      A010309:
        code: A010309
        message: 'The client ID alias ({Client ID Alias}) of the client is not enabled.'
      A011101:
        code: A011101
        message: Failed to get the list of registered redirect URIs from 'redirect_uri' table.
      A011301:
        code: A011301
        message: The value of 'redirect_uri' in the request object is not a string.
      A011302:
        code: A011302
        message: The authorization request contains multiple 'redirect_uri' parameters.
      A011303:
        code: A011303
        message: '''redirect_uri'' parameter must be explicitly specified when ''scope'' parameter contains ''openid''.'
      A011304:
        code: A011304
        message: 'The value of ''redirect_uri'' ({URL}) is not registered.'
      A011305:
        code: A011305
        message: The scheme of the redirect URI must be 'https' when 'response_type' of an authorization request from a 'web' client contains either 'token' or 'id_token'.
      A011306:
        code: A011306
        message: The host of the redirect URI must not be 'localhost' when 'response_type' of an authorization request from a 'web' client contains either 'token' or 'id_token'.
      A011307:
        code: A011307
        message: The scheme of the redirect URI must not be 'https' when the client's application type is 'native'.
      A011308:
        code: A011308
        message: The host of the redirect URI must be 'localhost' when the client's application type is 'native' and the scheme of the redirect URI is 'http'.
      A011309:
        code: A011309
        message: The client has not registered any redirect URI.
      A011310:
        code: A011310
        message: 'The client type is ''public'', but the client has not registered any redirect URI.'
      A011311:
        code: A011311
        message: An authorization request whose response_type contains either 'token' or 'id_token' requires the client to register at least one redirect URI even if the client type is 'confidential'.
      A011312:
        code: A011312
        message: '''redirect_uri'' parameter must be contained when a ''confidential'' client that has not registered any redirect URI makes an authorization request of the authorization code grant type.'
      A011313:
        code: A011313
        message: '''redirect_uri'' parameter must be contained when a client that has registered multiple redirect URIs makes an authorization request.'
      A011314:
        code: A011314
        message: The value of 'redirect_uri' contained in the authorization request is not well-formed.
      A011315:
        code: A011315
        message: The value of 'redirect_uri' contained in the authorization request is not absolute.
      A011316:
        code: A011316
        message: The value of 'redirect_uri' contained in the authorization request has a fragment component.
      A011317:
        code: A011317
        message: 'The value of ''redirect_uri'' ({URL}) is not registered.'
      A011318:
        code: A011318
        message: The authorization request does not contain 'redirect_uri' parameter.
      A011319:
        code: A011319
        message: The value of 'redirect_uri' parameter contained in the authorization request is empty.
      A012301:
        code: A012301
        message: The value of 'response_mode' in the request object is not a string.
      A012302:
        code: A012302
        message: The authorization request contains multiple 'response_mode' parameters.
      A012303:
        code: A012303
        message: The value of 'response_mode' is not supported.
      A012304:
        code: A012304
        message: '''response_mode=query'' is not allowed when ''response_type'' is ''{Response Type}''.'
      A012305:
        code: A012305
        message: 'The authorization request required the authorization response be encoded as JWT by specifying ''response_mode={Response Mode}'', but the ''authorization_signed_response_alg'' metadata of the client (ID = {Client ID}) is not set.'
      A012306:
        code: A012306
        message: 'The authorization request required the authorization response be encoded as JWT by specifying ''response_mode={Response Mode}'', but the ''authorization_signed_response_alg'' metadata of the client (ID = {Client ID}) is ''none''. Change the registered value of the metadata.'
      A012307:
        code: A012307
        message: 'The authorization request required the authorization response be encoded as JWT by specifying ''response_mode={Response Mode}'', but the ''authorization_signed_response_alg'' metadata of the client (ID = {Client ID}) is a symmetric algorithm (''{Algorithm}''). Change the algorithm to an asymmetric one or change the client type to ''confidential''.'
      A012308:
        code: A012308
        message: 'The authorization request required the authorization response be encoded as JWT by specifying ''response_mode={Response Mode}'', but the ''authorization_encrypted_response_alg'' metadata of the client (ID = {Client ID}) is a symmetric algorithm (''{Algorithm}''). Change the algorithm to an asymmetric one or change the client type to ''confidential''.'
      A012309:
        code: A012309
        message: 'For the response type (''{Response Type}''), the response mode (''{Response Mode}'') is allowed only when the authorization response JWT is encrypted. Set the value of the ''authorization_encrypted_response_alg'' metadata of the client (ID = {Client ID}).'
      A013301:
        code: A013301
        message: The value of 'state' in the request object is not a string.
      A013302:
        code: A013302
        message: The authorization request contains multiple 'state' parameters.
      A013303:
        code: A013303
        message: The value of 'state' contains non-ASCII letters.
      A013304:
        code: A013304
        message: 'The length of ''state'' exceeds the maximum length ({Number}).'
      A014301:
        code: A014301
        message: The value of 'nonce' in the request object is not a string.
      A014302:
        code: A014302
        message: The authorization request contains multiple 'nonce' parameters.
      A014303:
        code: A014303
        message: '''nonce'' is required when ''response_type'' contains ''id_token''.'
      A014304:
        code: A014304
        message: The value of 'nonce' contains non-ASCII letters.
      A014305:
        code: A014305
        message: 'The length of ''nonce'' exceeds the maximum length ({Number}).'
      A015301:
        code: A015301
        message: The value of 'display' in the request object is not a string.
      A015302:
        code: A015302
        message: The authorization request contains multiple 'display' parameters.
      A015303:
        code: A015303
        message: The value of 'display' is not supported.
      A015304:
        code: A015304
        message: The authorization request does not contain 'display' parameter but the default value 'page' is not supported by this service.
      A015305:
        code: A015305
        message: This service does not support the specified value of 'display'.
      A016301:
        code: A016301
        message: The value of 'prompt' in the request object is not a string.
      A016302:
        code: A016302
        message: The authorization request contains multiple 'prompt' parameters.
      A016303:
        code: A016303
        message: The value of 'prompt' contains an invalid element.
      A016304:
        code: A016304
        message: 'When ''none'' is included, the ''prompt'' request parameter must not include any other value.'
      A017301:
        code: A017301
        message: The value of 'max_age' in the request object is not a number.
      A017302:
        code: A017302
        message: The authorization request contains multiple 'max_age' parameters.
      A017303:
        code: A017303
        message: The value of 'max_age' failed to be parsed as a number.
      A017304:
        code: A017304
        message: The value of 'max_age' is not an integer.
      A017305:
        code: A017305
        message: The value of 'max_age' is out of the range of 'int'.
      A018101:
        code: A018101
        message: Failed to get the list of supported UI locales of the service from 'ui_locale' table.
      A018301:
        code: A018301
        message: The value of 'ui_locales' in the request object is not a string.
      A018302:
        code: A018302
        message: The authorization request contains multiple 'ui_locales' parameters.
      A019101:
        code: A019101
        message: Failed to insert a new record into the 'authorization_ticket' table.
      A020101:
        code: A020101
        message: Failed to get the list of supported claim locales of the service from 'claim_locale' table.
      A020301:
        code: A020301
        message: The value of 'claims_locales' in the request object is not a string.
      A020302:
        code: A020302
        message: The authorization request contains multiple 'claims_locales' parameters.
      A021101:
        code: A021101
        message: Failed to get the list of the default ACRs of the client from 'default_acr' table.
      A021102:
        code: A021102
        message: Failed to get the list of supported ACRs of the service from 'acr' table.
      A021301:
        code: A021301
        message: The value of 'acr_values' in the request object is not a string.
      A021302:
        code: A021302
        message: The authorization request contains multiple 'acr_values' parameters.
      A021303:
        code: A021303
        message: 'ACR values cannot be specified by any means (''claim'', ''acr_values'' or ''default_acr_values'') because this service supports no ACR value.'
      A021304:
        code: A021304
        message: 'The ACR value ''{ACR}'' is not supported by this service.'
      A022301:
        code: A022301
        message: The value of 'claims' in the request object is not a JSON object.
      A022302:
        code: A022302
        message: The authorization request contains multiple 'claims' parameters.
      A022303:
        code: A022303
        message: The value of 'claims' parameter in the authorization request is not a JSON object.
      A022304:
        code: A022304
        message: The value of 'userinfo' in 'claims' is not a JSON object.
      A022305:
        code: A022305
        message: The value of 'id_token' in 'claims' is not a JSON object.
      A022306:
        code: A022306
        message: 'The structure of ''{Context}/verified_claims'' in the ''claims'' request parameter is wrong: {Error Message}'
      A022307:
        code: A022307
        message: '''{Context}/verified_claims'' in the ''claims'' request parameter is invalid: {Error Message}'
      A023301:
        code: A023301
        message: 'The value of ''{Property Name}'' in ''claims'' is not a JSON object.'
      A023302:
        code: A023302
        message: 'The value of ''essential'' of ''{Property Name}'' in ''claims'' is not a boolean value.'
      A023303:
        code: A023303
        message: 'The value of ''value'' of ''{Property Name}'' in ''claims'' cannot be cast to {Type}.'
      A023304:
        code: A023304
        message: 'The value of ''values'' of ''{Property Name}'' in ''claims'' is not an array.'
      A023305:
        code: A023305
        message: 'The value of ''values'' of ''{Property Name}'' in ''claims'' contains an element which cannot be cast to {Type}.'
      A023306:
        code: A023306
        message: 'The request parameter ''{Request Parameter Name}'' is included in the request more than once.'
      A024301:
        code: A024301
        message: 'The claim ''{Claim Name}'' for ''{Context}'' cannot be requested by ''claims'' parameter when the value of ''prompt'' is ''none''.'
      A024302:
        code: A024302
        message: 'The scope ''{Scope Name}'' results in requesting some claims but it is not allowed when the value of ''prompt'' is ''none''.'
      A025101:
        code: A025101
        message: 'Failed to create a client of the service (API Key = {Service''s API Key}).'
      A026001:
        code: A026001
        message: 'The client (ID = {Client ID}) was deleted successfully.'
      A026101:
        code: A026101
        message: 'Failed to delete the client (ID = {Client ID}).'
      A026201:
        code: A026201
        message: 'The client (ID = {Client ID}) does not exist.'
      A026202:
        code: A026202
        message: 'The client (ID = {Client ID}) does not belong to the service.'
      A026203:
        code: A026203
        message: 'The client ({Client Identifier}) has already been deleted.'
      A026204:
        code: A026204
        message: 'The client ({Client Identifier}) is locked.'
      A027201:
        code: A027201
        message: 'The client (ID = {Client ID}) does not exist.'
      A027202:
        code: A027202
        message: 'The client (ID = {Client ID}) does not belong to the service.'
      A027203:
        code: A027203
        message: 'The client ({Client Identifier}) has been deleted.'
      A027204:
        code: A027204
        message: 'The client ({Client Identifier}) is locked.'
      A028201:
        code: A028201
        message: Parameter 'start' failed to be parsed as int.
      A028202:
        code: A028202
        message: Parameter 'start' must not be negative.
      A028203:
        code: A028203
        message: Parameter 'end' failed to be parsed as int.
      A028204:
        code: A028204
        message: Parameter 'end' must not be negative.
      A029101:
        code: A029101
        message: 'Failed to update the client (ID = {Client ID}).'
      A029201:
        code: A029201
        message: 'The client (ID = {Client ID}) does not exist.'
      A029202:
        code: A029202
        message: 'The client (ID = {Client ID}) does not belong to the service.'
      A029203:
        code: A029203
        message: 'The client ({Client Identifier}) has been deleted.'
      A029204:
        code: A029204
        message: 'The client ({Client Identifier}) is locked.'
      A030201:
        code: A030201
        message: 'The client (ID = {Client ID}) does not exist.'
      A030202:
        code: A030202
        message: 'The client (ID = {Client ID}) has been deleted.'
      A030203:
        code: A030203
        message: 'The client (ID = {Client ID}) is locked.'
      A030601:
        code: A030601
        message: Cannot update the client because the client ID alias is already in use. Client ID aliases must be unique in the same service.
      A030602:
        code: A030602
        message: The size of 'customMetadata' is too big.
      A031201:
        code: A031201
        message: '{API Path}, ''{Value}'' is not supported as a value for ''{Key}''.'
      A031202:
        code: A031202
        message: '{API Path}, ''{Key}'' is unspecified, empty or invalid.'
      A031203:
        code: A031203
        message: '{API Path}, ''{Key}'' must consist of only printable ASCII letters.'
      A031204:
        code: A031204
        message: '{API Path}, The length of ''{Key}'' must not exceed {Number} letters.'
      A031205:
        code: A031205
        message: '{API Path}, The element at the index ''{Number}'' of ''{Key}'' is null.'
      A031206:
        code: A031206
        message: '{API Path}, The element at the index ''{Number}'' of ''{Key}'' contains non-ASCII letters.'
      A031207:
        code: A031207
        message: '{API Path}, The length of the element at the index ''{Number}'' of ''{Key}'' must not exceed {Number} letters.'
      A031208:
        code: A031208
        message: '{API Path}, The element at the index ''{Number}'' of ''{Key}'' is not a well-formed URI.'
      A031209:
        code: A031209
        message: '{API Path}, The element at the index ''{Number}'' of ''{Key}'' is not an absolute URI.'
      A031210:
        code: A031210
        message: '{API Path}, The element at the index ''{Number}'' of ''{Key}'' has a fragment component.'
      A031211:
        code: A031211
        message: '{API Path}, The element at the index ''{Number}'' of ''{Key}'' is a duplicate.'
      A031212:
        code: A031212
        message: '{API Path}, The value of ''{Key}'' failed to be parsed as a JWK Set.'
      A031213:
        code: A031213
        message: '{API Path}, ''{Key}'' must not be negative.'
      A031214:
        code: A031214
        message: '{API Path}, ''{Key}'' is unspecified or invalid.'
      A031215:
        code: A031215
        message: '{API Path}, The JWK Set specified by ''{Key}'' is too big.'
      A031216:
        code: A031216
        message: '{API Path}, The JWK Set specified by ''{Key}'' contains non-ASCII letters.'
      A031217:
        code: A031217
        message: '{API Path}, The ''{Key}'' URI has a fragment component.'
      A031218:
        code: A031218
        message: '{API Path}, The ''{Key}'' URI has a query component.'
      A031219:
        code: A031219
        message: '{API Path}, The scheme of the ''{Key}'' URI is not https.'
      A031220:
        code: A031220
        message: '{API Path}, The number of entries for ''{Key}'' must not exceed {Number}.'
      A031221:
        code: A031221
        message: '{API Path}, The value ({Number}) of ''{Key}'' is not in the range between {Number} and {Number}.'
      A031222:
        code: A031222
        message: '{API Path}, ''{Algorithm}'' is given as the value of ''{Key}'', but the algorithm is not asymmetric.'
      A031223:
        code: A031223
        message: '{API Path}, The value of ''{Key}'' is not a valid X.500 distinguished name.'
      A031224:
        code: A031224
        message: '{API Path}, The ''{Field Name}'' of the element at the index ''%d'' of ''{Index}'' is a duplicate.'
      A031225:
        code: A031225
        message: '{API Path}, The ''{Field Name}'' of the element at the index ''%d'' of ''{Index}'' is null or empty.'
      A031226:
        code: A031226
        message: '{API Path}, The ''{Field Name}'' of the element at the index ''%d'' of ''{Index}'' contains non-ASCII letters.'
      A031227:
        code: A031227
        message: '{API Path}, The length of ''{Field Name}'' of the element at the index ''%d'' of ''{Index}'' must not exceed %d letters.'
      A031228:
        code: A031228
        message: '{API Path}, The ''{Field Name}'' of the element at the index ''{Index}'' of ''{Property Name}'' is null.'
      A031229:
        code: A031229
        message: '{API Path}, The scheme part of the ''{Field Name}'' of the element at the index ''{Index}'' of ''{Property Name}'' is not https.'
      A031230:
        code: A031230
        message: '{API Path}, The list of ''{Field Name}'' is too long.'
      A031231:
        code: A031231
        message: '{API Path}, The element at the index ''{Number}'' of ''{Key}'' is null or empty.'
      A031232:
        code: A031232
        message: '%s, The element at the index ''%d'' of ''%s'' does not match the allowed pattern.'
      A032201:
        code: A032201
        message: '{API Path}, The tag of the tagged-value at the index ''{Number}'' of ''{Key}'' is empty.'
      A032202:
        code: A032202
        message: '{API Path}, The value of the tagged-value at the index ''{Number}'' of ''{Key}'' is empty.'
      A032203:
        code: A032203
        message: '{API Path}, The tag of the tagged-value at the index ''{Number}'' of ''{Key}'' is a duplicate.'
      A032204:
        code: A032204
        message: '{API Path}, The value of the tagged-value at the index ''{Number}'' of ''{Key}'' is not a well-formed URI.'
      A032205:
        code: A032205
        message: '{API Path}, The length of the tag of the tagged-value at the index ''{Number}'' of ''{Key}'' exceeds the maximum length ({Number}).'
      A032206:
        code: A032206
        message: '{API Path}, The tag of the tagged-value at the index ''{Number}'' of ''{Key}'' contains non-ASCII letters.'
      A032207:
        code: A032207
        message: '{API Path}, The length of the value of the tagged-value at the index ''{Number}'' of ''{Key}'' exceeds the maximum length ({Number}).'
      A032208:
        code: A032208
        message: '{API Path}, The value of the tagged-value at the index ''{Number}'' of ''{Key}'' contains non-ASCII letters.'
      A032209:
        code: A032209
        message: '{API Path}, The request is empty.'
      A032210:
        code: A032210
        message: '{API Path}, The scheme of Sector Identifier URI must be ''https''.'
      A032211:
        code: A032211
        message: '{API Path}, idTokenEncryptionAlg is null although idTokenEncryptionEnc is not null.'
      A032212:
        code: A032212
        message: '{API Path}, userInfoEncryptionAlg is null although userInfoEncryptionEnc is not null.'
      A032213:
        code: A032213
        message: '{API Path}, requestEncryptionAlg is null although requestEncryptionEnc is not null.'
      A032214:
        code: A032214
        message: '{API Path}, authorizationEncryptionAlg is null although authorizationEncryptionEnc is not null.'
      A032215:
        code: A032215
        message: '{API Path}, bcNotificationEndpoint must not be null when bcDeliveryMode is PING or PUSH.'
      A032216:
        code: A032216
        message: '{API Path}, Must not have multiple certificate subject types.'
      A032217:
        code: A032217
        message: '{API Path}, When using TLS_CLIENT_AUTH, a certificate subject type must be set.'
      A032218:
        code: A032218
        message: '{API Path}, The client''s subject DN is not in the correct format.'
      A032219:
        code: A032219
        message: '{API Path}, The sector identifier URI did not resolve to a valid JSON document.'
      A032220:
        code: A032220
        message: '{API Path}, The sector identifier did not include one or more of the requested redirect URIs.'
      A032221:
        code: A032221
        message: '{API Path}, The ''pairwise'' subject type must be used with a ''sector_identifier_uri'' or a single host in ''redirect_uris''.'
      A032222:
        code: A032222
        message: '{API Path}, The size of ''attributes'' is too big.'
      A032223:
        code: A032223
        message: '{API Path}, The format of ''customMetadata'' is wrong.'
      A033101:
        code: A033101
        message: 'Failed to create a service of the service owner (API Key = {Service Owner''s API Key}).'
      A034001:
        code: A034001
        message: 'The service (API Key = {Service''s API Key}) was deleted successfully.'
      A034101:
        code: A034101
        message: 'Failed to delete the service (API Key = {Service''s API Key}).'
      A034201:
        code: A034201
        message: 'The service (API Key = {Service''s API Key}) does not exist.'
      A034202:
        code: A034202
        message: 'The service (API Key = {Service''s API Key}) does not belong to the service owner.'
      A034203:
        code: A034203
        message: 'The service (API Key = {Service''s API Key}) has already been deleted.'
      A034204:
        code: A034204
        message: 'The service (API Key = {Service''s API Key}) is locked.'
      A035201:
        code: A035201
        message: 'The service (API Key = {Service''s API Key}) does not exist.'
      A035202:
        code: A035202
        message: 'The service (API Key = {Service''s API Key}) does not belong to the service owner.'
      A035203:
        code: A035203
        message: 'The service (API Key = {Service''s API Key}) has been deleted.'
      A035204:
        code: A035204
        message: 'The service (API Key = {Service''s API Key}) is locked.'
      A036201:
        code: A036201
        message: Parameter 'start' failed to be parsed as int.
      A036202:
        code: A036202
        message: Parameter 'start' must not be negative.
      A036203:
        code: A036203
        message: Parameter 'end' failed to be parsed as int.
      A036204:
        code: A036204
        message: Parameter 'end' must not be negative.
      A037101:
        code: A037101
        message: 'Failed to update the service (API Key = {Service''s API Key}).'
      A037201:
        code: A037201
        message: 'The service (API Key = {Service''s API Key}) does not exist.'
      A037202:
        code: A037202
        message: 'The service (API Key = {Service''s API Key}) does not belong to the service owner.'
      A037203:
        code: A037203
        message: 'The service (API Key = {Service''s API Key}) has been deleted.'
      A037204:
        code: A037204
        message: 'The service (API Key = {Service''s API Key}) is locked.'
      A038201:
        code: A038201
        message: 'The service (API Key = {Service''s API Key}) does not exist.'
      A038202:
        code: A038202
        message: 'The service (API Key = {Service''s API Key}) has been deleted.'
      A038203:
        code: A038203
        message: 'The service (API Key = {Service''s API Key}) is locked.'
      A039201:
        code: A039201
        message: '{API Path}, The request is empty.'
      A039202:
        code: A039202
        message: '{API Path}, ''supportedResponseTypes'' must be specified.'
      A039203:
        code: A039203
        message: '{API Path}, The scope name of the element at the index ''{Number}'' of ''supportedScopes'' is a duplicate.'
      A039204:
        code: A039204
        message: '{API Path}, The scope name of the element at the index ''{Number}'' of ''supportedScopes'' is not specified.'
      A039205:
        code: A039205
        message: '{API Path}, The scope name of the element at the index ''{Number}'' of ''supportedScopes'' exceeds the maximum length ({Number}).'
      A039206:
        code: A039206
        message: '{API Path}, The scope name of the element at the index ''{Number}'' of ''supportedScopes'' contains a bad letter at the index ''{Number}''.'
      A039207:
        code: A039207
        message: '{API Path}, The scope description of the element at the index ''{Number}'' of ''supportedScopes'' exceeds the maximum length ({Number}).'
      A039208:
        code: A039208
        message: '{API Path}, The scope name (''{Scope Name}'') of the element at the index ''{Number}'' of ''supportedScopes'' is reserved.'
      A039209:
        code: A039209
        message: '{API Path}, The SNS of the element at the index ''{Number}'' of ''{Key}'' is a duplicate.'
      A039210:
        code: A039210
        message: '{API Path}, The SNS of the element at the index ''{Number}'' of ''{Key}'' is not supported.'
      A039211:
        code: A039211
        message: '{API Path}, The API key of the element at the index ''{Number}'' of ''{Key}'' is not specified.'
      A039212:
        code: A039212
        message: '{API Path}, The API key of the element at the index ''{Number}'' of ''{Key}'' exceeds the maximum length ({Number}).'
      A039213:
        code: A039213
        message: '{API Path}, The API key of the element at the index ''{Number}'' of ''{Key}'' contains a non-ASCII letter.'
      A039214:
        code: A039214
        message: '{API Path}, The API secret of the element at the index ''{Number}'' of ''{Key}'' exceeds the maximum length ({Number}).'
      A039215:
        code: A039215
        message: '{API Path}, The API secret of the element at the index ''{Number}'' of ''{Key}'' contains a non-ASCII letter.'
      A039216:
        code: A039216
        message: '{API Path}, descriptions[{Index}] of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is empty.'
      A039217:
        code: A039217
        message: '{API Path}, descriptions[{Index}].tag of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is empty.'
      A039218:
        code: A039218
        message: '{API Path}, The value ''{Value}'' of descriptions[{Index}].tag of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is a duplicate.'
      A039219:
        code: A039219
        message: '{API Path}, The length of descriptions[{Index}].tag of the scope ''{Scope Name}'' (supportedScopes[{Index}]) exceeds the maximum length ({Number}).'
      A039220:
        code: A039220
        message: '{API Path}, descriptions[{Index}].tag of the scope ''{Scope Name}'' (supportedScopes[{Index}]) contains a non-ASCII letter.'
      A039221:
        code: A039221
        message: '{API Path}, descriptions[{Index}].value of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is empty.'
      A039222:
        code: A039222
        message: '{API Path}, The length of descriptions[{Index}].value of the scope ''{Scope Name}'' (supportedScopes[{Index}]) exceeds the maximum length ({Number}).'
      A039223:
        code: A039223
        message: '{API Path}, attributes[{Index}] of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is empty.'
      A039224:
        code: A039224
        message: '{API Path}, attributes[{Index}].key of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is empty.'
      A039225:
        code: A039225
        message: '{API Path}, The length of attributes[{Index}].key of the scope ''{Scope Name}'' (supportedScopes[{Index}]) exceeds the maximum length ({Number}).'
      A039226:
        code: A039226
        message: '{API Path}, attributes[{Index}].key of the scope ''{Scope Name}'' (supportedScopes[{Index}]) contains a non-ASCII letter.'
      A039227:
        code: A039227
        message: '{API Path}, attributes[{Index}].value of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is empty.'
      A039228:
        code: A039228
        message: '{API Path}, The length of attributes[{Index}].value of the scope ''{Scope Name}'' (supportedScopes[{Index}]) exceeds the maximum length ({Number}).'
      A039229:
        code: A039229
        message: '{API Path}, The value ''{Value}'' of attributes[{Index}].key of the scope ''{Scope Name}'' (supportedScopes[{Index}]) is a duplicate.'
      A039230:
        code: A039230
        message: '{API Path}, The value ''{Value}'' (trustedRootCertificates[{Index}]) is not a valid X509 certificate in PEM format.'
      A039231:
        code: A039231
        message: '{API Path}, The size of ''attributes'' is too big.'
      A039232:
        code: A039232
        message: '{API Path}, The value ''{Value}'' (supportedCustomClientMetadata[%d]) is reserved.'
      A040001:
        code: A040001
        message: The authorization request was processed successfully.
      A041201:
        code: A041201
        message: The value of 'ticket' in the /api/auth/authorization/issue request is null or empty.
      A041202:
        code: A041202
        message: 'There is no entity having the ticket specified in the /api/auth/authorization/issue request (ticket = {Ticket}).'
      A041203:
        code: A041203
        message: The ticket in the /api/auth/authorization/issue request does not belong to the service.
      A041301:
        code: A041301
        message: The ticket in the /api/auth/authorization/issue request has expired.
      A042201:
        code: A042201
        message: The value of 'subject' in the /api/auth/authorization/issue request is null or empty.
      A042202:
        code: A042202
        message: 'The length of ''subject'' in the /api/auth/authorization/issue request exceeds the maximum length ({Number}).'
      A042203:
        code: A042203
        message: The 'subject' in the /api/auth/authorization/issue request contains non-ASCII letters.
      A043201:
        code: A043201
        message: 'The length of ''acr'' in the /api/auth/authorization/issue request exceeds the maximum length ({Number}).'
      A044201:
        code: A044201
        message: The value of 'claims' in the /api/auth/authorization/issue request failed to be parsed as a JSON object.
      A044202:
        code: A044202
        message: '''verified_claims'' in the ''claims'' request parameter is invalid: {Error Message}'
      A045101:
        code: A045101
        message: Failed to issue a code and/or token(s) from /api/auth/authorization/issue endpoint.
      A045102:
        code: A045102
        message: 'The hash algorithm ''{Algorithm}'' is not supported.'
      A045201:
        code: A045201
        message: The total size of 'properties' is too big.
      A045202:
        code: A045202
        message: 'Failed to generate a JWT-based access token: {Error Message}'
      A045203:
        code: A045203
        message: The total size of 'idtHeaderParams' is too big.
      A045301:
        code: A045301
        message: 'The client application (ID = {Client ID}) has been deleted, so ''{Claim Name}'' for the ID token cannot be calculated.'
      A045302:
        code: A045302
        message: 'The algorithm to sign ID tokens must not be ''none'' if the client application (ID = {Client ID}) wants to get ID tokens.'
      A045303:
        code: A045303
        message: 'The client application (ID = {Client ID}) has been deleted, so the ID token cannot be serialized.'
      A045304:
        code: A045304
        message: 'The ticket for token issuance was consumed by another transaction, so tokens are not issued.'
      A046101:
        code: A046101
        message: 'Failed to sign the ID token with the algorithm ''{Algorithm}''.'
      A046102:
        code: A046102
        message: 'The algorithm (''{Algorithm}'') to sign the ID token is not supported.'
      A046103:
        code: A046103
        message: 'Failed to put the JWK Set of the client application (ID = {Client ID}) into ''client_jwks'' table.'
      A046104:
        code: A046104
        message: 'The key type ''{Key Type}'' cannot have a public key.'
      A046105:
        code: A046105
        message: Failed to convert a JWK to a PublicKey.
      A046106:
        code: A046106
        message: 'The key type ''{Key Type}'' cannot have a private key.'
      A046107:
        code: A046107
        message: Failed to convert a JWK to a PrivateKey.
      A046108:
        code: A046108
        message: 'Failed to encrypt the ID token with alg=''{Algorithm}'' and enc=''{Algorithm}''.'
      A046109:
        code: A046109
        message: 'The algorithm (''{Algorithm}'') to encrypt the ID token is not supported.'
      A046110:
        code: A046110
        message: 'Failed to create an encrypter to encrypt the ID token due to the unexpected key length. (client_id={Client ID}, alg={Algorithm}, enc={Algorithm}, expected key length={Number})'
      A046111:
        code: A046111
        message: 'Failed to create an encrypter to encrypt the ID token. (client_id={Client ID}, alg={Algorithm}, enc={Algorithm})'
      A046112:
        code: A046112
        message: The JWK Set of the service is marked as hosted but not found in 'service_jwks' table.
      A046113:
        code: A046113
        message: 'The length of the secret key to sign the ID token with the algorithm (''{Algorithm}'') is shorter than the minimum 256-bit requirement.'
      A046114:
        code: A046114
        message: 'The elliptic curve of the private key is not supported: algorithm = {Algorithm}'
      A046115:
        code: A046115
        message: 'An error occurred while hardware-secured keys of the service ({Service API Key}) were checked.'
      A046201:
        code: A046201
        message: 'The ID token cannot be signed because this service has not registered its JWK Set although asymmetric algorithm (''{Algorithm}'') is required for signing.'
      A046202:
        code: A046202
        message: 'The ID token cannot be signed because this service has not registered its JWK Set although asymmetric algorithm (''{Algorithm}'') is required for signing.'
      A046203:
        code: A046203
        message: 'The registered JWK Set of this service does not contain the private key to sign the ID token. (alg={Algorithm}, kid={Key ID})'
      A046204:
        code: A046204
        message: 'The registered JWK Set of this service contains multiple candidate private keys to sign the ID token. (alg={Algorithm}, kid={Key ID})'
      A046301:
        code: A046301
        message: 'The algorithm to sign ID tokens must not be ''none'' if the client application (ID = {Client ID}) wants to get ID tokens.'
      A046302:
        code: A046302
        message: 'The algorithm (''{Algorithm}'' for ''id_token_encrypted_response_alg'') to encrypt the ID token is not supported.'
      A046303:
        code: A046303
        message: 'The ID token cannot be encrypted because the client application (ID = {Client ID}) has registered neither ''jwks_uri'' nor ''jwks''.'
      A046304:
        code: A046304
        message: 'Failed to fetch the JWK Set of the client application (ID = {Client ID}) from the location pointed to by ''jwks_uri'' ({URL}).'
      A046305:
        code: A046305
        message: 'Failed to parse the JWK Set of the client application (ID = {Client ID}) fetched from the location pointed to by ''jwks_uri'' ({URL}) as JWKSet.'
      A046306:
        code: A046306
        message: 'The client application (ID = {Client ID}) was not found in the database, unexpectedly.'
      A046307:
        code: A046307
        message: 'The client application (ID = {Client ID}) has not registered its JWK Set.'
      A046308:
        code: A046308
        message: 'The JWK Set of the client application (ID = {Client ID}) was not found in the database, unexpectedly.'
      A046309:
        code: A046309
        message: 'The registered JWK Set of the client application (ID = {Client ID}) does not contain the public key to encrypt the ID token. (alg={Algorithm}, kid={Key ID})'
      A046310:
        code: A046310
        message: 'The JWK Set of the client application (ID = {Client ID}) pointed to by ''jwks_uri'' ({URL}) does not contain the public key to encrypt the ID token. (alg={Algorithm}, kid={Key ID})'
      A046311:
        code: A046311
        message: 'The registered JWK Set of the client application (ID = {Client ID}) contains multiple candidate public keys to encrypt the ID token. (alg={Algorithm}, kid={Key ID})'
      A046312:
        code: A046312
        message: 'The JWK Set of the client application (ID = {Client ID}) pointed to by ''jwks_uri'' ({URL}) contains multiple candidate public keys to encrypt the ID token. (alg={Algorithm}, kid={Key ID})'
      A046313:
        code: A046313
        message: 'The algorithm to encrypt the ID token (''id_token_encrypted_response_alg'') is symmetric ({Algorithm}), but the client type of the client (ID = {Client ID}) is not ''confidential''.'
      A046314:
        code: A046314
        message: 'The algorithm (''{Algorithm}'' for ''userinfo_token_encrypted_response_alg'') to encrypt the ID token is not supported.'
      A047101:
        code: A047101
        message: 'The grant type ({Grant Type}) is not supported. Consult the administrator of this authorization server.'
      A047201:
        code: A047201
        message: The token request from the service does not contain 'parameters' parameter.
      A047202:
        code: A047202
        message: The format of the value of 'parameters' request parameter is wrong.
      A047301:
        code: A047301
        message: The token request does not contain any request parameters.
      A047302:
        code: A047302
        message: The grant type specified by the 'grant_type' request parameter is not included in the list of grant types that the client has declared it may use.
      A048101:
        code: A048101
        message: Failed to get the client information from the database.
      A048102:
        code: A048102
        message: Failed to get information about the authorization code.
      A048103:
        code: A048103
        message: Failed to get information about the refresh token.
      A048104:
        code: A048104
        message: Failed to get the client information by a client ID alias.
      A048301:
        code: A048301
        message: The token endpoint of this service requires 'client_id' parameter or Authorization header containing a client ID for Resource Owner Password Credentials flow.
      A048302:
        code: A048302
        message: The value of 'client_id' passed to the token endpoint is empty.
      A048303:
        code: A048303
        message: The token request contains multiple 'client_id' parameters.
      A048304:
        code: A048304
        message: 'No client has the client ID ({Client ID}).'
      A048305:
        code: A048305
        message: 'The client (ID = {Client ID}) does not belong to this service.'
      A048306:
        code: A048306
        message: 'The client (ID = {Client ID}) has been deleted.'
      A048307:
        code: A048307
        message: 'The client (ID = {Client ID}) is locked.'
      A048312:
        code: A048312
        message: The token request specifies the client ID by two different ways but the values are different.
      A048314:
        code: A048314
        message: Client Credentials flow requires 'client_id' request parameter or Authorization header that contains a client ID.
      A048315:
        code: A048315
        message: The token request does not contain 'code' parameter although 'grant_type' is 'authorization_code'.
      A048316:
        code: A048316
        message: The value of 'code' in the token request is empty.
      A048317:
        code: A048317
        message: The authorization code does not exist.
      A048318:
        code: A048318
        message: The token request does not contain 'refresh_token' parameter although 'grant_type' is 'refresh_token'.
      A048319:
        code: A048319
        message: The value of 'refresh_token' in the token request is empty.
      A048320:
        code: A048320
        message: The refresh token does not exist.
      A048321:
        code: A048321
        message: The client which the authorization code has been issued to does not exist any longer.
      A048322:
        code: A048322
        message: The client which the refresh token has been issued to does not exist any longer.
      A048323:
        code: A048323
        message: No client has the client ID (%s) or the client ID alias.
      A048324:
        code: A048324
        message: The client ID alias (%s) of the client is not enabled.
      A048329:
        code: A048329
        message: The client did not send an assertion.
      A048330:
        code: A048330
        message: The client sent multiple assertions.
      A048332:
        code: A048332
        message: The client's assertion was not properly formatted.
      A048346:
        code: A048346
        message: The client provided an invalid certificate for authentication.
      A048351:
        code: A048351
        message: The client did not provide a certificate to the token endpoint but is configured to use an MTLS-bound access token.
      A048352:
        code: A048352
        message: The client's subject DN is not in the correct format.
      A048353:
        code: A048353
        message: 'Couldn''t build a certificate path from the trusted root certificates, but one is required.'
      A048354:
        code: A048354
        message: Couldn't create a certificate validator.
      A048355:
        code: A048355
        message: The client's presented certificate did not validate against any of the trusted root certificates registered to the service.
      A048356:
        code: A048356
        message: 'The service requires validation of the certificate chain, but no trusted root certificates are configured.'
      A049301:
        code: A049301
        message: The token request does not contain 'grant_type' parameter.
      A049302:
        code: A049302
        message: The value of 'grant_type' in the token request is empty.
      A049303:
        code: A049303
        message: The token request contains multiple 'grant_type' parameters.
      A049304:
        code: A049304
        message: The value of 'grant_type' in the token request is invalid.
      A049305:
        code: A049305
        message: 'This service does not support the grant_type ''{Grant Type}''.'
      A049306:
        code: A049306
        message: The 'implicit' grant_type is invalid for the token endpoint.
      A050001:
        code: A050001
        message: The token request (grant_type=authorization_code) was processed successfully.
      A050101:
        code: A050101
        message: Failed to insert a new access token into the database.
      A050102:
        code: A050102
        message: The value of code_challenge_method extracted from the database is not supported.
      A050103:
        code: A050103
        message: Failed to get information about the authorization code.
      A050105:
        code: A050105
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A050201:
        code: A050201
        message: The total size of 'properties' is too big.
      A050202:
        code: A050202
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A050301:
        code: A050301
        message: The token request does not contain 'code' parameter although 'grant_type' is 'authorization_code'.
      A050302:
        code: A050302
        message: The value of 'code' in the token request is empty.
      A050303:
        code: A050303
        message: The token request contains multiple 'code' parameters.
      A050304:
        code: A050304
        message: The token request contains multiple 'redirect_uri' parameters.
      A050305:
        code: A050305
        message: No such authorization code.
      A050306:
        code: A050306
        message: The authorization code does not belong to this service.
      A050307:
        code: A050307
        message: The authorization code does not belong to the client.
      A050308:
        code: A050308
        message: 'The authorization code was created with a redirect URI specified explicitly, but the token request does not contain ''redirect_uri'' parameter.'
      A050309:
        code: A050309
        message: The redirect URI contained in the token request does not match the one which was specified when the authorization code was created.
      A050310:
        code: A050310
        message: The token request contains 'redirect_uri' although the authorization code was created without specifying any redirect URI explicitly.
      A050311:
        code: A050311
        message: The authorization code has already expired.
      A050312:
        code: A050312
        message: The token request does not contain 'code_verifier' although the authorization code was created with 'code_challenge'.
      A050313:
        code: A050313
        message: The value of 'code_verifier' in the token request is empty.
      A050314:
        code: A050314
        message: The token request contains multiple 'code_verifier' parameters.
      A050315:
        code: A050315
        message: The code challenge value computed with 'code_verifier' is different from 'code_challenge' contained in the authorization request.
      A050316:
        code: A050316
        message: The value of 'code_verifier' in the token request does not conform to the format defined in RFC 7636.
      A050317:
        code: A050317
        message: The token request contains 'code_verifier' although its corresponding authorization request did not contain 'code_challenge'.
      A051001:
        code: A051001
        message: 'Authlete has successfully issued a ticket to the service (API Key = {Service''s API Key}) for the token request from the client (ID = {Client ID}). [grant_type=password]'
      A051101:
        code: A051101
        message: Failed to insert a new record into the 'token_ticket' table.
      A051102:
        code: A051102
        message: Failed to get the list of registered scopes from 'scope' table.
      A051103:
        code: A051103
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A051301:
        code: A051301
        message: The token request does not contain 'username' parameter although 'grant_type' is 'password'.
      A051302:
        code: A051302
        message: The value of 'username' in the token request is empty.
      A051303:
        code: A051303
        message: The token request contains multiple 'username' parameters.
      A051304:
        code: A051304
        message: The token request does not contain 'password' parameter although 'grant_type' is 'password'.
      A051305:
        code: A051305
        message: The value of 'password' in the token request is empty.
      A051306:
        code: A051306
        message: The token request contains multiple 'password' parameters.
      A051307:
        code: A051307
        message: The token request contains multiple 'scope' parameters.
      A051308:
        code: A051308
        message: 'The token request has no ''scope'' parameter or none of the given scopes is recognized as valid, and the service''s default scope set is empty. The service''s configuration does not allow requests that request no scope.'
      A052001:
        code: A052001
        message: The token request (grant_type=client_credentials) was processed successfully.
      A052101:
        code: A052101
        message: Failed to get the list of registered scopes from 'scope' table.
      A052102:
        code: A052102
        message: Failed to insert a new access token into the database.
      A052103:
        code: A052103
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A052201:
        code: A052201
        message: The total size of 'properties' is too big.
      A052202:
        code: A052202
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A052301:
        code: A052301
        message: Public clients are not allowed to use 'grant_type=client_credentials'.
      A052302:
        code: A052302
        message: The token request contains multiple 'scope' parameters.
      A052303:
        code: A052303
        message: 'The token request has no ''scope'' parameter or none of the given scopes is recognized as valid, and the service''s default scope set is empty. The service''s configuration does not allow requests that request no scope.'
      A053001:
        code: A053001
        message: The token request (grant_type=refresh_token) was processed successfully.
      A053101:
        code: A053101
        message: Failed to update the access token entity in the database.
      A053102:
        code: A053102
        message: Failed to get information about the refresh token.
      A053104:
        code: A053104
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A053201:
        code: A053201
        message: The total size of 'properties' is too big.
      A053202:
        code: A053202
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A053301:
        code: A053301
        message: The token request does not contain 'refresh_token' parameter although 'grant_type' is 'refresh_token'.
      A053302:
        code: A053302
        message: The value of 'refresh_token' in the token request is empty.
      A053303:
        code: A053303
        message: The token request contains multiple 'refresh_token' parameters.
      A053304:
        code: A053304
        message: The token request contains multiple 'scope' parameters.
      A053305:
        code: A053305
        message: The refresh token passed to the token endpoint does not exist.
      A053306:
        code: A053306
        message: The refresh token does not belong to this service.
      A053307:
        code: A053307
        message: The refresh token does not belong to the client.
      A053308:
        code: A053308
        message: The refresh token has already expired.
      A053309:
        code: A053309
        message: The value of 'scope' in the token request contains a scope which is not covered by the old access token.
      A053310:
        code: A053310
        message: Failed to refresh the access token because the database record for the refresh token was not found.
      A053311:
        code: A053311
        message: The DPoP thumbprint for the refresh token did not match the thumbprint presented in the request.
      A053401:
        code: A053401
        message: 'The response from Authlete''s /api/auth/token endpoint (grant_type=refresh_token): %s'
      A054001:
        code: A054001
        message: The token request (grant_type=password) was processed successfully.
      A054101:
        code: A054101
        message: 'Failed to delete the consumed ticket ({Ticket}).'
      A055201:
        code: A055201
        message: The value of 'ticket' in the /api/auth/token/issue request is null or empty.
      A055202:
        code: A055202
        message: There is no entity having the ticket specified in the /api/auth/token/issue request.
      A055203:
        code: A055203
        message: The ticket in the /api/auth/token/issue request does not belong to the service.
      A055301:
        code: A055301
        message: The ticket in the /api/auth/token/issue request has expired.
      A056001:
        code: A056001
        message: The access token is valid.
      A057101:
        code: A057101
        message: Failed to get information about the access token from the database.
      A057301:
        code: A057301
        message: The request does not contain a valid access token.
      A057302:
        code: A057302
        message: The access token does not exist.
      A057303:
        code: A057303
        message: The access token does not belong to the service.
      A057304:
        code: A057304
        message: Failed to extract the value of the 'jti' claim from the access token.
      A057305:
        code: A057305
        message: The value of the 'jti' claim in the access token is null or empty.
      A057306:
        code: A057306
        message: 'When the format of an access token is JWT, it must be a JWS signed with an asymmetric algorithm without encryption.'
      A058101:
        code: A058101
        message: 'Failed to delete the consumed ticket ({Ticket}).'
      A059201:
        code: A059201
        message: The value of 'ticket' in the /api/auth/authorization/fail request is null or empty.
      A059202:
        code: A059202
        message: There is no entity having the ticket specified in the /api/auth/authorization/fail request.
      A059203:
        code: A059203
        message: The ticket in the /api/auth/authorization/fail request does not belong to the service.
      A059301:
        code: A059301
        message: The ticket in the /api/auth/authorization/fail request has expired.
      A060201:
        code: A060201
        message: The /api/auth/authorization/fail request does not contain 'reason' parameter.
      A060301:
        code: A060301
        message: 'The authorization request contains prompt=none, but no end-user has logged in this service.'
      A060302:
        code: A060302
        message: This service cannot handle 'max_age' parameter properly when the authorization request contains prompt=none.
      A060303:
        code: A060303
        message: 'The authorization request contains prompt=none, but the maximum authentication age has passed.'
      A060304:
        code: A060304
        message: 'The authorization request contains prompt=none and specifies ''sub'' claim, but the current end-user is different from the subject.'
      A060305:
        code: A060305
        message: 'The authorization request contains prompt=none and requests ''acr'' as essential, but the authentication performed for the end-user satisfies none of the requested ACRs.'
      A060306:
        code: A060306
        message: The end-user denied the authorization request.
      A060307:
        code: A060307
        message: The authorization request failed due to an unknown reason.
      A060308:
        code: A060308
        message: The authorization request failed due to a server error.
      A060309:
        code: A060309
        message: The authorization request failed because the end-user was not authenticated or did not exist.
      A060310:
        code: A060310
        message: The authorization server cannot obtain an account selection choice made by the end-user.
      A060311:
        code: A060311
        message: The authorization server cannot obtain consent from the end-user.
      A060312:
        code: A060312
        message: The authorization server needs interaction with the end-user.
      A060313:
        code: A060313
        message: The requested resource is invalid.
      A061101:
        code: A061101
        message: Failed to issue an access token from /api/auth/token/issue endpoint.
      A061102:
        code: A061102
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A061103:
        code: A061103
        message: Failed to get information about the client application.
      A061104:
        code: A061104
        message: Failed to get extension data of the client application.
      A061201:
        code: A061201
        message: The total size of 'properties' is too big.
      A061202:
        code: A061202
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A061301:
        code: A061301
        message: 'The ticket for token issuance was consumed by another transaction, so token are not issued.'
      A062101:
        code: A062101
        message: 'Failed to delete the consumed ticket ({Ticket}).'
      A063201:
        code: A063201
        message: The value of 'ticket' in the /api/auth/token/fail request is null or empty.
      A063202:
        code: A063202
        message: There is no entity having the ticket specified in the /api/auth/token/fail request.
      A063203:
        code: A063203
        message: The ticket in the /api/auth/token/fail request does not belong to the service.
      A063301:
        code: A063301
        message: The ticket in the /api/auth/token/fail request has expired.
      A064301:
        code: A064301
        message: No scopes are associated with the access token.
      A064302:
        code: A064302
        message: 'The access token does not cover the required scope ''{Scope Name}''.'
      A065101:
        code: A065101
        message: 'Failed to delete an access token entity (number = %d): %s'
      A065301:
        code: A065301
        message: The access token has expired but it can be refreshed using the corresponding refresh token.
      A065302:
        code: A065302
        message: Both the access token and the refresh token have expired.
      A065303:
        code: A065303
        message: The access token has expired.
      A065304:
        code: A065304
        message: The client failed to present a certificate and the access token is MTLS bound.
      A065305:
        code: A065305
        message: The client's certificate does not match the thumbprint of the access token.
      A065306:
        code: A065306
        message: Failed to calculate the thumbprint of the client certificate.
      A065307:
        code: A065307
        message: Failed to parse the client certificate because it is malformed.
      A065308:
        code: A065308
        message: Expected a DPoP header but none was provided.
      A065309:
        code: A065309
        message: Thumbprint of the provided DPoP key does not match the expected DPoP thumbprint.
      A065310:
        code: A065310
        message: 'There was an error processing the DPoP header: {Error}'
      A065311:
        code: A065311
        message: 'The DPoP signature algorithm ({Algorithm}) must not be symmetric or ''none''.'
      A065312:
        code: A065312
        message: The DPoP header did not include a public key in JWK format.
      A065313:
        code: A065313
        message: The DPoP signature algorithm is missing.
      A066301:
        code: A066301
        message: The access token is not associated with any subject.
      A066302:
        code: A066302
        message: The subject associated with the access token is different from the subject required to access the protected resource.
      A067201:
        code: A067201
        message: The /api/auth/token/fail request does not contain 'reason' parameter.
      A067301:
        code: A067301
        message: The credentials (username & password) passed to the token endpoint are invalid.
      A067302:
        code: A067302
        message: The token request failed due to an unknown reason.
      A067303:
        code: A067303
        message: The requested resource is invalid.
      A068101:
        code: A068101
        message: Failed to get the list of claims supported by the service.
      A069301:
        code: A069301
        message: The value of 'login_hint' in the request object is not a string.
      A069302:
        code: A069302
        message: The authorization request contains multiple 'login_hint' parameters.
      A077301:
        code: A077301
        message: '''prompt=none'' is not supported.'
      A077302:
        code: A077302
        message: 'The direct authorization endpoint is not enabled in this service (API Key = {API Key}).'
      A081101:
        code: A081101
        message: Failed to issue an access token from /api/auth/token/direct endpoint.
      A081102:
        code: A081102
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A081201:
        code: A081201
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A081301:
        code: A081301
        message: The credentials (username & password) passed to the token endpoint are invalid.
      A082201:
        code: A082201
        message: 'The authentication callback endpoint of the service ({Service''s API Key}) is not registered.'
      A082202:
        code: A082202
        message: 'The authentication callback failed (Service = {Service''s API Key}, Client = {Client ID}): {Error Message}'
      A082203:
        code: A082203
        message: '''subject'' in the response from the authentication callback endpoint of the service ({Service''s API Key}) is empty.'
      A082204:
        code: A082204
        message: 'The length ({Number}) of ''subject'' in the response from the authentication callback endpoint of the service ({Service''s API Key}) exceeds the maximum size ({Number}).'
      A082205:
        code: A082205
        message: '''subject'' in the response from the authentication callback endpoint of the service ({Service''s API Key}) contains non-ASCII letters.'
      A082206:
        code: A082206
        message: '''claims'' in the response from the authentication callback endpoint of the service ({Service''s API Key}) failed to be parsed as JSON.'
      A088101:
        code: A088101
        message: Failed to get information about the access token from the database.
      A088301:
        code: A088301
        message: The request does not contain a valid access token.
      A088302:
        code: A088302
        message: The access token does not exist.
      A088303:
        code: A088303
        message: The access token does not belong to the service.
      A088304:
        code: A088304
        message: Failed to extract the value of the 'jti' claim from the access token.
      A088305:
        code: A088305
        message: The value of the 'jti' claim in the access token is null or empty.
      A088306:
        code: A088306
        message: 'When the format of an access token is JWT, it must be a JWS signed with an asymmetric algorithm without encryption.'
      A088307:
        code: A088307
        message: The access token is invalid.
      A089301:
        code: A089301
        message: The access token has expired and does not have an associated refresh token.
      A089302:
        code: A089302
        message: Both the access token and the associated refresh token have expired.
      A089303:
        code: A089303
        message: 'The access token has expired, but it can be refreshed by using the associated refresh token.'
      A089304:
        code: A089304
        message: 'The userinfo endpoint requires ''openid'' scope, but the access token does not cover the scope.'
      A089305:
        code: A089305
        message: The userinfo endpoint requires an access token to be associated with a subject.
      A089306:
        code: A089306
        message: An access token issued through the grant type of 'Resource Owner Password Credentials' is not allowed to access the userinfo endpoint.
      A089307:
        code: A089307
        message: 'The access token is bound to a client certificate, but the userinfo request includes no client certificate.'
      A089308:
        code: A089308
        message: Failed to parse the client certificate because it is malformed.
      A089309:
        code: A089309
        message: Failed to calculate the thumbprint of the client certificate.
      A089310:
        code: A089310
        message: The thumbprint of the client certificate used in the userinfo request does not match the thumbprint of the client certificate to which the access token is bound.
      A089311:
        code: A089311
        message: Expected a DPoP header but none was provided.
      A089312:
        code: A089312
        message: Thumbprint of the provided DPoP key does not match the expected DPoP thumbprint.
      A089313:
        code: A089313
        message: 'There was an error processing the DPoP header: {Error}.'
      A089314:
        code: A089314
        message: 'The DPoP signature algorithm ({Algorithm}) must not be symmetric or ''none''.'
      A089315:
        code: A089315
        message: The DPoP header did not include a public key in JWK format.
      A089316:
        code: A089316
        message: The DPoP signature algorithm is missing.
      A090101:
        code: A090101
        message: Failed to get the list of claims supported by the service.
      A091001:
        code: A091001
        message: The access token presented at the userinfo endpoint is valid.
      A092101:
        code: A092101
        message: Failed to get information about the access token from the database.
      A092301:
        code: A092301
        message: The request does not contain a valid access token.
      A092302:
        code: A092302
        message: The access token does not exist.
      A092303:
        code: A092303
        message: The access token does not belong to the service.
      A092304:
        code: A092304
        message: Failed to extract the value of the 'jti' claim from the access token.
      A092305:
        code: A092305
        message: The value of the 'jti' claim in the access token is null or empty.
      A092306:
        code: A092306
        message: 'When the format of an access token is JWT, it must be a JWS signed with an asymmetric algorithm without encryption.'
      A092307:
        code: A092307
        message: The access token is invalid.
      A093301:
        code: A093301
        message: The access token has expired and does not have an associated refresh token.
      A093302:
        code: A093302
        message: Both the access token and the associated refresh token have expired.
      A093303:
        code: A093303
        message: 'The access token has expired, but it can be refreshed by using the associated refresh token.'
      A093304:
        code: A093304
        message: 'The userinfo endpoint requires ''openid'' scope, but the access token does not cover the scope.'
      A093305:
        code: A093305
        message: The userinfo endpoint requires an access token to be associated with a subject.
      A093306:
        code: A093306
        message: An access token issued through the grant type of 'Resource Owner Password Credentials' is not allowed to access the userinfo endpoint.
      A094201:
        code: A094201
        message: The value of 'claims' in the /api/auth/userinfo/issue request failed to be parsed as a JSON object.
      A094202:
        code: A094202
        message: '''verified_claims'' in the ''claims'' request parameter is invalid: {Error Message}'
      A095301:
        code: A095301
        message: 'The client application (ID = {Client ID}) has been deleted, so the user information cannot be serialized.'
      A096001:
        code: A096001
        message: User information was obtained successfully.
      A097101:
        code: A097101
        message: Failed to get information about the client from the database.
      A097301:
        code: A097301
        message: The client application associated with the presented access token does not exist any longer.
      A097302:
        code: A097302
        message: The client application associated with the presented access token has been deleted.
      A097303:
        code: A097303
        message: The client application associated with the presented access token is locked.
      A098101:
        code: A098101
        message: Failed to get information about the client from the database.
      A098301:
        code: A098301
        message: The client application associated with the presented access token does not exist any longer.
      A098302:
        code: A098302
        message: The client application associated with the presented access token has been deleted.
      A098303:
        code: A098303
        message: The client application associated with the presented access token is locked.
      A099001:
        code: A099001
        message: 'The developer authentication request was processed successfully. (authenticated={Boolean})'
      A099101:
        code: A099101
        message: Failed to get information about the service.
      A099201:
        code: A099201
        message: The service has already been deleted.
      A099202:
        code: A099202
        message: The service is locked.
      A101201:
        code: A101201
        message: 'The developer authentication callback endpoint of the service ({Service''s API Key}) is not registered.'
      A101202:
        code: A101202
        message: 'The developer authentication callback failed (Service = {Service''s API Key}): {Error Message}'
      A101203:
        code: A101203
        message: '''subject'' in the response from the developer authentication callback endpoint of the service ({Service''s API Key}) is empty.'
      A101204:
        code: A101204
        message: 'The length ({Number}) of ''subject'' in the response from the developer authentication callback endpoint of the service ({Service''s API Key}) exceeds the maximum size ({Number}).'
      A101205:
        code: A101205
        message: '''subject'' in the response from the developer authentication callback endpoint of the service ({Service''s API Key}) contains non-ASCII letters.'
      A101206:
        code: A101206
        message: 'The length ({Number}) of ''displayName'' in the response from the developer authentication callback endpoint of the service ({Service''s API Key}) exceeds the maximum size ({Number}).'
      A104201:
        code: A104201
        message: The 'grantType' parameter is empty.
      A104202:
        code: A104202
        message: REFRESH_TOKEN is not allowed as a value for the 'grantType' parameter.
      A104203:
        code: A104203
        message: 'The specified grant type ({Grant Type}) is not supported by this service ({Service''s API Key}).'
      A105201:
        code: A105201
        message: The 'subject' parameter is empty.
      A105202:
        code: A105202
        message: 'The length of ''subject'' in the /api/auth/token/create request exceeds the maximum length ({Number}).'
      A105203:
        code: A105203
        message: The 'subject' in the /api/auth/token/create request contains non-ASCII letters.
      A106101:
        code: A106101
        message: 'Failed to get supported custom scopes of the service ({Service''s API Key}) from the database.'
      A106102:
        code: A106102
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A106201:
        code: A106201
        message: 'Unsupported scope: {Scope Name}'
      A107101:
        code: A107101
        message: 'Failed to get information about the client (ID = {Client ID}).'
      A107102:
        code: A107102
        message: 'Failed to get extension data of the client (ID = {Client ID}).'
      A107201:
        code: A107201
        message: 'No client has the client ID ({Client ID}).'
      A107202:
        code: A107202
        message: 'The client identified by the client ID ({Client ID}) does not belong to the service.'
      A107203:
        code: A107203
        message: 'The client identified by the client ID ({Client ID}) is locked.'
      A108101:
        code: A108101
        message: Failed to insert a new access token into the database.
      A108201:
        code: A108201
        message: The total size of 'properties' is too big.
      A108202:
        code: A108202
        message: The 'refreshToken' parameter cannot be specified since the service does not support the refresh token flow.
      A108203:
        code: A108203
        message: The 'refreshToken' parameter cannot be specified when 'grant_type' is 'implicit'.
      A108204:
        code: A108204
        message: The 'refreshToken' parameter cannot be specified when 'grant_type' is 'client_credentials'.
      A108205:
        code: A108205
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A109001:
        code: A109001
        message: 'An access token was created successfully: {Grant Type}, client = {Client ID}'
      A110101:
        code: A110101
        message: 'Failed to get the JWK Set record of the service ({Service''s API Key}).'
      A110105:
        code: A110105
        message: Failed to get the list of hardware-secured keys of the service (%d).
      A110106:
        code: A110106
        message: 'Failed to convert an HskEntity (alg={Algorithm}, handle={Handle}) to a JWK: {Error Message}'
      A111201:
        code: A111201
        message: The value of 'subject' in the /api/auth/token/issue request is null or empty.
      A111202:
        code: A111202
        message: 'The length ({Number}) of ''subject'' in the /api/auth/token/issue request exceeds the maximum size ({Number}).'
      A111203:
        code: A111203
        message: '''subject'' in the /api/auth/token/issue request contains non-ASCII letters.'
      A113001:
        code: A113001
        message: The token has been revoked successfully.
      A113201:
        code: A113201
        message: The revocation request from the service does not contain 'parameters' parameter.
      A113202:
        code: A113202
        message: The format of the value of 'parameters' request parameter is wrong.
      A113301:
        code: A113301
        message: The revocation request does not contain any request parameters.
      A114101:
        code: A114101
        message: 'Failed to get the client information from the database (ID = {Client ID}).'
      A114102:
        code: A114102
        message: Failed to get the client information by a client ID alias.
      A114301:
        code: A114301
        message: The revocation endpoint of this service requires 'client_id' parameter.
      A114302:
        code: A114302
        message: The value of 'client_id' passed to the revocation endpoint is empty.
      A114303:
        code: A114303
        message: The revocation request contains multiple 'client_id' parameters.
      A114304:
        code: A114304
        message: 'No client has the client ID ({Client ID}).'
      A114305:
        code: A114305
        message: 'The client (ID = {Client ID}) does not belong to this service.'
      A114306:
        code: A114306
        message: 'The client (ID = {Client ID}) has been deleted.'
      A114307:
        code: A114307
        message: 'The client (ID = {Client ID}) is locked.'
      A114308:
        code: A114308
        message: The revocation request does not contain 'client_secret' although the client type is 'confidential'.
      A114309:
        code: A114309
        message: The value of 'client_secret' in the revocation request is empty.
      A114310:
        code: A114310
        message: The revocation request contains multiple 'client_secret' parameters.
      A114311:
        code: A114311
        message: The client credentials contained in the revocation request are invalid.
      A114312:
        code: A114312
        message: The revocation request specifies the client ID by two different ways but the values are different.
      A114313:
        code: A114313
        message: The revocation request specifies the client secret by two different ways but the values are different.
      A114314:
        code: A114314
        message: No client has the client ID (%s) or the client ID alias.
      A114315:
        code: A114315
        message: The client ID alias (%s) of the client is not enabled.
      A115301:
        code: A115301
        message: The revocation request does not contain 'token' parameter.
      A115302:
        code: A115302
        message: The value of 'token' in the revocation request is empty.
      A115303:
        code: A115303
        message: The revocation request contains multiple 'token' parameters.
      A116101:
        code: A116101
        message: Failed to look up an access token.
      A116102:
        code: A116102
        message: Failed to look up a refresh token.
      A116103:
        code: A116103
        message: Failed to revoke the token.
      A116104:
        code: A116104
        message: Failed to get information about the client application that is associated with the token.
      A116301:
        code: A116301
        message: 'The presented token has not been issued to the client application (ID = {Client ID}).'
      A116302:
        code: A116302
        message: The revocation request does not contain 'client_secret' although the client type of the client application that is associated with the token is 'confidential'.
      A116303:
        code: A116303
        message: The client application associated with the token does not belong to the service.
      A116304:
        code: A116304
        message: The client application associated with the token is locked.
      A117301:
        code: A117301
        message: 'The direct token endpoint is not enabled in this service ({Service''s API Key}).'
      A117302:
        code: A117302
        message: HTTP method for a token request must be POST.
      A118301:
        code: A118301
        message: 'The direct revocation endpoint is not enabled in this service ({Service''s API Key}).'
      A119301:
        code: A119301
        message: 'The direct jwks endpoint is not enabled in this service ({Service''s API Key}).'
      A120201:
        code: A120201
        message: 'The service owner (API Key = {Service Owner''s API Key}) does not exist.'
      A122601:
        code: A122601
        message: 'The service owner (API key = {Service Owner''s API Key}) cannot create a new service because the current number of services has reached the maximum number ({Number}) of the plan ({Plan Name}).'
      A123601:
        code: A123601
        message: 'Cannot create a new client because the current number of clients has reached the maximum number ({Number}) of clients per developer.'
      A123602:
        code: A123602
        message: 'Cannot create a new client because the current number of clients has reached the maximum number ({Number}) of the plan ({Plan Name}). Consult the manager of this service.'
      A123603:
        code: A123603
        message: Cannot create a new client because the client ID alias is already in use. Client ID aliases must be unique in the same service.
      A123604:
        code: A123604
        message: The size of 'customMetadata' is too big.
      A124301:
        code: A124301
        message: The authorization request does not contain 'code_challenge' parameter. See RFC 7636 for details.
      A124302:
        code: A124302
        message: The value of 'code_challenge' parameter in the authorization request is empty. See RFC 7636 for details.
      A124303:
        code: A124303
        message: The authorization request contains multiple 'code_challenge' parameters.
      A124304:
        code: A124304
        message: The value of 'code_challenge' does not comply with RFC 7636.
      A124305:
        code: A124305
        message: The authorization request contains multiple 'code_challenge_method' parameters.
      A124306:
        code: A124306
        message: The value of 'code_challenge_method' is not supported.
      A124307:
        code: A124307
        message: '''code_challenge_method=S256'' must be explicitly included in the request.'
      A124308:
        code: A124308
        message: The value of the 'code_challenge_method' request parameter must be 'S256'.
      A124309:
        code: A124309
        message: The value of the 'code_challenge' parameter in the request object is not a string.
      A124310:
        code: A124310
        message: The value of the 'code_challenge_method' parameter in the request object is not a string.
      A125101:
        code: A125101
        message: Failed to correct the configuration information of the service.
      A127001:
        code: A127001
        message: 'The client (ID = {Client ID}) does not have extension data and so does not have requestable scopes.'
      A127002:
        code: A127002
        message: 'Cleared requestable scopes of the client (ID = {Client ID}) successfully.'
      A127003:
        code: A127003
        message: 'Requestable scopes of the client (ID = {Client ID}) have already been cleared.'
      A127101:
        code: A127101
        message: 'Failed to clear requestable scopes of the client (ID = {Client ID}).'
      A128101:
        code: A128101
        message: 'Failed to update requestable scopes of the client (ID = {Client ID}).'
      A128201:
        code: A128201
        message: Failed to parse the request body as a JSON object.
      A128202:
        code: A128202
        message: The value of 'requestableScopes' in the request body is not an array.
      A128203:
        code: A128203
        message: The array of 'requestableScopes' contains a non-string element.
      A133101:
        code: A133101
        message: 'Failed to get the list of pre-defined scopes of the service ({Service''s API Key}) from the ''scope'' table.'
      A133102:
        code: A133102
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A134101:
        code: A134101
        message: Failed to get the information about the access token passed to the /api/auth/token/update API.
      A134102:
        code: A134102
        message: Failed to clear an access token cache.
      A134103:
        code: A134103
        message: Failed to clear a refresh token cache.
      A134104:
        code: A134104
        message: Failed to get the information about the service from the database.
      A134105:
        code: A134105
        message: Failed to get the information about the client from the database.
      A134106:
        code: A134106
        message: Failed to get the extension data of the client from the database.
      A134107:
        code: A134107
        message: 'The client associated with the access token no longer exists: ID = {Client ID}'
      A134109:
        code: A134109
        message: Failed to get the information about the supported scopes.
      A134110:
        code: A134110
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A134201:
        code: A134201
        message: The /api/auth/token/update API call must contain either the 'accessToken' or 'accessTokenHash' parameter.
      A134202:
        code: A134202
        message: The access token identified by the 'accessToken' request parameter does not exist.
      A134203:
        code: A134203
        message: The access token identified by the 'accessToken' request parameter does not belong to the service.
      A134204:
        code: A134204
        message: 'The service that the access token belongs to no longer exists: Service = {Service''s API Key}'
      A135001:
        code: A135001
        message: Updated the access token successfully.
      A135101:
        code: A135101
        message: Failed to update the database record of the access token.
      A136102:
        code: A136102
        message: Failed to get the list of clients from the database.
      A136201:
        code: A136201
        message: Parameter 'start' failed to be parsed as int.
      A136202:
        code: A136202
        message: Parameter 'start' must not be negative.
      A136203:
        code: A136203
        message: Parameter 'end' failed to be parsed as int.
      A136204:
        code: A136204
        message: Parameter 'end' must not be negative.
      A136205:
        code: A136205
        message: The input JSON to /api/client/authorization/client/get/list API is wrong.
      A136206:
        code: A136206
        message: The request parameter 'subject' must be specified.
      A137001:
        code: A137001
        message: 'Deleted {Number} access token(s) issued to the client (ID = {Client ID}) of the service (API Key = {Service''s API Key}).'
      A137102:
        code: A137102
        message: 'Failed to delete access tokens issued to the client (ID = {Client ID}).'
      A137201:
        code: A137201
        message: 'The input JSON to /api/client/authorization/client/delete/{clientId} API is wrong.'
      A137202:
        code: A137202
        message: The request parameter 'subject' must be specified.
      A138001:
        code: A138001
        message: 'Updated {Number} access token(s) issued to the client (ID = {Client ID}) of the service (API Key = {Service''s API Key}).'
      A138102:
        code: A138102
        message: 'Failed to update access tokens issued to the client (ID = {Client ID}).'
      A138201:
        code: A138201
        message: The request parameter 'subject' must be specified.
      A139001:
        code: A139001
        message: 'There is no information about scopes granted to the combination of the client (ID = {Client ID}) and the subject ({Subject}).'
      A139002:
        code: A139002
        message: 'Successfully obtained the information about scopes granted to the combination of the client (ID = {Client ID}) and the subject ({Subject}).'
      A139101:
        code: A139101
        message: 'Failed to get information about scopes granted to the combination of the client (ID = {Client ID}) and the subject ({Subject}).'
      A139201:
        code: A139201
        message: 'The input JSON to /api/client/granted_scopes/get/{clientId} API is wrong.'
      A139202:
        code: A139202
        message: The request parameter 'subject' must be specified.
      A140001:
        code: A140001
        message: 'There was no information about scopes granted to the combination of the client (ID = {Client ID}) and the subject ({Subject}).'
      A140002:
        code: A140002
        message: 'Successfully deleted the information about scopes granted to the combination of the client (ID = {Client ID}) and the subject ({Subject}).'
      A140101:
        code: A140101
        message: 'Failed to delete information about scopes granted to the combination of the client (ID = {Client ID}) and the subject ({Subject}).'
      A140201:
        code: A140201
        message: 'The input JSON to /api/client/granted_scopes/delete/{clientId} API is wrong.'
      A140202:
        code: A140202
        message: The request parameter 'subject' must be specified.
      A144101:
        code: A144101
        message: Failed to get the information about the access token associated with the value of the 'accessToken' parameter.
      A144102:
        code: A144102
        message: Failed to get the information about the access token associated with the value of the 'refreshToken' parameter.
      A144103:
        code: A144103
        message: Failed to insert a new access token into the database.
      A144201:
        code: A144201
        message: Cannot create an access token because the specified access token value is already in use.
      A144202:
        code: A144202
        message: Cannot create an access token because the specified refresh token value is already in use.
      A145001:
        code: A145001
        message: 'Introspection was performed successfully (type={{access_token|refresh_token|null}}, active={{true|false}}).'
      A145201:
        code: A145201
        message: The standard introspection request from the service does not contain 'parameters' parameter.
      A145202:
        code: A145202
        message: The format of the value of 'parameters' request parameter is wrong.
      A145301:
        code: A145301
        message: The standard introspection request does not contain any request parameters.
      A145302:
        code: A145302
        message: The 'token' request parameter is missing.
      A145401:
        code: A145401
        message: 'The response from /api/auth/introspection/standard: %s'
      A146101:
        code: A146101
        message: Failed to look up an access token.
      A146102:
        code: A146102
        message: Failed to look up a refresh token.
      A147301:
        code: A147301
        message: The direct introspection endpoint is not enabled.
      A148001:
        code: A148001
        message: 'Successfully refreshed the client secret of the client (ID = {Client ID}).'
      A148101:
        code: A148101
        message: 'Failed to refresh the client secret of the client (identifier = {Client Identifier}).'
      A148201:
        code: A148201
        message: 'No client has the client identifier ({Client Identifier}).'
      A149001:
        code: A149001
        message: 'Successfully updated the client secret of the client (ID = {Client ID}).'
      A149101:
        code: A149101
        message: 'Failed to update the client secret of the client (identifier = {Client Identifier}).'
      A149201:
        code: A149201
        message: 'No client has the client identifier ({Client Identifier}).'
      A149601:
        code: A149601
        message: 'The format of the value of the ''clientSecret'' request parameter is wrong: {Error Message}'
      A150101:
        code: A150101
        message: Failed to get the list of registered redirect URIs from 'redirect_uri' table.
      A150301:
        code: A150301
        message: A request object is required.
      A150302:
        code: A150302
        message: The request object passed by 'request' parameter is not signed.
      A150303:
        code: A150303
        message: 'The authorization request contains multiple ''{Parameter Name}'' parameters.'
      A150304:
        code: A150304
        message: 'The parameter ''{Parameter Name}'' exists in the request parameters but is not contained in the request object passed by ''request'' parameter.'
      A150305:
        code: A150305
        message: 'The parameter ''{Parameter Name}'' exists in both the request parameters and the request object passed by ''request'' parameter but their values are different.'
      A150306:
        code: A150306
        message: 'The value of the signing algorithm for the request object ({Algorithm}) is not allowed.'
      A150307:
        code: A150307
        message: '''redirect_uri'' parameter must be contained in the authorization request.'
      A150308:
        code: A150308
        message: The value of 'redirect_uri' in the request object is not a string.
      A150309:
        code: A150309
        message: The authorization request contains multiple 'redirect_uri' parameters.
      A150310:
        code: A150310
        message: The client has not registered any redirect URI.
      A150311:
        code: A150311
        message: 'The value of ''redirect_uri'' ({Redirect URI}) is not registered.'
      A150312:
        code: A150312
        message: 'The value of ''response_type'' ({Response Type}) is not allowed.'
      A150313:
        code: A150313
        message: The 'state' request parameter is not contained in the request.
      A150314:
        code: A150314
        message: The 'nonce' request parameter is not contained in the request.
      A150315:
        code: A150315
        message: The 'code_challenge' parameter is not contained in the request.
      A150316:
        code: A150316
        message: 'The value of ''code_challenge_method'' parameter ({Parameter Name}) is not allowed.'
      A150317:
        code: A150317
        message: The 'acr' claim is not contained in the request.
      A150318:
        code: A150318
        message: The value of the 'essential' of the 'acr' claim must be 'true'.
      A150319:
        code: A150319
        message: An 'exp' claim is required but not contained in the request object passed by 'request' parameter.
      A150320:
        code: A150320
        message: An 'exp' claim is contained in the request object passed by 'request' parameter but its value is not a number.
      A150321:
        code: A150321
        message: The time in the 'exp' claim in the request object passed by 'request' parameter is in the past.
      A150322:
        code: A150322
        message: 'The value of the signing algorithm ({Algorithm}) for the authorization response is not allowed.'
      A150323:
        code: A150323
        message: The scheme of the redirect URI must be 'https'.
      A150324:
        code: A150324
        message: The request object pointed to by 'request_uri' parameter is not signed.
      A150325:
        code: A150325
        message: 'The parameter ''{Parameter Name}'' exists in the request parameters but is not contained in the request object pointed to by ''request_uri'' parameter.'
      A150326:
        code: A150326
        message: 'The parameter ''{Parameter Name}'' exists in both the request parameters and the request object pointed to by ''request_uri'' parameter but their values are different.'
      A150327:
        code: A150327
        message: An 'exp' claim is required but not contained in the request object pointed to by 'request_uri'.
      A150328:
        code: A150328
        message: An 'exp' claim is contained in the request object pointed to by 'request_uri' parameter but its value is not a number.
      A150329:
        code: A150329
        message: The time in the 'exp' claim in the request object pointed to by 'request_uri' parameter is in the past.
      A150330:
        code: A150330
        message: 'The value of the signing algorithm for the request object pointed to by ''request_uri'' parameter ({Algorithm}) is not allowed.'
      A150331:
        code: A150331
        message: An 'aud' claim is required but not contained in the request object passed by 'request' parameter.
      A150332:
        code: A150332
        message: An 'aud' claim is required but not contained in the request object pointed to by 'request_uri' parameter.
      A150333:
        code: A150333
        message: The 'aud' claim in the request object passed by 'request' parameter is not a string or an array.
      A150334:
        code: A150334
        message: The 'aud' claim in the request object pointed to by 'request_uri' parameter is not a string or an array.
      A150335:
        code: A150335
        message: The value of the 'aud' claim in the request object passed by 'request' parameter does not match the issuer identifier of the OpenID provider.
      A150336:
        code: A150336
        message: The value of the 'aud' claim in the request object pointed to by 'request_uri' parameter does not match the issuer identifier of the OpenID provider.
      A150337:
        code: A150337
        message: The value of the 'aud' claim in the request object passed by 'request' parameter does not contain the issuer identifier of the OpenID provider.
      A150338:
        code: A150338
        message: The value of the 'aud' claim in the request object pointed to by 'request_uri' parameter does not contain the issuer identifier of the OpenID provider.
      A150339:
        code: A150339
        message: The value of 'redirect_uri' contained in the request is not well-formed.
      A150340:
        code: A150340
        message: The value of 'redirect_uri' contained in the request is not absolute.
      A150341:
        code: A150341
        message: The value of 'redirect_uri' contained in the request has a fragment component.
      A150342:
        code: A150342
        message: The value of 'response_mode' in the request object is not a string.
      A150343:
        code: A150343
        message: The authorization request contains multiple 'response_mode' parameters.
      A150344:
        code: A150344
        message: The value of 'response_mode' is not supported.
      A150351:
        code: A150351
        message: An 'nbf' claim is required but not contained in the request object passed by the 'request' parameter.
      A150352:
        code: A150352
        message: An 'nbf' claim is required but not contained in the request object pointed to by the 'request_uri' parameter.
      A150353:
        code: A150353
        message: An 'nbf' claim is contained in the request object passed by the 'request' parameter but its value is not a number.
      A150354:
        code: A150354
        message: An 'nbf' claim is contained in the request object pointed to by the 'request_uri' parameter but its value is not a number.
      A150355:
        code: A150355
        message: The value of the 'exp' claim in the request object passed by the 'request' parameter is a negative number.
      A150356:
        code: A150356
        message: The value of the 'exp' claim in the request object pointed to by the 'request_uri' parameter is a negative number.
      A150357:
        code: A150357
        message: The value of the 'nbf' claim in the request object passed by the 'request' parameter is a negative number.
      A150358:
        code: A150358
        message: The value of the 'nbf' claim in the request object pointed to by the 'request_uri' parameter is a negative number.
      A150359:
        code: A150359
        message: The lifetime of the request object passed by the 'request' parameter is negative. (exp - nbf < 0)
      A150360:
        code: A150360
        message: The lifetime of the request object pointed to by the 'request_uri' parameter is negative. (exp - nbf < 0)
      A150361:
        code: A150361
        message: The value of the 'exp' claim in the request object passed by the 'request' parameter indicates that the request object has expired.
      A150362:
        code: A150362
        message: The value of the 'exp' claim in the request object pointed to by the 'request_uri' parameter indicates that the request object has expired.
      A150363:
        code: A150363
        message: The value of the 'nbf' claim in the request object passed by the 'request' parameter indicates that the request object has not become valid yet.
      A150364:
        code: A150364
        message: The value of the 'nbf' claim in the request object pointed to by the 'request_uri' parameter indicates that the request object has not become valid yet.
      A150365:
        code: A150365
        message: 'The lifetime of the request object passed by the ''request'' parameter exceeds the allowed maximum value ({Maximum Lifetime} seconds).'
      A150366:
        code: A150366
        message: 'The lifetime of the request object pointed to by the ''request_uri'' parameter exceeds the allowed maximum value ({Maximum Lifetime} seconds).'
      A150367:
        code: A150367
        message: 'Clients with the client type ''{Client Type}'' are not allowed to make this kind of authorization requests.'
      A150378:
        code: A150378
        message: 'The encryption algorithm (''{Algorithm}'') of the request object passed by the ''request'' parameter is prohibited.'
      A150379:
        code: A150379
        message: 'The encryption algorithm (''{Algorithm}'') of the request object pointed to by the ''request_uri'' parameter is prohibited.'
      A150380:
        code: A150380
        message: 'The encryption algorithm for authorization responses (''{Algorithm}'' for ''authorization_encrypted_response_alg'') is prohibited.'
      A151301:
        code: A151301
        message: 'The algorithm (''{Algorithm}'' for ''id_token_signed_response_alg'') to sign the ID token is not allowed.'
      A151302:
        code: A151302
        message: 'The encryption algorithm for ID tokens (''{Algorithm}'' for ''id_token_encrypted_response_alg'') is prohibited.'
      A152301:
        code: A152301
        message: The client authentication method (%s) is not allowed.
      A152302:
        code: A152302
        message: The value of the signing algorithm used for the client's assertion (%s) is not allowed.
      A152303:
        code: A152303
        message: 'The length of the key to verify the signature of the client''s assertion is shorter than the minimum size ({Key Length}).'
      A152304:
        code: A152304
        message: 'The algorithm (''{Algorithm}'' for ''id_token_signed_response_alg'') to sign the ID token is not allowed.'
      A152305:
        code: A152305
        message: The service and the client are not configured so that the required Holder of Key methods are performed.
      A152306:
        code: A152306
        message: 'The encryption algorithm for ID tokens (''{Algorithm}'' for ''id_token_encrypted_response_alg'') is prohibited.'
      A153301:
        code: A153301
        message: 'The algorithm (''{Algorithm}'' for ''userinfo_signed_response_alg'') to sign the response is not allowed.'
      A153302:
        code: A153302
        message: 'The encryption algorithm for userinfo responses (''{Algorithm}'' for ''userinfo_encrypted_response_alg'') is prohibited.'
      A154101:
        code: A154101
        message: Failed to get the list of scope attributes from 'scope_attributes' table.
      A155301:
        code: A155301
        message: 'The backchannel token delivery mode of the client is ''{Delivery Mode}'', but the backchannel authentication request does not contain a client notification token.'
      A155302:
        code: A155302
        message: The length of a client notification token must not exceed 1024.
      A155303:
        code: A155303
        message: The format of the client notification token must conform to the syntax for bearer credentials as defined in Section 2.1 of RFC 6750.
      A156101:
        code: A156101
        message: 'Failed to get root certificates of the client application (ID = {Client ID}) from ''trusted_root_certificate'' table.'
      A156102:
        code: A156102
        message: 'Failed to fetch the JWK Set of the client application (ID = {Client ID}) from the location pointed to by ''jwks_uri'' ({URL}).'
      A156103:
        code: A156103
        message: 'Failed to put the JWK Set of the client application (ID = {Client ID}) into ''client_jwks'' table.'
      A156104:
        code: A156104
        message: 'The client application (ID = {Client ID}) was not found in the database, unexpectedly.'
      A156105:
        code: A156105
        message: 'The JWK Set of the client application (ID = {Client ID}) was not found in the database, unexpectedly.'
      A156106:
        code: A156106
        message: 'The key type ''{Key Type}'' cannot have a public key.'
      A156107:
        code: A156107
        message: Failed to convert a JWK to a PublicKey.
      A156301:
        code: A156301
        message: 'Client authentication failed because the client application (ID = {Client ID}) has registered neither ''jwks_uri'' nor ''jwks''.'
      A156302:
        code: A156302
        message: 'Failed to parse the JWK Set of the client application (ID = {Client ID}) fetched from the location pointed to by ''jwks_uri'' ({URL}) as JWKSet.'
      A156303:
        code: A156303
        message: 'The client application (ID = {Client ID}) has not registered its JWK Set.'
      A156304:
        code: A156304
        message: 'The registered JWK Set of the client application (ID = {Client ID}) does not contain the key for client authentication. (kid={Key ID})'
      A156305:
        code: A156305
        message: 'The JWK Set of the client application (ID = {Client ID}) pointed to by ''jwks_uri'' ({URL}) does not contain the key for client authentication. (kid={Key ID})'
      A156306:
        code: A156306
        message: 'The registered JWK Set of the client application (ID = {Client ID}) contains multiple candidate keys for client authentication. (kid={Key ID})'
      A156307:
        code: A156307
        message: 'The JWK Set of the client application (ID = {Client ID}) pointed to by ''jwks_uri'' ({URL}) contains multiple candidate keys for client authentication. (kid={Key ID})'
      A156308:
        code: A156308
        message: A key ID or an algorithm must be specified to look up a JWK for client assertion signature verification.
      A157101:
        code: A157101
        message: Failed to create a validator for certificate path.
      A157102:
        code: A157102
        message: Something went wrong during client certificate path validation.
      A157301:
        code: A157301
        message: The client type of the client is 'confidential' but the client authentication method is 'none'.
      A157302:
        code: A157302
        message: The client type of the client is 'public' but the client authentication method is not 'none'.
      A157303:
        code: A157303
        message: The request contains data for client authentication although the client type is 'public' and the client authentication method is 'none'.
      A157304:
        code: A157304
        message: 'The client authentication method is ''{Client Authentication Method}'' but the request does not include a client secret.'
      A157305:
        code: A157305
        message: The client secret presented by the client does not match the expected one.
      A157306:
        code: A157306
        message: 'The client authentication method is ''{Client Authentication Method}'' but the signature algorithm is not available.'
      A157307:
        code: A157307
        message: 'The client authentication method is ''client_secret_jwt'' but the configured signature algorithm is not symmetric (signature algorithm = {Signature Algorithm}).'
      A157308:
        code: A157308
        message: 'The client authentication method is ''private_key_jwt'' but the configured signature algorithm is not asymmetric (signature algorithm = {Signature Algorithm}).'
      A157309:
        code: A157309
        message: The request does not contain 'client_assertion_type' parameter.
      A157310:
        code: A157310
        message: 'The value of the client assertion type is not supported (assertion type = {Assertion Type}).'
      A157311:
        code: A157311
        message: The request does not contain 'client_assertion' parameter.
      A157312:
        code: A157312
        message: The client assertion is malformed.
      A157313:
        code: A157313
        message: 'The signature algorithm of the JWT for client authentication is invalid (signature algorithm = {Signature Algorithm}).'
      A157314:
        code: A157314
        message: The payload of the client assertion is malformed.
      A157315:
        code: A157315
        message: 'The value of the ''iss'' claim of the client assertion is invalid (iss = {"iss" Claim Value}, expected issuer = {Expected Issuer}).'
      A157316:
        code: A157316
        message: 'The value of the ''sub'' claim of the client assertion is invalid (sub = {"sub" Claim Value}, expected subject = {Expected Subject}).'
      A157317:
        code: A157317
        message: Valid values for the 'aud' claim must not be empty.
      A157318:
        code: A157318
        message: 'The ''aud'' claim of the client assertion is invalid (aud = {"aud" Claim Value}, valid audiences = {Valid Audiences}).'
      A157319:
        code: A157319
        message: The expiration time ('exp') of the client assertion is not found.
      A157320:
        code: A157320
        message: 'The expiration time (''exp'') of the client assertion is invalid (expiration time = {Expiration Time}).'
      A157321:
        code: A157321
        message: The not-before time ('nbf') of the client assertion is not found.
      A157322:
        code: A157322
        message: 'The not-before time (''nbf'') of the client assertion is invalid (not-before time = {Not-before Time}).'
      A157323:
        code: A157323
        message: 'The issue time (''iat'') of the client assertion points to the future (issue time = {Issue Time}).'
      A157324:
        code: A157324
        message: A JWT ID ('jti') is not found in the client assertion.
      A157325:
        code: A157325
        message: The JWK for client assertion signature verification is empty.
      A157326:
        code: A157326
        message: The signature of the JWT for client authentication is invalid.
      A157327:
        code: A157327
        message: The request does not contain a client certificate.
      A157328:
        code: A157328
        message: The client certificate is malformed.
      A157329:
        code: A157329
        message: The request does not contain a JWK which contains the registered self-signed certificate.
      A157330:
        code: A157330
        message: The JWK which contains the registered self-signed certificate does not have 'x5c' claim or the value of the claim is empty.
      A157331:
        code: A157331
        message: The DER expression of the client certificate that the client presented is not available.
      A157332:
        code: A157332
        message: The DER expression of the registered client certificate is not available.
      A157333:
        code: A157333
        message: The DER of the presented self-signed certificate and the DER of the registered self-signed certificate do not match.
      A157334:
        code: A157334
        message: The certificate presented by the client is not an X.509 certificate.
      A157335:
        code: A157335
        message: Trusted root certificates are not registered although validation of certificate chain is required.
      A157336:
        code: A157336
        message: A registered root certificate is malformed.
      A157337:
        code: A157337
        message: A registered root certificate is not an X.509 certificate.
      A157338:
        code: A157338
        message: Failed to generate a certificate path.
      A157339:
        code: A157339
        message: The client certificate path was invalid.
      A157340:
        code: A157340
        message: A subject DN or SAN of the client certificate is not registered.
      A157341:
        code: A157341
        message: The subject DN of the presented client certificate is malformed.
      A157342:
        code: A157342
        message: The subject DN of the registered client certificate is malformed.
      A157343:
        code: A157343
        message: 'The subject DN of the presented client certificate (''{Presented DN}'') and the registered subject DN (''{Registered DN}'') do not match.'
      A157344:
        code: A157344
        message: 'The client authentication method ''{Client Authentication Method}'' is not supported.'
      A157345:
        code: A157345
        message: 'The client has multiple certificate subject types registered, only one is allowed at a time.'
      A157346:
        code: A157346
        message: 'The subject alternative name DNS entry of the presented client certificate (''{Present SAN values}'') did not match the registered subject alternative name DNS entry of the client (''{Registered SAN value}'').'
      A157347:
        code: A157347
        message: 'The subject alternative name URI of the presented client certificate (''{Present SAN values}'') did not match the registered subject alternative name URI of the client (''{Registered SAN value}'').'
      A157348:
        code: A157348
        message: 'The subject alternative name IP address of the presented client certificate (''{Present SAN values}'') did not match the registered subject alternative name IP address of the client (''{Registered SAN value}'').'
      A157349:
        code: A157349
        message: 'The subject alternative name email address of the presented client certificate (''{Present SAN values}'') did not match the registered subject alternative name email address of the client (''{Registered SAN value}'').'
      A157350:
        code: A157350
        message: The subject alternative name entry of the presented client certificate is malformed.
      A157351:
        code: A157351
        message: The subject alternative name type field of the presented client certificate is malformed.
      A157352:
        code: A157352
        message: The subject alternative name of the presented client certificate is malformed.
      A158301:
        code: A158301
        message: The request contains multiple 'client_secret' parameters.
      A158302:
        code: A158302
        message: The request does not contain 'client_assertion_type' parameter.
      A158303:
        code: A158303
        message: The value of 'client_assertion_type' in the request is empty.
      A158304:
        code: A158304
        message: The request contains multiple 'client_assertion_type' parameters.
      A158305:
        code: A158305
        message: The request contains multiple 'client_assertion' parameters.
      A159102:
        code: A159102
        message: Failed to get the list of access tokens from the database.
      A159201:
        code: A159201
        message: Parameter 'start' failed to be parsed as int.
      A159202:
        code: A159202
        message: Parameter 'start' must not be negative.
      A159203:
        code: A159203
        message: Parameter 'end' failed to be parsed as int.
      A159204:
        code: A159204
        message: Parameter 'end' must not be negative.
      A159205:
        code: A159205
        message: The requested number of access tokens to be returned from this endpoint exceeds the maximum number (%d).
      A160001:
        code: A160001
        message: The JOSE is valid.
      A160101:
        code: A160101
        message: JWE is not supported.
      A160102:
        code: A160102
        message: 'Failed to create a signature verifier for the symmetric algorithm (''{Algorithm}'') specified in the JWS header.'
      A160103:
        code: A160103
        message: Failed to get the service's JWK Set.
      A160104:
        code: A160104
        message: The service's JWK Set is not found.
      A160105:
        code: A160105
        message: 'Failed to create a signature verifier for the RSA algorithm ({Algorithm}) from the JWK (kid = {Key ID}).'
      A160106:
        code: A160106
        message: 'Failed to create a signature verifier for the EC algorithm ({Algorithm}) from the JWK (kid = {Key ID}).'
      A160107:
        code: A160107
        message: 'Failed to create a signature verifier for the unsupported algorithm ({Algorithm}).'
      A160108:
        code: A160108
        message: Failed to get the client JWK Set.
      A160109:
        code: A160109
        message: The client's JWK Set is not found.
      A160110:
        code: A160110
        message: Failed to verify the signature.
      A160111:
        code: A160111
        message: 'Failed to create a signature verifier for the unsupported ED algorithm ({Algorithm}) from the JWK (kid = {Key ID}).'
      A160201:
        code: A160201
        message: The 'jose' request parameter is missing or empty.
      A160202:
        code: A160202
        message: Failed to parse the value of the 'jose' request parameter as JOSE.
      A160203:
        code: A160203
        message: The payload of the JOSE object couldn't be parsed as JSON although some claims were declared as mandatory.
      A160204:
        code: A160204
        message: 'The mandatory claim ''{Claim}'' is missing.'
      A160205:
        code: A160205
        message: 'The value of the claim ''{Claim}'' is not an integer.'
      A160206:
        code: A160206
        message: 'The expiration time of the JOSE has been reached: exp = {Expiration Time}, current time = {Current Time}, clock skew = {Clock Skew}'
      A160207:
        code: A160207
        message: 'The issue time exceeds the current time: iat = {Issued At}, current time = {Current Time}, clock skew = {Clock Skew}'
      A160208:
        code: A160208
        message: 'The current time has not reached the time before which the JOSE must be regarded as invalid: nbf = {Not Before}, current time = {Current Time}, clock skew = {Clock Skew}'
      A160209:
        code: A160209
        message: The JWS does not have a valid header.
      A160210:
        code: A160210
        message: The JWS header does not have a valid 'alg' parameter.
      A160211:
        code: A160211
        message: 'The ''alg'' value (''{Algorithm}'') in the JWS header is not supported.'
      A160212:
        code: A160212
        message: The unsecured JWS does not have a valid payload.
      A160213:
        code: A160213
        message: The JWS does not have a valid payload.
      A160214:
        code: A160214
        message: 'The value of the claim ''{Claim}'' is not a string.'
      A160215:
        code: A160215
        message: The identifier of the client application is necessary for verification but it is not available.
      A160216:
        code: A160216
        message: 'Failed to get information about the client application (identifier = ''{Client Identifier}'').'
      A160217:
        code: A160217
        message: Cannot verify the signature because the shared symmetric key based on the client secret cannot be computed.
      A160218:
        code: A160218
        message: The service's JWK Set has not been registered.
      A160219:
        code: A160219
        message: The signature of the JOSE object is invalid.
      A160220:
        code: A160220
        message: 'Cannot determine a JWK because there are multiple JWKs that match the conditions for signature verification. (alg = {Algorithm}, kid = {Key ID})'
      A160221:
        code: A160221
        message: 'Could not find any appropriate JWK for signature verification in the {client|service}''s JWK Set. (alg = {Algorithm}, kid = {Key ID})'
      A160301:
        code: A160301
        message: The client's JWK Set has not been registered.
      A161001:
        code: A161001
        message: The token was deleted successfully.
      A161101:
        code: A161101
        message: Failed to get the information about the token from the database.
      A161102:
        code: A161102
        message: Failed to delete the token.
      A161201:
        code: A161201
        message: No token identifier is specified.
      A161202:
        code: A161202
        message: The specified token does not exist.
      A161203:
        code: A161203
        message: The specified token does not belong to the service.
      A162101:
        code: A162101
        message: onFetchFailed() was called for a private key.
      A162102:
        code: A162102
        message: onParseFailed() was called for a private key.
      A162103:
        code: A162103
        message: onCacheFailed() was called for a private key.
      A162104:
        code: A162104
        message: onNoService() was called for a private key.
      A162105:
        code: A162105
        message: The JWK Set of the service is marked as hosted but not found in the database table.
      A162106:
        code: A162106
        message: onNoJwks() was called for a private key with hosted=false.
      A162107:
        code: A162107
        message: onNoKey() was called for a private key with hosted=false.
      A162108:
        code: A162108
        message: onMultipleKeys() was called for a private key with hosted=false.
      A162109:
        code: A162109
        message: Failed to convert a JWK to a PrivateKey.
      A162201:
        code: A162201
        message: Cannot get the service's private key because the service has not registered its JWK Set.
      A162202:
        code: A162202
        message: Cannot get the service's private key because the service has not registered its JWK Set. The current implementation does not refer to a JWK Set pointed to by 'jwks_uri' for private keys.
      A162203:
        code: A162203
        message: The registered JWK Set of this service does not contain the private key.
      A162204:
        code: A162204
        message: The registered JWK Set of this service contains multiple candidate private keys.
      A162205:
        code: A162205
        message: 'The key type (''{Key Type}'') cannot have a private key.'
      A163101:
        code: A163101
        message: 'Failed to fetch the JWK Set of the client application (ID = {Client ID}) from ''%s''.'
      A163102:
        code: A163102
        message: 'Failed to put the JWK Set of the client application (ID = {Client ID}) into the database table.'
      A163103:
        code: A163103
        message: 'The JWK Set of the client application (ID = {Client ID}) was not found in the database.'
      A163104:
        code: A163104
        message: Failed to convert a JWK to a PublicKey.
      A163301:
        code: A163301
        message: 'The client application (ID = {Client ID}) has registered neither ''jwks_uri'' nor ''jwks''.'
      A163302:
        code: A163302
        message: 'Failed to parse the JWK Set of the client application (ID = {Client ID}) which was fetched from ''{URI}''.'
      A163303:
        code: A163303
        message: 'The client application (ID = {Client ID}) was not found in the database.'
      A163304:
        code: A163304
        message: 'The client application (ID = {Client ID}) has not registered its JWK Set.'
      A163305:
        code: A163305
        message: 'The registered JWK Set of the client application (ID = {Client ID}) does not contain the public key.'
      A163306:
        code: A163306
        message: 'The JWK Set of the client application (ID = {Client ID}) pointed to by ''jwks_uri'' ({URI}) does not contain the public key.'
      A163307:
        code: A163307
        message: 'The registered JWK Set of the client application (ID = {Client ID}) contains multiple candidate public keys.'
      A163308:
        code: A163308
        message: 'The JWK Set of the client application (ID = {Client ID}) pointed to by ''jwks_uri'' ({URI}) contains multiple candidate public keys.'
      A163309:
        code: A163309
        message: 'The key type (''{Key Type}'') cannot have a public key.'
      A164101:
        code: A164101
        message: 'Failed to sign the JWS with the algorithm (''{Signature Algorithm}'').'
      A164102:
        code: A164102
        message: 'Cannot sign the JWS because the algorithm (''{Signature Algorithm}'') is not supported.'
      A164103:
        code: A164103
        message: 'Failed to create a JWS signer for the algorithm (''{Signature Algorithm}'').'
      A164104:
        code: A164104
        message: 'Failed to encrypt the JWE with the algorithm (''{Encryption Algorithm}'') and the method (''{Encryption Method}'').'
      A164105:
        code: A164105
        message: 'Cannot encrypt the JWE because the algorithm (''{Encryption Algorithm}'') is not supported.'
      A164106:
        code: A164106
        message: 'Failed to create a JWE encrypter for the algorithm (''{Encryption Algorithm}'').'
      A164107:
        code: A164107
        message: 'Failed to generate a JOSE (JWS alg = {Signature Algorithm}, JWE alg = {Encryption Algorithm}, JWE enc = {Encryption Method}).'
      A164201:
        code: A164201
        message: 'The key of the algorithm (''{Signature Algorithm}'') to sign the JWS with is not available.'
      A164301:
        code: A164301
        message: 'The key of the algorithm (''{Encryption Algorithm}'') to encrypt the JWE with is not available.'
      A165101:
        code: A165101
        message: 'Failed to get information about the client application (ID = {Client ID}).'
      A165301:
        code: A165301
        message: 'There is no client application that has the client ID (''{Client ID}'').'
      A166201:
        code: A166201
        message: The API call does not contain the 'parameters' request parameter.
      A166202:
        code: A166202
        message: The format of the 'parameters' request parameter passed to this API does not conform to application/x-www-form-urlencoded.
      A166301:
        code: A166301
        message: The request does not contain any request parameters.
      A166302:
        code: A166302
        message: The request parameter '%s' is missing.
      A166303:
        code: A166303
        message: The value of the request parameter '%s' is empty.
      A166304:
        code: A166304
        message: The request parameter '%s' is included in the request more than once.
      A166305:
        code: A166305
        message: The grant type '%s' is not supported by this service.
      A166306:
        code: A166306
        message: The client does not declare that it will use the grant type '%s'.
      A167101:
        code: A167101
        message: 'Failed to get the JWK Set of the client application (ID = {Client ID}).'
      A167102:
        code: A167102
        message: 'The JWK Set of the client application is not found (ID = {Client ID}).'
      A167103:
        code: A167103
        message: 'Failed to create a signature verifier from a JWK whose algorithm is ''{Signature Algorithm}'' and key ID is ''{Key ID}''.'
      A167104:
        code: A167104
        message: 'Cannot create a signature verifier for the algorithm (''{Signature Algorithm}'').'
      A167301:
        code: A167301
        message: 'When a backchannel authentication request contains the ''request'' request parameter, other CIBA request parameters such as ''{Request Parameter}'' must not be present outside the JWT.'
      A167302:
        code: A167302
        message: The value of the 'request' request parameter contained in the backchannel authentication request failed to be parsed as JOSE.
      A167303:
        code: A167303
        message: A request object included in a backchannel authentication request must be signed.
      A167304:
        code: A167304
        message: A request object included in a backchannel authentication request must not be encrypted.
      A167305:
        code: A167305
        message: The payload of the request object included in the backchannel authentication request failed to be parsed as JSON.
      A167306:
        code: A167306
        message: The request object included in the backchannel authentication request does not contain the 'iss' claim or its value is empty.
      A167307:
        code: A167307
        message: Failed to find a client application whose ID matches the value of the 'iss' claim in the request object included in the backchannel authentication request.
      A167308:
        code: A167308
        message: The signature algorithm of a request object included in a backchannel authentication request must be asymmetric.
      A167309:
        code: A167309
        message: Use of the 'request' request parameter is not allowed because the 'backchannel_authentication_request_signing_alg' metadata of the client is not set.
      A167310:
        code: A167310
        message: 'The signature algorithm (''{Signature Algorithm}'') of the request object included in the backchannel authentication request is different from the value (''{Signature Algorithm}'') of the ''backchannel_authentication_request_signing_alg'' metadata of the client.'
      A167311:
        code: A167311
        message: Cannot verify the signature of the request object included in the backchannel authentication request because the client application has not registered its JWK Set.
      A167312:
        code: A167312
        message: 'Cannot find any appropriate JWK to verify the signature of the request object included in the backchannel authentication request with. (alg = ''{Signature Algorithm}'', kid = ''{Key ID}'')'
      A167313:
        code: A167313
        message: 'Cannot determine a JWK to verify the signature of the request object included in the backchannel authentication request with because there exist multiple JWKs that satisfy the conditions. (alg = ''{Signature Algorithm}'', kid = ''{Key ID}'')'
      A167314:
        code: A167314
        message: The signature of the request object included in the backchannel authentication request is invalid.
      A167315:
        code: A167315
        message: 'The request object included in the backchannel authentication request does not contain the ''{Claim Name}'' claim.'
      A167316:
        code: A167316
        message: 'The value of the ''{Claim Name}'' claim in the request object included in the backchannel authentication request is null.'
      A167317:
        code: A167317
        message: 'The value of the ''{Claim Name}'' claim in the request object included in the backchannel authentication request failed to be parsed as an integer.'
      A167318:
        code: A167318
        message: The request object included in the backchannel authentication request has expired.
      A167319:
        code: A167319
        message: The 'iat' claim in the request object included in the backchannel authentication request claims that the JWT has issued in the future.
      A167320:
        code: A167320
        message: The 'nbf' claim in the request object included in the backchannel authentication request indicates that the JWT has not become valid yet.
      A167321:
        code: A167321
        message: The value of the 'aud' claim in a request object in a backchannel authentication request must match the issuer identifier of the OpenID provider.
      A167322:
        code: A167322
        message: 'Request parameters related to client authentication such as ''{Request Parameter}'' must be outside the JWT specified by the ''request'' request parameter.'
      A167323:
        code: A167323
        message: 'The value of the ''{Claim Name}'' claim in the request object included in the backchannel authentication request failed to be parsed as a string.'
      A167324:
        code: A167324
        message: The value of the 'aud' claim in a request object in a backchannel authentication request must contain the issuer identifier of the OpenID provider.
      A167325:
        code: A167325
        message: The signature of the request object included in the backchannel authentication request couldn't be verified.
      A167326:
        code: A167326
        message: The type of the 'request_context' claim in the request object included in the backchannel authentication request is not a JSON object.
      A168301:
        code: A168301
        message: Failed to parse the 'client_assertion' request parameter as JWS.
      A168302:
        code: A168302
        message: Failed to extract the value of the 'iss' claim from the 'client_assertion'.
      A168303:
        code: A168303
        message: The client ID used in the Authorization header does not match the value of the 'client_id' request parameter.
      A168304:
        code: A168304
        message: The 'iss' claim in the 'request' does not match the value of the 'client_id' request parameter.
      A168305:
        code: A168305
        message: The 'iss' claim in the 'client_assertion' does not match the value of the 'client_id' request parameter.
      A168306:
        code: A168306
        message: The client ID used in the Authorization header does not match the 'iss' claim in the 'request'.
      A168307:
        code: A168307
        message: The client ID used in the Authorization header does not match the 'iss' claim in the 'client_assertion'.
      A168308:
        code: A168308
        message: The 'iss' claim in the 'request' does not match the 'iss' claim in the 'client_assertion'.
      A168309:
        code: A168309
        message: The backchannel authentication request does not include any clue to identify the client application with. Adding the 'client_id' request parameter may solve this problem.
      A168310:
        code: A168310
        message: Information about the client application having the client ID '%s' was not found.
      A168311:
        code: A168311
        message: Public clients are not allowed to use the CIBA flow.
      A169301:
        code: A169301
        message: The backchannel token delivery mode of the client application is not set.
      A169302:
        code: A169302
        message: 'The backchannel token delivery mode (''{Delivery Mode}'') of the client is not supported by the server.'
      A170101:
        code: A170101
        message: IdP initialization must include an 'issuer'.
      A170102:
        code: A170102
        message: Unable to generate a keypair.
      A171101:
        code: A171101
        message: A 'clientId' must be supplied when creating a service access token.
      A171102:
        code: A171102
        message: 'The ''clientId'' was malformed (''{Client ID}'').'
      A171103:
        code: A171103
        message: 'The client does not exist (''{Client ID}'').'
      A171104:
        code: A171104
        message: 'The service owner for the IdP service could not be found (''{Service owner number}'').'
      A171105:
        code: A171105
        message: There must be an internal service set up for the IdP but none was configured.
      A171106:
        code: A171106
        message: 'The internal IdP service cannot be found (''{Service number}'').'
      A172101:
        code: A172101
        message: The API access token was either missing or did not contain the correct information.
      A172102:
        code: A172102
        message: The request must contain an 'email' address for the service owner.
      A173101:
        code: A173101
        message: Failed to get the list of supported ACR values from the database.
      A173102:
        code: A173102
        message: Failed to get information about default ACR values from the database.
      A173301:
        code: A173301
        message: 'The ACR value ''{ACR Value}'' required by the backchannel authentication request is ignored because it is not registered as a supported ACR value.'
      A173401:
        code: A173401
        message: 'Because the ''acr_values'' parameter was omitted, the default set of ACR values is implicitly used: {Default ACR Values}'
      A174301:
        code: A174301
        message: The backchannel authentication request does not contain any hint.
      A174302:
        code: A174302
        message: The backchannel authentication request contains multiple hints.
      A175301:
        code: A175301
        message: The value of the 'id_token_hint' request parameter contained in the backchannel authentication request failed to be parsed as JOSE.
      A175302:
        code: A175302
        message: The value of the 'id_token_hint' request parameter contained in the backchannel authentication request is not signed.
      A175303:
        code: A175303
        message: Encrypted ID tokens are not allowed to be used as 'id_token_hint'.
      A175304:
        code: A175304
        message: The payload of the 'id_token_hint' failed to be parsed as JSON.
      A175305:
        code: A175305
        message: The payload of the 'id_token_hint' does not contain the 'iss' claim.
      A175306:
        code: A175306
        message: The value of the 'iss' claim in the 'id_token_hint' is different from the issuer identifier of this server.
      A175307:
        code: A175307
        message: The payload of the 'id_token_hint' does not contain the 'aud' claim.
      A175308:
        code: A175308
        message: The 'aud' claim in the 'id_token_hint' does not contain the client ID.
      A175309:
        code: A175309
        message: The value of the 'aud' claim in the 'id_token_hint' does not match the client ID.
      A175310:
        code: A175310
        message: The payload of the 'id_token_hint' does not contain the 'sub' claim.
      A176101:
        code: A176101
        message: Failed to get custom scope records from the database.
      A176102:
        code: A176102
        message: Failed to get the client extension data from the database.
      A176103:
        code: A176103
        message: 'Could not find the client extension data of the client. (extension number = {Extension Number})'
      A176104:
        code: A176104
        message: Failed to get scope attributes from the database.
      A176105:
        code: A176105
        message: 'The mandatory scope ''{Scope Name}'' is not supported by the server.'
      A176301:
        code: A176301
        message: The backchannel authentication request does not contain the 'scope' request parameter or its value is empty.
      A176302:
        code: A176302
        message: 'The client application is not allowed to request the ''{Scope Name}'' scope, so the scope is ignored.'
      A176303:
        code: A176303
        message: 'The ''{Scope Name}'' scope is not supported by the server, so the scope is ignored.'
      A176304:
        code: A176304
        message: 'The backchannel authentication request does not include the mandatory scope ''{Scope Name}''.'
      A176305:
        code: A176305
        message: 'The client application is not allowed to request the mandatory scope ''{Scope Name}''.'
      A176306:
        code: A176306
        message: 'The ''{Claim Name}'' claim is being requested by the ''{Scope Name}'' scope but won''t be processed because the claim is not supported by the server.'
      A176307:
        code: A176307
        message: The value of the 'scope' request parameter is too long.
      A176401:
        code: A176401
        message: 'Because the ''scope'' parameter was omitted, the default scope set is implicitly used: {Default Scopes}'
      A177301:
        code: A177301
        message: The backchannel authentication request does not include a user code.
      A178101:
        code: A178101
        message: Failed to insert a new record into the 'bc_auth' table.
      A179001:
        code: A179001
        message: The backchannel authentication request was processed successfully.
      A180101:
        code: A180101
        message: Failed to compute the thumbprint of the client certificate used in the backchannel authentication request.
      A180301:
        code: A180301
        message: The backchannel authentication request does not include a client certificate although certificate binding is enabled and the token delivery mode is 'push'.
      A180302:
        code: A180302
        message: The client certificate used in the backchannel authentication request failed to be parsed as a certificate.
      A181201:
        code: A181201
        message: The ticket does not exist.
      A181202:
        code: A181202
        message: The ticket does not belong to this service.
      A181203:
        code: A181203
        message: The ticket has already expired.
      A181204:
        code: A181204
        message: The ticket has already been consumed by /api/backchannel/authentication/complete API.
      A181205:
        code: A181205
        message: The ticket has already been used to issue an auth_req_id by the previous API call.
      A182101:
        code: A182101
        message: Failed to issue an 'auth_req_id' due to a database error.
      A182201:
        code: A182201
        message: The request to /api/backchannel/authentication/issue API does not contain the 'ticket' request parameter or its value is empty.
      A182401:
        code: A182401
        message: Failed to delete an expired record from the 'bc_auth' table.
      A182402:
        code: A182402
        message: Deleting the expired record from the 'bc_auth' table.
      A183001:
        code: A183001
        message: An auth_req_id was issued successfully.
      A185001:
        code: A185001
        message: Successfully generated an error response for the backchannel authentication request.
      A186101:
        code: A186101
        message: Failed to get the record for the ticket from the database.
      A186201:
        code: A186201
        message: The 'ticket' request parameter is missing or its value is empty.
      A186202:
        code: A186202
        message: No record that holds the ticket.
      A186203:
        code: A186203
        message: The ticket does not belong to the service.
      A187201:
        code: A187201
        message: The mandatory request parameter 'result' is missing.
      A188201:
        code: A188201
        message: The 'subject' request parameter is missing or its value is empty.
      A188202:
        code: A188202
        message: 'The length of the ''subject'' request parameter exceeds the maximum length ({Number}).'
      A188203:
        code: A188203
        message: The value of the 'subject' request parameter contains non-ASCII letters.
      A189201:
        code: A189201
        message: 'The length of the ''sub'' request parameter exceeds the maximum length ({Number}).'
      A189202:
        code: A189202
        message: The value of the 'sub' request parameter contains non-ASCII letters.
      A190201:
        code: A190201
        message: The value of the 'claims' request parameter failed to be parsed as JSON.
      A190202:
        code: A190202
        message: The size of the 'claims' is too big.
      A191201:
        code: A191201
        message: The size of the 'properties' is too big.
      A192101:
        code: A192101
        message: Failed to get custom scope records from the database.
      A192102:
        code: A192102
        message: Failed to get the client extension data from the database.
      A192103:
        code: A192103
        message: 'Could not find the client extension data of the client. (extension number = {Number})'
      A192104:
        code: A192104
        message: Failed to get scope attributes from the database.
      A192105:
        code: A192105
        message: Failed to get information about the client application from the database.
      A192301:
        code: A192301
        message: The list of requested scopes is too long.
      A193201:
        code: A193201
        message: The value of the 'errorDescription' request parameter is too long.
      A193202:
        code: A193202
        message: The value of the 'errorUri' request parameter is too long.
      A193203:
        code: A193203
        message: The value of the 'errorUri' request parameter contains non-ASCII letters.
      A194201:
        code: A194201
        message: 'The length of the ''acr'' request parameter exceeds the maximum length ({Number}).'
      A194202:
        code: A194202
        message: The value of the 'acr' request parameter contains non-ASCII letters.
      A195201:
        code: A195201
        message: The value of the 'authTime' request parameter must not be negative.
      A196101:
        code: A196101
        message: 'Failed to generate an ID token: {Error Message}'
      A196201:
        code: A196201
        message: The ticket is not found.
      A196202:
        code: A196202
        message: The ticket has already expired.
      A196203:
        code: A196203
        message: The ticket has already been consumed by the previous API call.
      A196204:
        code: A196204
        message: No auth_req_id has been issued for the ticket. Call /api/backchannel/authentication/issue API with the ticket in advance before calling this API.
      A196205:
        code: A196205
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A197101:
        code: A197101
        message: 'Failed to generate an ID token: {Error Message}'
      A197102:
        code: A197102
        message: Failed to update the database record.
      A197301:
        code: A197301
        message: The algorithm for signing ID tokens must not be 'none'.
      A197401:
        code: A197401
        message: Failed to delete an expired record from the 'bc_auth' table.
      A197402:
        code: A197402
        message: Deleting the expired record from the 'bc_auth' table.
      A197403:
        code: A197403
        message: Deleting the record from the 'bc_auth' table because it is no longer needed.
      A198001:
        code: A198001
        message: 'Successfully updated the database so that the token endpoint can generate tokens (mode = {Delivery Mode}, result = {Result}).'
      A198002:
        code: A198002
        message: 'Successfully updated the database so that the token endpoint can generate an error response (mode = {Delivery Mode}, result = {Result}).'
      A198003:
        code: A198003
        message: 'Successfully generated tokens that are to be delivered to the client notification endpoint (mode = {Delivery Mode}, result = {Result}).'
      A198004:
        code: A198004
        message: 'Successfully prepared an error content that is to be reported to the client notification endpoint (mode = {Delivery Mode}, result = {Result}).'
      A199101:
        code: A199101
        message: Failed to get information about the client from the database.
      A199301:
        code: A199301
        message: The client that has made the backchannel authentication request does not exist any longer.
      A200001:
        code: A200001
        message: 'Generated an error response corresponding to the result ({Result}) given to the /api/backchannel/authentication/complete API.'
      A200002:
        code: A200002
        message: 'The token request (grant_type=urn:openid:params:grant-type:ciba) was processed successfully.'
      A200101:
        code: A200101
        message: Failed to get the record holding the auth_req_id from the database.
      A200102:
        code: A200102
        message: Failed to generate an ID token.
      A200103:
        code: A200103
        message: Failed to insert a new access token into the database.
      A200201:
        code: A200201
        message: The total size of 'properties' is too big.
      A200202:
        code: A200202
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A200301:
        code: A200301
        message: The token request does not contain 'auth_req_id' parameter.
      A200302:
        code: A200302
        message: The value of 'auth_req_id' in the token request is empty.
      A200303:
        code: A200303
        message: The token request contains multiple 'auth_req_id' parameters.
      A200304:
        code: A200304
        message: The 'auth_req_id' does not exist.
      A200305:
        code: A200305
        message: The client is not the owner of the 'auth_req_id'.
      A200306:
        code: A200306
        message: The 'auth_req_id' cannot be used at the token endpoint because it has issued in the 'push' mode.
      A200307:
        code: A200307
        message: The 'auth_req_id' has expired.
      A200308:
        code: A200308
        message: The end-user has not been authenticated yet.
      A200309:
        code: A200309
        message: The algorithm for signing ID tokens must not be 'none'.
      A200310:
        code: A200310
        message: 'The auth_req_id for token issuance was consumed by another transaction, so tokens are not issued.'
      A200401:
        code: A200401
        message: 'The response from Authlete''s /api/auth/token endpoint (grant_type=urn:openid:params:grant-type:ciba): {Message}'
      A201301:
        code: A201301
        message: The value of the 'requested_expiry' request parameter is not an integer.
      A201302:
        code: A201302
        message: The value of the 'requested_expiry' request parameter must be a positive integer.
      A202001:
        code: A202001
        message: 'The client was created with id ''{client id}''.'
      A203301:
        code: A203301
        message: There was an error serializing the client information.
      A203302:
        code: A203302
        message: Client metadata was empty.
      A203303:
        code: A203303
        message: Client metadata did not parse as valid JSON.
      A203304:
        code: A203304
        message: The 'jwks' claim must be a JSON object.
      A203305:
        code: A203305
        message: Custom metadata did not parse as valid JSON.
      A204101:
        code: A204101
        message: Failed to retrieve extension information of the client.
      A204301:
        code: A204301
        message: Client cannot have both 'jwks_uri' and 'jwks' properties simultaneously.
      A204302:
        code: A204302
        message: A grant type of 'authorization_code' requires at least one response type containing 'code'.
      A204303:
        code: A204303
        message: A grant type of 'implicit' requires at least one response type containing 'token' or 'id_token'.
      A204304:
        code: A204304
        message: A response type containing 'code' requires the 'authorization_code' grant type.
      A204305:
        code: A204305
        message: A response type containing 'token' or 'id_token' requires the 'implicit' grant type.
      A204306:
        code: A204306
        message: 'The ''{claim name}'' claim must be a list of strings.'
      A204307:
        code: A204307
        message: 'The ''{claim name}'' claim must be a URI.'
      A204308:
        code: A204308
        message: 'The ''{claim name}'' claim must be a string.'
      A204309:
        code: A204309
        message: 'The ''{claim name}'' claim must be an integer.'
      A204310:
        code: A204310
        message: 'The ''{claim name}'' claim must be a boolean.'
      A204311:
        code: A204311
        message: The 'jwks' claim must be a JSON object.
      A204312:
        code: A204312
        message: The 'pairwise' subject type must be used with a 'sector_identifier_uri' or a single host in 'redirect_uris'.
      A204313:
        code: A204313
        message: 'The ''{claim name}'' claim must be an https URI.'
      A204314:
        code: A204314
        message: The format of the custom client metadata is wrong.
      A204315:
        code: A204315
        message: 'The ''{claim name}'' claim must be a JSON object.'
      A205301:
        code: A205301
        message: Software statement must be a JOSE object.
      A205302:
        code: A205302
        message: Software statement must be signed with JWS.
      A205303:
        code: A205303
        message: Software statement cannot be encrypted.
      A205304:
        code: A205304
        message: Software statement payload must be JSON.
      A205305:
        code: A205305
        message: Software statement did not pass processing rules for this service.
      A205306:
        code: A205306
        message: Software statement signature did not validate against configured keys.
      A205307:
        code: A205307
        message: 'Software statement claim (''{claim name}'') did not match a rule.'
      A206201:
        code: A206201
        message: 'Service ({service api key}) does not support dynamic client registration.'
      A207201:
        code: A207201
        message: 'The service (API Key = {service api key}) does not exist.'
      A207202:
        code: A207202
        message: 'The service (API Key = {service api key}) does not belong to the service owner.'
      A207203:
        code: A207203
        message: 'The service (API Key = {service api key}) has been deleted.'
      A207204:
        code: A207204
        message: 'The service (API Key = {service api key}) is locked.'
      A207205:
        code: A207205
        message: Failed to parse the JWK set of the assertion processor.
      A207206:
        code: A207206
        message: Failed to create the assertion processor.
      A207207:
        code: A207207
        message: A key in the JWK Set does not supply an appropriate algorithm identifier.
      A208201:
        code: A208201
        message: 'The service (API Key = {service api key}) does not exist.'
      A208202:
        code: A208202
        message: 'The service (API Key = {service api key}) does not belong to the service owner.'
      A208203:
        code: A208203
        message: 'The service (API Key = {service api key}) has been deleted.'
      A208204:
        code: A208204
        message: 'The service (API Key = {service api key}) is locked.'
      A209201:
        code: A209201
        message: 'The service ({service number}) does not exist.'
      A209202:
        code: A209202
        message: 'The service ({service number}) does not belong to the service owner.'
      A209203:
        code: A209203
        message: 'The service ({service number}) has been deleted.'
      A209204:
        code: A209204
        message: 'The service ({service number}) is locked.'
      A209205:
        code: A209205
        message: The assertion processor entity was not found.
      A210201:
        code: A210201
        message: 'The service ({service number}) does not exist.'
      A210202:
        code: A210202
        message: 'The service ({service number}) does not belong to the service owner.'
      A210203:
        code: A210203
        message: 'The service ({service number}) has been deleted.'
      A210204:
        code: A210204
        message: 'The service ({service number}) is locked.'
      A210205:
        code: A210205
        message: Failed to parse the JWK set of the assertion processor.
      A210206:
        code: A210206
        message: Failed to update the assertion processor.
      A210207:
        code: A210207
        message: The assertion processor entity was not found.
      A210208:
        code: A210208
        message: A key in the JWK Set does not supply an appropriate algorithm identifier.
      A211201:
        code: A211201
        message: The JWK set does not exist.
      A212001:
        code: A212001
        message: 'The assertion processor ({assertion processor number}) was deleted.'
      A212201:
        code: A212201
        message: 'The service ({service number}) does not exist.'
      A212202:
        code: A212202
        message: 'The service ({service number}) does not belong to the service owner.'
      A212203:
        code: A212203
        message: 'The service ({service number}) has been deleted.'
      A212204:
        code: A212204
        message: 'The service ({service number}) is locked.'
      A212205:
        code: A212205
        message: The assertion processor entity was not found.
      A213001:
        code: A213001
        message: The client has been updated.
      A214301:
        code: A214301
        message: The 'client_id' field must be present in the registration update request.
      A214302:
        code: A214302
        message: 'The ''client_id'' in the registration update request (''{client id}'') did not match the expected client ID (''{client id}'').'
      A215301:
        code: A215301
        message: 'Unable to parse client ID ({client id}).'
      A215302:
        code: A215302
        message: 'Client with id ''{client id}'' not found.'
      A215303:
        code: A215303
        message: 'Client ({client id}) is not dynamically registered.'
      A215304:
        code: A215304
        message: The 'client_secret' in the registration update request did not match the expected client secret.
      A215305:
        code: A215305
        message: The registration access token is not present.
      A215306:
        code: A215306
        message: 'The client ({client id}) has no registration access token, update function is not available.'
      A215307:
        code: A215307
        message: 'The registration access token presented does not match the registration access token for this client ({client id}).'
      A216001:
        code: A216001
        message: The client has been deleted.
      A217001:
        code: A217001
        message: The client information has been returned.
      A218301:
        code: A218301
        message: Failed to parse the 'client_assertion' request parameter as JWS.
      A218302:
        code: A218302
        message: Failed to extract the value of the 'iss' claim from the 'client_assertion'.
      A218303:
        code: A218303
        message: The client ID used in the Authorization header does not match the value of the 'client_id' request parameter.
      A218304:
        code: A218304
        message: The 'iss' claim in the 'client_assertion' does not match the value of the 'client_id' request parameter.
      A218305:
        code: A218305
        message: 'Information about the client application having the client ID ''{Client Identifier}'' was not found.'
      A219101:
        code: A219101
        message: Failed to get custom scope records from the database.
      A219102:
        code: A219102
        message: Failed to get the client extension data from the database.
      A219103:
        code: A219103
        message: 'Could not find the client extension data of the client. (extension number = {Number})'
      A219104:
        code: A219104
        message: Failed to get scope attributes from the database.
      A219301:
        code: A219301
        message: 'The client application is not allowed to request the ''{Scope Name}'' scope, so the scope is ignored.'
      A219302:
        code: A219302
        message: 'The ''{Scope Name}'' scope is not supported by this service, so the scope is ignored.'
      A219303:
        code: A219303
        message: The list of requested scopes is too long.
      A219304:
        code: A219304
        message: 'The ''{Claim Name}'' claim is implied by the ''{Scope Name}'' scope but ignored because the service does not support the claim.'
      A219305:
        code: A219305
        message: 'The device authorization request has no ''scope'' parameter or none of the given scopes is recognized as valid, and the service''s default scope set is empty. The service''s configuration does not allow requests that request no scope.'
      A219401:
        code: A219401
        message: 'Because the ''scope'' parameter was omitted, the default scope set is implicitly used: {Default Scopes}'
      A220001:
        code: A220001
        message: The device authorization request was processed successfully.
      A221101:
        code: A221101
        message: Failed to insert a new record into the 'df_code' table.
      A222101:
        code: A222101
        message: 'This service has not set up the verification URI yet, so Device Flow cannot be used.'
      A222102:
        code: A222102
        message: 'This service has not set up duration of verification codes yet, so Device Flow cannot be used.'
      A223101:
        code: A223101
        message: 'Failed to build verification_uri_complete from the template ''{URI}'': {Error Message}'
      A223201:
        code: A223201
        message: 'Because the template URI ''{URI}'' does not contain the placeholder ''{Placeholder}'' for a user code, verification_uri_complete is not included in the response from the device authorization endpoint.'
      A224001:
        code: A224001
        message: The user code is valid.
      A225101:
        code: A225101
        message: Failed to get the record for the user code from the database.
      A225102:
        code: A225102
        message: Failed to delete the record for the expired user code from the database (but this error is not critical).
      A225201:
        code: A225201
        message: The API call to /api/device/verification does not have the 'userCode' parameter or its value is empty.
      A225301:
        code: A225301
        message: No record for the user code exists in the database.
      A225302:
        code: A225302
        message: The database record for the user code does not belong to this service.
      A225303:
        code: A225303
        message: The user code has already expired.
      A226101:
        code: A226101
        message: Failed to get custom scope records from the database.
      A226102:
        code: A226102
        message: Failed to get scope attributes from the database.
      A227101:
        code: A227101
        message: Failed to get the record for the user code from the database.
      A227102:
        code: A227102
        message: Failed to delete the record for the expired user code from the database (but this error is not critical).
      A227201:
        code: A227201
        message: The API call to /api/device/complete does not have the 'userCode' parameter or its value is empty.
      A227301:
        code: A227301
        message: No record for the user code exists in the database.
      A227302:
        code: A227302
        message: The database record for the user code does not belong to this service.
      A227303:
        code: A227303
        message: The user code has already expired.
      A228201:
        code: A228201
        message: The mandatory request parameter 'result' is missing.
      A229101:
        code: A229101
        message: Failed to get information about the client from the database.
      A229301:
        code: A229301
        message: The client that has made the device authorization request does not exist any longer.
      A230201:
        code: A230201
        message: The 'subject' request parameter is missing or its value is empty.
      A230202:
        code: A230202
        message: 'The length of the ''subject'' request parameter exceeds the maximum length ({Number}).'
      A230203:
        code: A230203
        message: The value of the 'subject' request parameter contains non-ASCII letters.
      A231201:
        code: A231201
        message: 'The length of the ''sub'' request parameter exceeds the maximum length ({Number}).'
      A231202:
        code: A231202
        message: The value of the 'sub' request parameter contains non-ASCII letters.
      A232201:
        code: A232201
        message: The value of the 'authTime' request parameter must not be negative.
      A233201:
        code: A233201
        message: 'The length of the ''acr'' request parameter exceeds the maximum length ({Number}).'
      A233202:
        code: A233202
        message: The value of the 'acr' request parameter contains non-ASCII letters.
      A234201:
        code: A234201
        message: The value of the 'claims' request parameter failed to be parsed as JSON.
      A234202:
        code: A234202
        message: The size of the 'claims' is too big.
      A235201:
        code: A235201
        message: The size of the 'properties' is too big.
      A236201:
        code: A236201
        message: The value of the 'errorDescription' request parameter is too long.
      A236202:
        code: A236202
        message: The value of the 'errorUri' request parameter is too long.
      A236203:
        code: A236203
        message: The value of the 'errorUri' request parameter contains non-ASCII letters.
      A237101:
        code: A237101
        message: Failed to get custom scope records from the database.
      A237102:
        code: A237102
        message: Failed to get the client extension data from the database.
      A237103:
        code: A237103
        message: 'Could not find the client extension data of the client. (extension number = {Number})'
      A237104:
        code: A237104
        message: Failed to get scope attributes from the database.
      A237105:
        code: A237105
        message: Failed to get information about the client application from the database.
      A237301:
        code: A237301
        message: The list of requested scopes is too long.
      A238101:
        code: A238101
        message: Failed to get information about supported ACR values from the database.
      A238102:
        code: A238102
        message: Failed to get information about default ACR values from the database.
      A238301:
        code: A238301
        message: The list of requested ACRs is too long.
      A238302:
        code: A238302
        message: 'The ACR value ''{ACR Value}'' is not supported by this service, so it is ignored.'
      A238401:
        code: A238401
        message: 'Because the ''acr_values'' parameter was omitted, the default set of ACR values is implicitly used: {Default ACR Values}'
      A239201:
        code: A239201
        message: The user code has already been consumed by another transaction.
      A239202:
        code: A239202
        message: The user code has already expired.
      A239203:
        code: A239203
        message: The user code has already been consumed by the previous API call.
      A240101:
        code: A240101
        message: Failed to update the record in the 'df_code' table.
      A240401:
        code: A240401
        message: Failed to delete an expired record from the 'df_code' table.
      A240402:
        code: A240402
        message: Deleting the expired record from the 'df_code' table.
      A241001:
        code: A241001
        message: The API call was processed successfully.
      A242001:
        code: A242001
        message: 'Generated an error response corresponding to the result ({Result}) given to the /api/device/complete API.'
      A242002:
        code: A242002
        message: 'The token request (grant_type=urn:ietf:params:oauth:grant-type:device_code) was processed successfully.'
      A242101:
        code: A242101
        message: Failed to get the record holding the device_code from the database.
      A242102:
        code: A242102
        message: Failed to generate an ID token.
      A242103:
        code: A242103
        message: Failed to insert a new access token into the database.
      A242201:
        code: A242201
        message: The total size of 'properties' is too big.
      A242202:
        code: A242202
        message: 'Failed to prepare a JWT-based access token: {Error Message}'
      A242301:
        code: A242301
        message: The token request does not contain 'device_code' parameter.
      A242302:
        code: A242302
        message: The value of 'device_code' in the token request is empty.
      A242303:
        code: A242303
        message: The token request contains multiple 'device_code' parameters.
      A242304:
        code: A242304
        message: The 'device_code' does not exist.
      A242305:
        code: A242305
        message: The client is not the owner of the 'device_code'.
      A242306:
        code: A242306
        message: The 'device_code' has expired.
      A242307:
        code: A242307
        message: The device authorization request has not been authorized yet.
      A242308:
        code: A242308
        message: The algorithm for signing ID tokens must not be 'none'.
      A242309:
        code: A242309
        message: 'The device_code was consumed by another transaction, so tokens are not issued.'
      A242401:
        code: A242401
        message: 'The response from Authlete''s /api/auth/token endpoint (grant_type=urn:ietf:params:oauth:grant-type:device_code): {Message}'
      A243301:
        code: A243301
        message: The 'binding_message' request parameter is mandatory.
      A243302:
        code: A243302
        message: 'The token delivery mode ''{Delivery Mode}'' is not allowed. Change the configuration of the client application.'
      A243303:
        code: A243303
        message: The request must be signed. Use the 'request' request parameter.
      A243304:
        code: A243304
        message: 'The lifetime of the signed authentication request exceeds the upper limit ({Number} seconds).'
      A243305:
        code: A243305
        message: 'The client authentication method ({Client Authentication Method}) used at the backchannel authentication endpoint is not allowed.'
      A243306:
        code: A243306
        message: 'The signature algorithm ({Algorithm}) of the signed authentication request is not allowed.'
      A243307:
        code: A243307
        message: 'The signature algorithm ({Algorithm}) of the client assertion is not allowed.'
      A243308:
        code: A243308
        message: The size (%d) of the signing key of the client assertion is less than the allowed minimum size (%d).
      A244101:
        code: A244101
        message: Failed to get information about the authorization code.
      A244102:
        code: A244102
        message: Failed to get information about the client.
      A244103:
        code: A244103
        message: Failed to get information about the refresh token.
      A244301:
        code: A244301
        message: The token request contains multiple 'client_id' parameters.
      A244302:
        code: A244302
        message: The token request contains multiple 'client_assertion' parameters.
      A244303:
        code: A244303
        message: The format of 'client_assertion' is wrong.
      A244304:
        code: A244304
        message: The 'client_assertion' does not include an 'iss' claim or its value is empty.
      A244305:
        code: A244305
        message: The token request does not include any clue to identify the client. Add a 'client_id' parameter.
      A244306:
        code: A244306
        message: Information about the client is not available.
      A244307:
        code: A244307
        message: 'The token request used the client ID alias, but the feature is not enabled. Check the configuration of the client.'
      A244308:
        code: A244308
        message: 'Because the feature of certificate-bound access tokens is enabled, the client must establish a mutual TLS connection to the token endpoint.'
      A244309:
        code: A244309
        message: The client certificate cannot be parsed as a valid certificate.
      A244310:
        code: A244310
        message: The authorization code does not exist.
      A244311:
        code: A244311
        message: The information about the client is not found in the database.
      A244312:
        code: A244312
        message: The information about the client associated with the authorization code is not found in the database.
      A244313:
        code: A244313
        message: The information about the client associated with the refresh token is not found in the database.
      A244314:
        code: A244314
        message: The refresh token does not exist.
      A245001:
        code: A245001
        message: 'Successfully registered a request object for client ({Client ID}), URI is {URI}.'
      A245101:
        code: A245101
        message: 'Unable to add request object URI to client. Error was: {Error Message}'
      A245301:
        code: A245301
        message: 'Couldn''t parse the request object''s claims. Error was: {Error Message}'
      A245302:
        code: A245302
        message: 'A claim in the request object did not match the plain parameter ''{Parameter Name}''.'
      A245401:
        code: A245401
        message: 'The response from Authlete''s /api/pushed_auth_req endpoint is: {Response Message}'
      A246301:
        code: A246301
        message: Client tried to register a signed request object but has no request object signing algorithm set.
      A246302:
        code: A246302
        message: Client tried to register a request object but has a request object signing algorithm of 'none'.
      A246303:
        code: A246303
        message: 'Client has a request object signing algorithm of {JWS Algorithm} but client secret was null or empty.'
      A246304:
        code: A246304
        message: 'Client has a request object signing algorithm of {JWS Algorithm} but no public key was found.'
      A246305:
        code: A246305
        message: 'Client has a request object signing algorithm of {JWS Algorithm} but no suitable keys were found.'
      A246306:
        code: A246306
        message: 'Client tried to register an invalid JOSE object as a request object. Error was: {Error Message}'
      A246307:
        code: A246307
        message: 'Couldn''t parse the request object''s claims. Error was: {Error Message}'
      A246308:
        code: A246308
        message: The request object does not include the 'iss' claim.
      A246309:
        code: A246309
        message: 'The client ID in the request object ({Client ID}) does not match the client ID ({Client ID}) of the client.'
      A246310:
        code: A246310
        message: 'The client ID in the request object ({Client ID}) does not match the client ID ({Client ID}) of the client.'
      A247301:
        code: A247301
        message: Failed to parse the 'client_assertion' request parameter as JWS.
      A247302:
        code: A247302
        message: Failed to extract the value of the 'iss' claim from the 'client_assertion'.
      A247303:
        code: A247303
        message: The client ID used in the Authorization header does not match the value of the 'client_id' request parameter.
      A247304:
        code: A247304
        message: The 'iss' claim in the 'client_assertion' does not match the value of the 'client_id' request parameter.
      A247305:
        code: A247305
        message: The client ID used in the Authorization header does not match the 'iss' claim in the 'client_assertion'.
      A247306:
        code: A247306
        message: The pushed authorization request endpoint request does not include any clue to identify the client application with. Adding the 'client_id' request parameter may solve this problem.
      A247307:
        code: A247307
        message: 'Information about the client application having the client ID ''{Client ID}'' was not found.'
      A248101:
        code: A248101
        message: 'An error occurred while hardware-secured keys were checked to create a JWE decrypter: {Error Message}'
      A248301:
        code: A248301
        message: The 'request_uri' parameter is not allowed at this endpoint.
      A248302:
        code: A248302
        message: 'Unable to parse the request object into a JWT: {Error Message}'
      A248303:
        code: A248303
        message: The request object JWE header did not contain the 'alg' parameter.
      A248304:
        code: A248304
        message: The request object JWE header did not contain the 'enc' parameter.
      A248305:
        code: A248305
        message: 'The request object JWE header''s ''alg'' value ({JWE Algorithm}) did not match the client''s registered request object JWE ''alg'' value ({JWE Algorithm}).'
      A248306:
        code: A248306
        message: 'The request object JWE header''s ''enc'' value ({JWE Encryption Method}) did not match the client''s registered request object JWE ''enc'' value ({JWE Encryption Method}).'
      A248307:
        code: A248307
        message: Failed to decrypt the encrypted request object.
      A248308:
        code: A248308
        message: Failed to get payload of the encrypted request object.
      A248309:
        code: A248309
        message: Failed to parse payload of the encrypted request object as a signed JWT.
      A248310:
        code: A248310
        message: 'The value of ''enc'' in the JWT ({JWE Encryption Method}) is not supported.'
      A248311:
        code: A248311
        message: Failed to create a decrypter for the JWE due to an unexpected key length.
      A248312:
        code: A248312
        message: Failed to create a decrypter for the JWE.
      A248313:
        code: A248313
        message: 'The value of ''alg'' in the JWE ({JWE Algorithm}) is not supported.'
      A248314:
        code: A248314
        message: 'The encryption algorithm of the request object is symmetric, but the client type is not ''confidential''.'
      A248315:
        code: A248315
        message: The request object is not signed.
      A248316:
        code: A248316
        message: Failed to parse the payload part of the request object.
      A248317:
        code: A248317
        message: '''{Claim Name}'' must not be included in the request object.'
      A249101:
        code: A249101
        message: Failed to get the list of supported authorization data types.
      A249102:
        code: A249102
        message: Failed to get the list of authorization data types that the client has declared it may use.
      A249301:
        code: A249301
        message: 'The ''type'' of the element (index = {Number}) in ''authorization_details'' is null or empty.'
      A249302:
        code: A249302
        message: 'The ''type'' of the element (index = {Number}) in ''authorization_details'' is not supported.'
      A249303:
        code: A249303
        message: 'The client has not declared it may use the ''type'' of the element (index = {Number}) in ''authorization_details''.'
      A249304:
        code: A249304
        message: The format of the value of 'authorization_details' is wrong.
      A249305:
        code: A249305
        message: The value of 'authorization_details' must be a JSON array.
      A249306:
        code: A249306
        message: 'The format of the element (index = {Number}) in ''authorization_details'' is wrong.'
      A250101:
        code: A250101
        message: Failed to get extension data of the client application.
      A250102:
        code: A250102
        message: Extension data of the client application is not found unexpectedly.
      A250301:
        code: A250301
        message: 'The request parameter ''{Request Parameter Name}'' is included in the request more than once.'
      A251301:
        code: A251301
        message: The value of the 'resource' property in the request object is neither a string nor an array.
      A251302:
        code: A251302
        message: 'The element at the index {Number} in the ''resource'' property in the request object is not a JSON string.'
      A251303:
        code: A251303
        message: 'The element at the index {Number} in the ''resource'' property in the request object is not a valid URI.'
      A251304:
        code: A251304
        message: 'The element at the index {Number} in the ''resource'' property in the request object is not an absolute URI.'
      A251305:
        code: A251305
        message: 'The element at the index {Number} in the ''resource'' property in the request object includes a fragment component.'
      A251306:
        code: A251306
        message: The value of a 'resource' is not a valid URI.
      A251307:
        code: A251307
        message: The value of a 'resource' is not an absolute URI.
      A251308:
        code: A251308
        message: The value of a 'resource' includes a fragment component.
      A251309:
        code: A251309
        message: The value of the 'resource' property in the request object is not a valid URI.
      A251310:
        code: A251310
        message: The value of the 'resource' property in the request object is not an absolute URI.
      A251311:
        code: A251311
        message: The value of the 'resource' property in the request object includes a fragment component.
      A252301:
        code: A252301
        message: The value of 'purpose' in the request object is not a string.
      A252302:
        code: A252302
        message: The authorization request contains multiple 'purpose' parameters.
      A252303:
        code: A252303
        message: 'The length of ''purpose'' is shorter than {Lower Limit}.'
      A252304:
        code: A252304
        message: 'The length of ''purpose'' is longer than {Upper Limit}.'
      A253101:
        code: A253101
        message: Failed to get the list of registered redirect URIs.
      A253301:
        code: A253301
        message: 'The ''{Parameter Name}'' in the request failed to be parsed as a string.'
      A253302:
        code: A253302
        message: The 'redirect_uri' parameter must be explicitly included when the 'scope' parameter includes 'openid'.
      A253303:
        code: A253303
        message: The 'redirect_uri' is not registered.
      A253304:
        code: A253304
        message: The 'redirect_uri' is malformed.
      A254301:
        code: A254301
        message: 'There was a problem processing the DPoP header: {Error}'
      A254302:
        code: A254302
        message: 'The DPoP signature algorithm ({Algorithm}) must not be symmetric or ''none''.'
      A254303:
        code: A254303
        message: The DPoP header did not include a public key in JWK format.
      A254304:
        code: A254304
        message: The DPoP signature algorithm is missing.
      A255201:
        code: A255201
        message: The value of 'idtHeaderParams' in the /api/auth/authorization/issue request failed to be parsed as a JSON object.
      A256201:
        code: A256201
        message: The value of 'idtHeaderParams' in the /api/backchannel/authentication/complete request failed to be parsed as a JSON object.
      A256202:
        code: A256202
        message: The total size of 'idtHeaderParams' is too big.
      A257201:
        code: A257201
        message: The value of 'idtHeaderParams' in the /api/device/complete request failed to be parsed as a JSON object.
      A257202:
        code: A257202
        message: The total size of 'idtHeaderParams' is too big.
      A258201:
        code: A258201
        message: '{API Path}, Content-Type header is not specified.'
      A261601:
        code: A261601
        message: 'Cannot create a new client because the current number of clients has reached the maximum number ({Number}) of clients per developer.'
      A261602:
        code: A261602
        message: 'Cannot create a new client because the current number of clients has reached the maximum number ({Number}) of the plan ({Plan Name}). Consult the manager of this service.'
      A261603:
        code: A261603
        message: The size of the custom metadata is too big.
      A261604:
        code: A261604
        message: Cannot create a new client because the client ID alias is already in use.
      A262201:
        code: A262201
        message: 'The client (ID = {Client ID}) does not exist.'
      A262202:
        code: A262202
        message: 'The client (ID = {Client ID}) has been deleted.'
      A262203:
        code: A262203
        message: 'The client (ID = {Client ID}) is locked.'
      A262601:
        code: A262601
        message: The size of the custom metadata is too big.
      A262602:
        code: A262602
        message: Cannot update the client because the client ID alias is already in use.
      A263201:
        code: A263201
        message: 'The ''{Request Parameter}'' request parameter is not specified or its value is empty.'
      A263202:
        code: A263202
        message: 'The value of the ''{Request Parameter}'' request parameter is not supported.'
      A263203:
        code: A263203
        message: 'The value of the ''alg'' request parameter is not supported for the use of ''{Key Use}''.'
      A263204:
        code: A263204
        message: 'The value of the ''alg'' ({Algorithm}) request parameter is invalid for the key type ''{Key Type}''.'
      A263205:
        code: A263205
        message: 'The length of the ''kid'' request parameter exceeds the allowed maximum length ({Number}).'
      A263206:
        code: A263206
        message: The value of the 'kid' request parameter contains non-ASCII letters.
      A263207:
        code: A263207
        message: 'The algorithm ''{Algorithm}'' is not supported by the HSM ''{HSM}''.'
      A263401:
        code: A263401
        message: 'Accepted a key creation request: hsm={HSM}, kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}'
      A264101:
        code: A264101
        message: 'Failed to load the class ''{Class Name}'' for the HSM ''{HSM}''.'
      A264102:
        code: A264102
        message: 'The class ''{Class Name}'' for the HSM ''{HSM}'' does not implement the ''HSM'' interface.'
      A264103:
        code: A264103
        message: 'The class ''{Class Name}'' for the HSM ''{HSM}'' does not have a default constructor.'
      A264104:
        code: A264104
        message: 'Failed to create an HSM instance for the HSM ''{HSM}''.'
      A264105:
        code: A264105
        message: 'The HSM name that the implementation declares is different from the expected one: expected={HSM Name}, actual={HSM Name}'
      A264201:
        code: A264201
        message: The specified HSM name is invalid.
      A264401:
        code: A264401
        message: 'Loading the ''{Class Name}'' class for the HSM ''{HSM}''.'
      A264402:
        code: A264402
        message: 'Succeeded in loading the ''{Class Name}'' class for the HSM ''{HSM}''.'
      A265101:
        code: A265101
        message: 'Failed to create a key on the HSM ''{HSM}'': kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}'
      A265102:
        code: A265102
        message: 'Failed to get the public key corresponding to the key created on the HSM ''{HSM}'': kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}'
      A265103:
        code: A265103
        message: 'Failed to delete the key created on the HSM ''{HSM}'': kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}'
      A265104:
        code: A265104
        message: 'The HSM ''{HSM}'' did not return a public key.'
      A265401:
        code: A265401
        message: 'Created a key on the HSM ''{HSM}'': service={Service API Key}, kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A265402:
        code: A265402
        message: 'Information about the key on the HSM ''{HSM}'' (handle={Handle}): {Information}'
      A265403:
        code: A265403
        message: |-
          The public key corresponding to the key on the HSM '{HSM}' (handle={Handle}):
          {Public Key}
      A266001:
        code: A266001
        message: 'Successfully created a key on the HSM ''{HSM}'': service={Service API Key}, kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A266201:
        code: A266201
        message: 'HSM support is not enabled for the service ({Service API Key}).'
      A267101:
        code: A267101
        message: 'Failed to insert a record to the ''hsk'' table that corresponds to the key created on the HSM ''{HSM}'': handle={Handle}'
      A267102:
        code: A267102
        message: 'Failed to delete the key on the HSM ''{HSM}'': handle={Handle}'
      A267401:
        code: A267401
        message: 'Inserted a new record into the ''hsk'' table: service={Service API Key}, hsm={HSM}, kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A268001:
        code: A268001
        message: 'Successfully obtained the key information: service={Service API Key}, hsm={HSM}, kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A268101:
        code: A268101
        message: 'Failed to get the record that matches the handle from the database: service={Service API Key}, handle={Handle}'
      A268201:
        code: A268201
        message: 'HSM support is not enabled for the service ({Service API Key}).'
      A268202:
        code: A268202
        message: 'No record matches the handle: service={Service API Key}, handle={Handle}'
      A269001:
        code: A269001
        message: 'Successfully obtained the records from the ''hsk'' table: service={Service API Key}, count={Number of Records}'
      A269101:
        code: A269101
        message: 'Failed to get records from the ''hsk'' table: service={Service API Key}'
      A269201:
        code: A269201
        message: 'HSM support is not enabled for the service ({Service API Key}).'
      A270001:
        code: A270001
        message: 'Successfully deleted the key: service={Service API Key}, hsm={HSM}, kty={Key Type}, use={Key Use}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A270101:
        code: A270101
        message: 'Failed to get the record that matches the handle from the database: service={Service API Key}, handle={Handle}'
      A270102:
        code: A270102
        message: '[INCONSISTENCY] The key on the HSM was deleted but the record corresponding to the key failed to be deleted from the database: service={Service API Key}, handle={Handle}'
      A270201:
        code: A270201
        message: 'HSM support is not enabled for the service ({Service API Key}).'
      A270202:
        code: A270202
        message: 'No record matches the handle: service={Service API Key}, handle={Handle}'
      A271101:
        code: A271101
        message: 'Failed to load the underlying implementation for the HSM ''{HSM}''.'
      A271102:
        code: A271102
        message: 'Failed to delete the key on the HSM ''{HSM}'': service={Service API Key}, handle={Handle}'
      A271401:
        code: A271401
        message: 'Deleted the key on the HSM ''{HSM}'': service={Service API Key}, handle={Handle}'
      A272101:
        code: A272101
        message: 'Failed to get the implementation for the HSM on which the key corresponding to the record exists: hsm={HSM} service number={Service Number}, handle={Handle}'
      A272102:
        code: A272102
        message: 'Failed to delete the key on the HSM: hsm={HSM}, service number={Service Number}, handle={Handle}'
      A272103:
        code: A272103
        message: 'The key on the HSM was not deleted, so the record in the ''hsk'' table is kept for consistency: hsm={HSM}, service number={Service Number}, handle={Handle}'
      A272104:
        code: A272104
        message: '[INCONSISTENCY] The key on the HSM was deleted but the record in the ''hsk'' table failed to be deleted: hsm={HSM}, service number={Service Number}, handle={Handle}'
      A272105:
        code: A272105
        message: 'Failed to get the records from the ''hsk'' table: service number={Service Number}'
      A272106:
        code: A272106
        message: 'Failed to delete some records from the ''hsk'' table: service number={Service Number}, target records={Count}, deleted records=%s, deleted HSM keys={Count}'
      A272401:
        code: A272401
        message: 'No record to delete in the ''hsk'' table: service number={Service Number}'
      A272402:
        code: A272402
        message: 'Deleted the key on the HSM: hsm={HSM}, service number={Service Number}, handle={Handle}'
      A272403:
        code: A272403
        message: 'Deleted the record in the ''hsk'' table: hsm={HSM}, service number={Service Number}, handle={Handle}'
      A272404:
        code: A272404
        message: 'Deleted {Count} record(s) from the ''hsk'' table successfully: service number={Service Number}'
      A273101:
        code: A273101
        message: 'Virtual HSM: Failed to parse a string ''{Input String}'' as a key type: {Error Message}'
      A273102:
        code: A273102
        message: 'Virtual HSM: Failed to create an RSA key: {Error Message}'
      A273103:
        code: A273103
        message: 'Virtual HSM: Failed to create an EC key: {Error Message}'
      A273104:
        code: A273104
        message: 'Virtual HSM: Failed to build a JWK from a Map: {Error Message}'
      A273105:
        code: A273105
        message: 'Virtual HSM: Failed to convert a JWK into an RSA public key: {Error Message}'
      A273106:
        code: A273106
        message: 'Virtual HSM: Failed to convert a JWK into an EC public key: {Error Message}'
      A273107:
        code: A273107
        message: 'Virtual HSM: Failed to create an RSA signer: {Error Message}'
      A273108:
        code: A273108
        message: 'Virtual HSM: Failed to create an EC signer: {Error Message}'
      A273109:
        code: A273109
        message: 'Virtual HSM: Failed to sign the data: {Error Message}'
      A273110:
        code: A273110
        message: 'Virtual HSM: Failed to convert a JWK into an RSA private key: {Error Message}'
      A273111:
        code: A273111
        message: 'Virtual HSM: Failed to get a cipher for the transformation ''{Transformation}'': {Error Message}'
      A273112:
        code: A273112
        message: 'Virtual HSM: Failed to initialize the cipher for decryption: transformation={Transformation}, error={Error Message}'
      A273113:
        code: A273113
        message: 'Virtual HSM: Failed to decrypt the input data by the cipher: {Error Message}'
      A273114:
        code: A273114
        message: 'Virtual HSM: Failed to get algorithm parameters for the algorithm ''{Algorithm}'': {Error Message}'
      A273115:
        code: A273115
        message: 'Virtual HSM: Failed to initialize algorithm parameters with the spec: {Error Message}'
      A273401:
        code: A273401
        message: 'Virtual HSM: Signed: alg={Algorithm}, handle={Handle}, signature={Signature}'
      A273402:
        code: A273402
        message: 'Virtual HSM: Decrypted: alg={Algorithm}, handle={Handle}'
      A274101:
        code: A274101
        message: 'Failed to sign: hsm={HSM}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A274401:
        code: A274401
        message: 'Signed: hsm={HSM}, alg={Algorithm}, kid={Key ID}, handle={Handle}, signature={Signature}'
      A275101:
        code: A275101
        message: 'The HSM decrypter does not support the encryption algorithm: hsm={HSM}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A275102:
        code: A275102
        message: 'Failed to decrypt the encrypted CEK: hsm={HSM}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A275301:
        code: A275301
        message: 'The JWE lacks {Element}: alg={Algorithm}'
      A275401:
        code: A275401
        message: 'Decrypted: hsm={HSM}, alg={Algorithm}, kid={Key ID}, handle={Handle}'
      A276001:
        code: A276001
        message: 'Successfully updated the service owner''s delete flag (Service Owner Identifier = {Service Owner Identifier}).'
      A276101:
        code: A276101
        message: Failed to update the service owner's delete flag.
      A276201:
        code: A276201
        message: The 'id' request parameter must be specified.
      A276202:
        code: A276202
        message: The presented ID was not associated with any service owner.
      A276203:
        code: A276203
        message: The service owner is already deleted.
      A276204:
        code: A276204
        message: The service owner is already undeleted.
      A293001:
        code: A293001
        message: 'Successfully updated the client''s lock flag (Client Identifier = {Client Identifier}).'
      A293101:
        code: A293101
        message: Failed to update the client's lock flag.
      A293201:
        code: A293201
        message: A client identifier must be specified.
      A293202:
        code: A293202
        message: The client has already been deleted.
      A293203:
        code: A293203
        message: The client is already locked.
      A293204:
        code: A293204
        message: The client is already unlocked.
tags:
  - name: Service Management
    description: 'API endpoints for managing services, including creation, update, and deletion of services.'
    x-tag-expanded: false
  - name: Client Management
    description: 'API endpoints for managing OAuth clients, including creation, update, and deletion of clients.'
    x-tag-expanded: false
  - name: Authorization Endpoint
    description: API endpoints for implementing OAuth 2.0 Authorization Endpoint.
    x-tag-expanded: false
  - name: Pushed Authorization Endpoint
    description: API endpoints for implementing OAuth 2.0 Pushed Authorization Requests (PAR).
    x-tag-expanded: false
  - name: Token Endpoint
    description: API endpoints for implementing OAuth 2.0 Token Endpoint.
    x-tag-expanded: false
  - name: Token Operations
    description: 'API endpoints for various token related operations, including creating, revoking and deleting access_tokens with specified scopes.'
    x-tag-expanded: false
  - name: Introspection Endpoint
    description: API endpoints for implementing OAuth 2.0 Introspection Endpoint.
    x-tag-expanded: false
  - name: Revocation Endpoint
    description: API endpoint for implementing OAuth 2.0 Revocation Endpoint.
    x-tag-expanded: false
  - name: UserInfo Endpoint
    description: API endpoints for implementing OpenID Connect UserInfo Endpoint.
    x-tag-expanded: false
  - name: JWK Set Endpoint
    description: API endpoints for to generate JSON Web Key Set (JWKS) for a service.
    x-tag-expanded: false
  - name: Discovery Endpoint
    description: API endpoints for implementing OpenID Connect Discovery.
    x-tag-expanded: false
  - name: Configuration Endpoint
    description: API endpoint for accessing configuration settings for a service.
    x-tag-expanded: false
  - name: Dynamic Client Registration
    description: API endpoints for implementing OAuth 2.0 Dynamic Client Registration.
    x-tag-expanded: false
  - name: CIBA
    description: API endpoints for implementing Client-Initiated Backchannel Authentication (CIBA).
    x-tag-expanded: false
  - name: Grant Management Endpoint
    description: 'API endpoint for implementing OAuth 2.0 grants, including grant management actions like updating and revoking grants.'
    x-tag-expanded: false
  - name: Jose Object
    description: API endpoints for JOSE objects.
    x-tag-expanded: false
  - name: Device Flow
    description: API endpoints for implementing OAuth 2.0 Device Flow
    x-tag-expanded: false
  - name: Federation Endpoint
    description: API endpoints for implementing OpenID Federation using Authlete.
    x-tag-expanded: false
  - name: Verifiable Credential Issuer
    description: API endpoints for implementing and running a Verifiable Credential Issuer (VCI).
    x-tag-expanded: false
  - name: Hardware Security Key
    description: API endpoints for managing hardware security keys (HSK).
    x-tag-expanded: false
  - name: Utility Endpoints
    description: API endpoints for various utility operations.
    x-tag-expanded: false

